
CAN_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08005cb8  08005cb8  00015cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800607c  0800607c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800607c  0800607c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001dc  08006260  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08006260  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008abd  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018dd  00000000  00000000  00028d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000622  00000000  00000000  0002ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017dce  00000000  00000000  0002b422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009fce  00000000  00000000  000431f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008653a  00000000  00000000  0004d1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000317c  00000000  00000000  000d36f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d6874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c9c 	.word	0x08005c9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005c9c 	.word	0x08005c9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_CAN_RxFifo1MsgPendingCallback>:

uint8_t count = 0;
uint8_t Tx_Buffer[100];

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 feb7 	bl	800180a <HAL_CAN_GetRxMessage>
	count++;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000aa6:	701a      	strb	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002a8 	.word	0x200002a8
 8000ab4:	20000280 	.word	0x20000280
 8000ab8:	200002b0 	.word	0x200002b0

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fb46 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f866 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 f92a 	bl	8000d20 <MX_GPIO_Init>
  MX_CAN_Init();
 8000acc:	f000 f8a8 	bl	8000c20 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000ad0:	f000 f8fc 	bl	8000ccc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000ad4:	2264      	movs	r2, #100	; 0x64
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <main+0xb0>)
 8000ada:	f002 fff4 	bl	8003ac6 <memset>
  sprintf((char*)Tx_Buffer,"LoopBack start..");
 8000ade:	4924      	ldr	r1, [pc, #144]	; (8000b70 <main+0xb4>)
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <main+0xb0>)
 8000ae2:	f002 ff8d 	bl	8003a00 <siprintf>
  HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	2264      	movs	r2, #100	; 0x64
 8000aea:	4920      	ldr	r1, [pc, #128]	; (8000b6c <main+0xb0>)
 8000aec:	4821      	ldr	r0, [pc, #132]	; (8000b74 <main+0xb8>)
 8000aee:	f002 f8e7 	bl	8002cc0 <HAL_UART_Transmit>

  HAL_CAN_Start(&hcan);
 8000af2:	4821      	ldr	r0, [pc, #132]	; (8000b78 <main+0xbc>)
 8000af4:	f000 fd76 	bl	80015e4 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000af8:	2110      	movs	r1, #16
 8000afa:	481f      	ldr	r0, [pc, #124]	; (8000b78 <main+0xbc>)
 8000afc:	f000 ffa6 	bl	8001a4c <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 8;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <main+0xc0>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <main+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <main+0xc0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <main+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x111;
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <main+0xc0>)
 8000b1a:	f240 1211 	movw	r2, #273	; 0x111
 8000b1e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <main+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	751a      	strb	r2, [r3, #20]

  //support maximum 3 mailbox
  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox[0]) != HAL_OK)
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <main+0xc4>)
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <main+0xc8>)
 8000b2a:	4914      	ldr	r1, [pc, #80]	; (8000b7c <main+0xc0>)
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <main+0xbc>)
 8000b2e:	f000 fd9d 	bl	800166c <HAL_CAN_AddTxMessage>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <main+0x80>
  {
	  Error_Handler();
 8000b38:	f000 f914 	bl	8000d64 <Error_Handler>
  }

  HAL_Delay(500);
 8000b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b40:	f000 fb68 	bl	8001214 <HAL_Delay>

  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000b44:	2264      	movs	r2, #100	; 0x64
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <main+0xb0>)
 8000b4a:	f002 ffbc 	bl	8003ac6 <memset>
  sprintf((char*)Tx_Buffer,"RxData:%s\nCount:%u",RxData,count);
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <main+0xcc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <main+0xd0>)
 8000b54:	490e      	ldr	r1, [pc, #56]	; (8000b90 <main+0xd4>)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <main+0xb0>)
 8000b58:	f002 ff52 	bl	8003a00 <siprintf>
  HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	2264      	movs	r2, #100	; 0x64
 8000b60:	4902      	ldr	r1, [pc, #8]	; (8000b6c <main+0xb0>)
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <main+0xb8>)
 8000b64:	f002 f8ac 	bl	8002cc0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0xac>
 8000b6a:	bf00      	nop
 8000b6c:	200002b4 	.word	0x200002b4
 8000b70:	08005cb8 	.word	0x08005cb8
 8000b74:	20000220 	.word	0x20000220
 8000b78:	200001f8 	.word	0x200001f8
 8000b7c:	20000268 	.word	0x20000268
 8000b80:	2000029c 	.word	0x2000029c
 8000b84:	20000000 	.word	0x20000000
 8000b88:	200002b0 	.word	0x200002b0
 8000b8c:	200002a8 	.word	0x200002a8
 8000b90:	08005ccc 	.word	0x08005ccc

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b090      	sub	sp, #64	; 0x40
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	2228      	movs	r2, #40	; 0x28
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 ff8f 	bl	8003ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fc0f 	bl	8002400 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000be8:	f000 f8bc 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fe7c 	bl	8002904 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c12:	f000 f8a7 	bl	8000d64 <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3740      	adds	r7, #64	; 0x40
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <MX_CAN_Init+0xa8>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c38:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c40:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c44:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000c48:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c50:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000c78:	f000 faf0 	bl	800125c <HAL_CAN_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_CAN_Init+0x66>
  {
    Error_Handler();
 8000c82:	f000 f86f 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8000c92:	f242 0360 	movw	r3, #8288	; 0x2060
 8000c96:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x1<<13;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000cae:	230d      	movs	r3, #13
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_CAN_Init+0xa4>)
 8000cb8:	f000 fbcb 	bl	8001452 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001f8 	.word	0x200001f8
 8000cc8:	40006400 	.word	0x40006400

08000ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_USART1_UART_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000d04:	f001 ff8c 	bl	8002c20 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 f829 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000220 	.word	0x20000220
 8000d1c:	40013800 	.word	0x40013800

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_MspInit+0x60>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_MspInit+0x60>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <HAL_CAN_MspInit+0x9c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d139      	bne.n	8000e68 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_CAN_MspInit+0xa0>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_CAN_MspInit+0xa0>)
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	61d3      	str	r3, [r2, #28]
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_CAN_MspInit+0xa0>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_CAN_MspInit+0xa0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <HAL_CAN_MspInit+0xa0>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_CAN_MspInit+0xa0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <HAL_CAN_MspInit+0xa4>)
 8000e3a:	f001 f95d 	bl	80020f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_CAN_MspInit+0xa4>)
 8000e54:	f001 f950 	bl	80020f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2015      	movs	r0, #21
 8000e5e:	f001 f914 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e62:	2015      	movs	r0, #21
 8000e64:	f001 f92d 	bl	80020c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40006400 	.word	0x40006400
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_UART_MspInit+0x8c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d131      	bne.n	8000f00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <HAL_UART_MspInit+0x94>)
 8000ee2:	f001 f909 	bl	80020f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_UART_MspInit+0x94>)
 8000efc:	f001 f8fc 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f93f 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <CAN1_RX1_IRQHandler+0x10>)
 8000f6a:	f000 fd94 	bl	8001a96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001f8 	.word	0x200001f8

08000f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return 1;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <_kill>:

int _kill(int pid, int sig)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f90:	f002 fdec 	bl	8003b6c <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2216      	movs	r2, #22
 8000f98:	601a      	str	r2, [r3, #0]
  return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_exit>:

void _exit (int status)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fae:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffe7 	bl	8000f86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fb8:	e7fe      	b.n	8000fb8 <_exit+0x12>

08000fba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e00a      	b.n	8000fe2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	b2ca      	uxtb	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dbf0      	blt.n	8000fcc <_read+0x12>
  }

  return len;
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e009      	b.n	800101a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	60ba      	str	r2, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	dbf1      	blt.n	8001006 <_write+0x12>
  }
  return len;
 8001022:	687b      	ldr	r3, [r7, #4]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_close>:

int _close(int file)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	605a      	str	r2, [r3, #4]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f002 fd56 	bl	8003b6c <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20005000 	.word	0x20005000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	20000318 	.word	0x20000318
 80010f4:	20000470 	.word	0x20000470

080010f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fff8 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <LoopFillZerobss+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001120:	4c09      	ldr	r4, [pc, #36]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f002 fd23 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff fcc3 	bl	8000abc <main>
  bx lr
 8001136:	4770      	bx	lr
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001140:	08006084 	.word	0x08006084
  ldr r2, =_sbss
 8001144:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001148:	2000046c 	.word	0x2000046c

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x28>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x28>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 ff87 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fe00 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 ff9f 	bl	80020de <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 ff67 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000010 	.word	0x20000010
 80011d8:	2000000c 	.word	0x2000000c

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_IncTick+0x20>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000010 	.word	0x20000010
 80011fc:	2000031c 	.word	0x2000031c

08001200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000031c 	.word	0x2000031c

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff fff0 	bl	8001200 <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffe0 	bl	8001200 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000010 	.word	0x20000010

0800125c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0ed      	b.n	800144a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fdaa 	bl	8000dd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001290:	f7ff ffb6 	bl	8001200 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001296:	e012      	b.n	80012be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001298:	f7ff ffb2 	bl	8001200 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b0a      	cmp	r3, #10
 80012a4:	d90b      	bls.n	80012be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0c5      	b.n	800144a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0e5      	beq.n	8001298 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0202 	bic.w	r2, r2, #2
 80012da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012dc:	f7ff ff90 	bl	8001200 <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012e2:	e012      	b.n	800130a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e4:	f7ff ff8c 	bl	8001200 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b0a      	cmp	r3, #10
 80012f0:	d90b      	bls.n	800130a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2205      	movs	r2, #5
 8001302:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e09f      	b.n	800144a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e5      	bne.n	80012e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e1b      	ldrb	r3, [r3, #24]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7e5b      	ldrb	r3, [r3, #25]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e9b      	ldrb	r3, [r3, #26]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0220 	orr.w	r2, r2, #32
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0220 	bic.w	r2, r2, #32
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7edb      	ldrb	r3, [r3, #27]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0210 	bic.w	r2, r2, #16
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0210 	orr.w	r2, r2, #16
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7f1b      	ldrb	r3, [r3, #28]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0208 	bic.w	r2, r2, #8
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7f5b      	ldrb	r3, [r3, #29]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d108      	bne.n	8001404 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0204 	orr.w	r2, r2, #4
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0204 	bic.w	r2, r2, #4
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	ea42 0103 	orr.w	r1, r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001452:	b480      	push	{r7}
 8001454:	b087      	sub	sp, #28
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001468:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d003      	beq.n	8001478 <HAL_CAN_ConfigFilter+0x26>
 8001470:	7cfb      	ldrb	r3, [r7, #19]
 8001472:	2b02      	cmp	r3, #2
 8001474:	f040 80aa 	bne.w	80015cc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2201      	movs	r2, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d123      	bne.n	80014fa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	401a      	ands	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3248      	adds	r2, #72	; 0x48
 80014da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	3348      	adds	r3, #72	; 0x48
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d122      	bne.n	8001548 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	431a      	orrs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001522:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3248      	adds	r2, #72	; 0x48
 8001528:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800153c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153e:	6979      	ldr	r1, [r7, #20]
 8001540:	3348      	adds	r3, #72	; 0x48
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001562:	e007      	b.n	8001574 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	431a      	orrs	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800158e:	e007      	b.n	80015a0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d107      	bne.n	80015b8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015be:	f023 0201 	bic.w	r2, r3, #1
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e006      	b.n	80015da <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
  }
}
 80015da:	4618      	mov	r0, r3
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d12e      	bne.n	8001656 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff fdf6 	bl	8001200 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001616:	e012      	b.n	800163e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001618:	f7ff fdf2 	bl	8001200 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d90b      	bls.n	800163e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e012      	b.n	8001664 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e5      	bne.n	8001618 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e006      	b.n	8001664 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001680:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d003      	beq.n	8001698 <HAL_CAN_AddTxMessage+0x2c>
 8001690:	7ffb      	ldrb	r3, [r7, #31]
 8001692:	2b02      	cmp	r3, #2
 8001694:	f040 80ad 	bne.w	80017f2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10a      	bne.n	80016b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8095 	beq.w	80017e2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	0e1b      	lsrs	r3, r3, #24
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10d      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016de:	68f9      	ldr	r1, [r7, #12]
 80016e0:	6809      	ldr	r1, [r1, #0]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3318      	adds	r3, #24
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	440b      	add	r3, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e00f      	b.n	8001710 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001704:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3318      	adds	r3, #24
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	440b      	add	r3, r1
 800170e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3318      	adds	r3, #24
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	440b      	add	r3, r1
 8001720:	3304      	adds	r3, #4
 8001722:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	7d1b      	ldrb	r3, [r3, #20]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d111      	bne.n	8001750 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3318      	adds	r3, #24
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	3304      	adds	r3, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	6811      	ldr	r1, [r2, #0]
 8001740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3318      	adds	r3, #24
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	440b      	add	r3, r1
 800174c:	3304      	adds	r3, #4
 800174e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3307      	adds	r3, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	061a      	lsls	r2, r3, #24
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3306      	adds	r3, #6
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3305      	adds	r3, #5
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	4313      	orrs	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	3204      	adds	r2, #4
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4610      	mov	r0, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6811      	ldr	r1, [r2, #0]
 8001778:	ea43 0200 	orr.w	r2, r3, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	440b      	add	r3, r1
 8001782:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001786:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3303      	adds	r3, #3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	061a      	lsls	r2, r3, #24
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3302      	adds	r3, #2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4313      	orrs	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	4610      	mov	r0, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	6811      	ldr	r1, [r2, #0]
 80017ae:	ea43 0200 	orr.w	r2, r3, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	440b      	add	r3, r1
 80017b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3318      	adds	r3, #24
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6811      	ldr	r1, [r2, #0]
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3318      	adds	r3, #24
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	440b      	add	r3, r1
 80017dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e00e      	b.n	8001800 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e006      	b.n	8001800 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800180a:	b480      	push	{r7}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d003      	beq.n	800182e <HAL_CAN_GetRxMessage+0x24>
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	2b02      	cmp	r3, #2
 800182a:	f040 8103 	bne.w	8001a34 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10e      	bne.n	8001852 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0f7      	b.n	8001a42 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0e8      	b.n	8001a42 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	331b      	adds	r3, #27
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0204 	and.w	r2, r3, #4
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	331b      	adds	r3, #27
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	331b      	adds	r3, #27
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	331b      	adds	r3, #27
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0202 	and.w	r2, r3, #2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	331b      	adds	r3, #27
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2208      	movs	r2, #8
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	e00b      	b.n	800190e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	331b      	adds	r3, #27
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	3304      	adds	r3, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 020f 	and.w	r2, r3, #15
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	331b      	adds	r3, #27
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	331b      	adds	r3, #27
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	3304      	adds	r3, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	b29a      	uxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4413      	add	r3, r2
 8001948:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0a1a      	lsrs	r2, r3, #8
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0c1a      	lsrs	r2, r3, #16
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	3302      	adds	r3, #2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0e1a      	lsrs	r2, r3, #24
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3303      	adds	r3, #3
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3304      	adds	r3, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0a1a      	lsrs	r2, r3, #8
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3305      	adds	r3, #5
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0c1a      	lsrs	r2, r3, #16
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	3306      	adds	r3, #6
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	0e1a      	lsrs	r2, r3, #24
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	3307      	adds	r3, #7
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	e007      	b.n	8001a30 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e006      	b.n	8001a42 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <HAL_CAN_ActivateNotification+0x1e>
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d109      	bne.n	8001a7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6959      	ldr	r1, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e006      	b.n	8001a8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b08a      	sub	sp, #40	; 0x28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d07c      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d023      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f983 	bl	8001e04 <HAL_CAN_TxMailbox0CompleteCallback>
 8001afe:	e016      	b.n	8001b2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	e00c      	b.n	8001b2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	e002      	b.n	8001b2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f986 	bl	8001e3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d024      	beq.n	8001b82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f962 	bl	8001e16 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b52:	e016      	b.n	8001b82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00c      	b.n	8001b82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e002      	b.n	8001b82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f965 	bl	8001e4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d024      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f941 	bl	8001e28 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ba6:	e016      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bba:	e00c      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	e002      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f944 	bl	8001e5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00c      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2208      	movs	r2, #8
 8001c14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f933 	bl	8001e82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f91b 	bl	8001e70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00b      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f90a 	bl	8001e94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7fe fef5 	bl	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8f3 	bl	8001ea6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8eb 	bl	8001eb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d07b      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d072      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d043      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03e      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d64:	2b60      	cmp	r3, #96	; 0x60
 8001d66:	d02b      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x32a>
 8001d68:	2b60      	cmp	r3, #96	; 0x60
 8001d6a:	d82e      	bhi.n	8001dca <HAL_CAN_IRQHandler+0x334>
 8001d6c:	2b50      	cmp	r3, #80	; 0x50
 8001d6e:	d022      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x320>
 8001d70:	2b50      	cmp	r3, #80	; 0x50
 8001d72:	d82a      	bhi.n	8001dca <HAL_CAN_IRQHandler+0x334>
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d019      	beq.n	8001dac <HAL_CAN_IRQHandler+0x316>
 8001d78:	2b40      	cmp	r3, #64	; 0x40
 8001d7a:	d826      	bhi.n	8001dca <HAL_CAN_IRQHandler+0x334>
 8001d7c:	2b30      	cmp	r3, #48	; 0x30
 8001d7e:	d010      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x30c>
 8001d80:	2b30      	cmp	r3, #48	; 0x30
 8001d82:	d822      	bhi.n	8001dca <HAL_CAN_IRQHandler+0x334>
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d002      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x2f8>
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d005      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d8c:	e01d      	b.n	8001dca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d96:	e019      	b.n	8001dcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001da0:	e014      	b.n	8001dcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001daa:	e00f      	b.n	8001dcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001db4:	e00a      	b.n	8001dcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dbe:	e005      	b.n	8001dcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dc8:	e000      	b.n	8001dcc <HAL_CAN_IRQHandler+0x336>
            break;
 8001dca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2204      	movs	r2, #4
 8001de2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f867 	bl	8001eca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4906      	ldr	r1, [pc, #24]	; (8001f74 <__NVIC_EnableIRQ+0x34>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff90 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff2d 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff42 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff90 	bl	8001fcc <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5f 	bl	8001f78 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff35 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa2 	bl	8002030 <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b08b      	sub	sp, #44	; 0x2c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e169      	b.n	80023e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800210c:	2201      	movs	r2, #1
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8158 	bne.w	80023da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a9a      	ldr	r2, [pc, #616]	; (8002398 <HAL_GPIO_Init+0x2a0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d05e      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002134:	4a98      	ldr	r2, [pc, #608]	; (8002398 <HAL_GPIO_Init+0x2a0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d875      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800213a:	4a98      	ldr	r2, [pc, #608]	; (800239c <HAL_GPIO_Init+0x2a4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d058      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002140:	4a96      	ldr	r2, [pc, #600]	; (800239c <HAL_GPIO_Init+0x2a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d86f      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002146:	4a96      	ldr	r2, [pc, #600]	; (80023a0 <HAL_GPIO_Init+0x2a8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d052      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 800214c:	4a94      	ldr	r2, [pc, #592]	; (80023a0 <HAL_GPIO_Init+0x2a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d869      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002152:	4a94      	ldr	r2, [pc, #592]	; (80023a4 <HAL_GPIO_Init+0x2ac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04c      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002158:	4a92      	ldr	r2, [pc, #584]	; (80023a4 <HAL_GPIO_Init+0x2ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d863      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800215e:	4a92      	ldr	r2, [pc, #584]	; (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d046      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002164:	4a90      	ldr	r2, [pc, #576]	; (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d85d      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800216a:	2b12      	cmp	r3, #18
 800216c:	d82a      	bhi.n	80021c4 <HAL_GPIO_Init+0xcc>
 800216e:	2b12      	cmp	r3, #18
 8002170:	d859      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_GPIO_Init+0x80>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	080021f3 	.word	0x080021f3
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021df 	.word	0x080021df
 8002184:	08002221 	.word	0x08002221
 8002188:	08002227 	.word	0x08002227
 800218c:	08002227 	.word	0x08002227
 8002190:	08002227 	.word	0x08002227
 8002194:	08002227 	.word	0x08002227
 8002198:	08002227 	.word	0x08002227
 800219c:	08002227 	.word	0x08002227
 80021a0:	08002227 	.word	0x08002227
 80021a4:	08002227 	.word	0x08002227
 80021a8:	08002227 	.word	0x08002227
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002227 	.word	0x08002227
 80021b4:	08002227 	.word	0x08002227
 80021b8:	08002227 	.word	0x08002227
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021e9 	.word	0x080021e9
 80021c4:	4a79      	ldr	r2, [pc, #484]	; (80023ac <HAL_GPIO_Init+0x2b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ca:	e02c      	b.n	8002226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e029      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	3304      	adds	r3, #4
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e024      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	3308      	adds	r3, #8
 80021e4:	623b      	str	r3, [r7, #32]
          break;
 80021e6:	e01f      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	330c      	adds	r3, #12
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	e01a      	b.n	8002228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fa:	2304      	movs	r3, #4
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e013      	b.n	8002228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	611a      	str	r2, [r3, #16]
          break;
 8002212:	e009      	b.n	8002228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002214:	2308      	movs	r3, #8
 8002216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	615a      	str	r2, [r3, #20]
          break;
 800221e:	e003      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x130>
          break;
 8002226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	; 0xff
 800222c:	d801      	bhi.n	8002232 <HAL_GPIO_Init+0x13a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e001      	b.n	8002236 <HAL_GPIO_Init+0x13e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d802      	bhi.n	8002244 <HAL_GPIO_Init+0x14c>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x152>
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	3b08      	subs	r3, #8
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	210f      	movs	r1, #15
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80b1 	beq.w	80023da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002278:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002290:	4a48      	ldr	r2, [pc, #288]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <HAL_GPIO_Init+0x2c0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <HAL_GPIO_Init+0x2c4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00d      	beq.n	80022e0 <HAL_GPIO_Init+0x1e8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3e      	ldr	r2, [pc, #248]	; (80023c0 <HAL_GPIO_Init+0x2c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <HAL_GPIO_Init+0x1e4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3d      	ldr	r2, [pc, #244]	; (80023c4 <HAL_GPIO_Init+0x2cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_GPIO_Init+0x1e0>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e006      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022d8:	2304      	movs	r3, #4
 80022da:	e004      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022dc:	2302      	movs	r3, #2
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e4:	2300      	movs	r3, #0
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	f002 0203 	and.w	r2, r2, #3
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	4093      	lsls	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f6:	492f      	ldr	r1, [pc, #188]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	492c      	ldr	r1, [pc, #176]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4928      	ldr	r1, [pc, #160]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	43db      	mvns	r3, r3
 800234e:	491e      	ldr	r1, [pc, #120]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002350:	4013      	ands	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4914      	ldr	r1, [pc, #80]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e021      	b.n	80023da <HAL_GPIO_Init+0x2e2>
 8002396:	bf00      	nop
 8002398:	10320000 	.word	0x10320000
 800239c:	10310000 	.word	0x10310000
 80023a0:	10220000 	.word	0x10220000
 80023a4:	10210000 	.word	0x10210000
 80023a8:	10120000 	.word	0x10120000
 80023ac:	10110000 	.word	0x10110000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40010800 	.word	0x40010800
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40011400 	.word	0x40011400
 80023c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_GPIO_Init+0x304>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <HAL_GPIO_Init+0x304>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	3301      	adds	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f ae8e 	bne.w	800210c <HAL_GPIO_Init+0x14>
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	372c      	adds	r7, #44	; 0x2c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e272      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8087 	beq.w	800252e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	4b92      	ldr	r3, [pc, #584]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d00c      	beq.n	8002446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800242c:	4b8f      	ldr	r3, [pc, #572]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d10b      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06c      	beq.n	800252c <HAL_RCC_OscConfig+0x12c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d168      	bne.n	800252c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e24c      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x76>
 8002468:	4b80      	ldr	r3, [pc, #512]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7f      	ldr	r2, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e02e      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b7b      	ldr	r3, [pc, #492]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7a      	ldr	r2, [pc, #488]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a77      	ldr	r2, [pc, #476]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0xbc>
 80024a2:	4b72      	ldr	r3, [pc, #456]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a71      	ldr	r2, [pc, #452]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6f      	ldr	r3, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a67      	ldr	r2, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fe90 	bl	8001200 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fe8c 	bl	8001200 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e200      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xe4>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe7c 	bl	8001200 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fe78 	bl	8001200 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1ec      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x10c>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c0      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fe31 	bl	8001200 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fe2d 	bl	8001200 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4927      	ldr	r1, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fe10 	bl	8001200 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fe0c 	bl	8001200 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e180      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03a      	beq.n	8002684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7fe fdf0 	bl	8001200 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fdec 	bl	8001200 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e160      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 face 	bl	8002be4 <RCC_Delay>
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe fdd6 	bl	8001200 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002656:	e00f      	b.n	8002678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe fdd2 	bl	8001200 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d908      	bls.n	8002678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e146      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	42420000 	.word	0x42420000
 8002674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a6 	beq.w	80027de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fd93 	bl	8001200 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fe fd8f 	bl	8001200 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e103      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4c8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e02d      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x334>
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x356>
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a5a      	ldr	r2, [pc, #360]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe fd43 	bl	8001200 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe fd3f 	bl	8001200 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0b1      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x37e>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fd2d 	bl	8001200 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe fd29 	bl	8001200 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e09b      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8087 	beq.w	80028f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d061      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d146      	bne.n	800288a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fcfd 	bl	8001200 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fcf9 	bl	8001200 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e06d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	4921      	ldr	r1, [pc, #132]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a19      	ldr	r1, [r3, #32]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	430b      	orrs	r3, r1
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fccd 	bl	8001200 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fcc9 	bl	8001200 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x46a>
 8002888:	e035      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fcb6 	bl	8001200 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fcb2 	bl	8001200 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e026      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x498>
 80028b6:	e01e      	b.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e019      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x500>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0d0      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4965      	ldr	r1, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800296a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d040      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e073      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06b      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4936      	ldr	r1, [pc, #216]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fc04 	bl	8001200 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fc00 	bl	8001200 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e053      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d210      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fb62 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08005ce0 	.word	0x08005ce0
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x30>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x36>
 8002b06:	e027      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	e027      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0c9b      	lsrs	r3, r3, #18
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
 8002b1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	0c5b      	lsrs	r3, r3, #17
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3a:	fb03 f202 	mul.w	r2, r3, r2
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e004      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	613b      	str	r3, [r7, #16]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b5a:	613b      	str	r3, [r7, #16]
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	693b      	ldr	r3, [r7, #16]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	007a1200 	.word	0x007a1200
 8002b74:	08005cf8 	.word	0x08005cf8
 8002b78:	08005d08 	.word	0x08005d08
 8002b7c:	003d0900 	.word	0x003d0900

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b02      	ldr	r3, [pc, #8]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	20000008 	.word	0x20000008

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff2 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08005cf0 	.word	0x08005cf0

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0adb      	lsrs	r3, r3, #11
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08005cf0 	.word	0x08005cf0

08002be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <RCC_Delay+0x34>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <RCC_Delay+0x38>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a5b      	lsrs	r3, r3, #9
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c00:	bf00      	nop
  }
  while (Delay --);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	60fa      	str	r2, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f9      	bne.n	8002c00 <RCC_Delay+0x1c>
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	10624dd3 	.word	0x10624dd3

08002c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e042      	b.n	8002cb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe f918 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f91d 	bl	8002ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d16d      	bne.n	8002dbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Transmit+0x2c>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e066      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfe:	f7fe fa7f 	bl	8001200 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x6c>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d34:	e02a      	b.n	8002d8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f840 	bl	8002dc6 <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e036      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e007      	b.n	8002d7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1cf      	bne.n	8002d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2140      	movs	r1, #64	; 0x40
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f810 	bl	8002dc6 <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b090      	sub	sp, #64	; 0x40
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd6:	e050      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d04c      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de6:	f7fe fa0b 	bl	8001200 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d241      	bcs.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e16:	637a      	str	r2, [r7, #52]	; 0x34
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3314      	adds	r3, #20
 8002e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e4a:	623a      	str	r2, [r7, #32]
 8002e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	69f9      	ldr	r1, [r7, #28]
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e00f      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d09f      	beq.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3740      	adds	r7, #64	; 0x40
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ede:	f023 030c 	bic.w	r3, r3, #12
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <UART_SetConfig+0x114>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f0c:	f7ff fe56 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	e002      	b.n	8002f1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7ff fe3e 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8002f18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <UART_SetConfig+0x118>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	0119      	lsls	r1, r3, #4
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009a      	lsls	r2, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <UART_SetConfig+0x118>)
 8002f52:	fba3 0302 	umull	r0, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2064      	movs	r0, #100	; 0x64
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	3332      	adds	r3, #50	; 0x32
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <UART_SetConfig+0x118>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f70:	4419      	add	r1, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009a      	lsls	r2, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <UART_SetConfig+0x118>)
 8002f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2064      	movs	r0, #100	; 0x64
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <UART_SetConfig+0x118>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	440a      	add	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <__cvt>:
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc6:	461f      	mov	r7, r3
 8002fc8:	bfbb      	ittet	lt
 8002fca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	461f      	movlt	r7, r3
 8002fd0:	2300      	movge	r3, #0
 8002fd2:	232d      	movlt	r3, #45	; 0x2d
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	4614      	mov	r4, r2
 8002fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fdc:	7013      	strb	r3, [r2, #0]
 8002fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002fe0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002fe4:	f023 0820 	bic.w	r8, r3, #32
 8002fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002fec:	d005      	beq.n	8002ffa <__cvt+0x3a>
 8002fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ff2:	d100      	bne.n	8002ff6 <__cvt+0x36>
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e000      	b.n	8002ffc <__cvt+0x3c>
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	aa07      	add	r2, sp, #28
 8002ffe:	9204      	str	r2, [sp, #16]
 8003000:	aa06      	add	r2, sp, #24
 8003002:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003006:	e9cd 3500 	strd	r3, r5, [sp]
 800300a:	4622      	mov	r2, r4
 800300c:	463b      	mov	r3, r7
 800300e:	f000 fe73 	bl	8003cf8 <_dtoa_r>
 8003012:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003016:	4606      	mov	r6, r0
 8003018:	d102      	bne.n	8003020 <__cvt+0x60>
 800301a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800301c:	07db      	lsls	r3, r3, #31
 800301e:	d522      	bpl.n	8003066 <__cvt+0xa6>
 8003020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003024:	eb06 0905 	add.w	r9, r6, r5
 8003028:	d110      	bne.n	800304c <__cvt+0x8c>
 800302a:	7833      	ldrb	r3, [r6, #0]
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d10a      	bne.n	8003046 <__cvt+0x86>
 8003030:	2200      	movs	r2, #0
 8003032:	2300      	movs	r3, #0
 8003034:	4620      	mov	r0, r4
 8003036:	4639      	mov	r1, r7
 8003038:	f7fd fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800303c:	b918      	cbnz	r0, 8003046 <__cvt+0x86>
 800303e:	f1c5 0501 	rsb	r5, r5, #1
 8003042:	f8ca 5000 	str.w	r5, [sl]
 8003046:	f8da 3000 	ldr.w	r3, [sl]
 800304a:	4499      	add	r9, r3
 800304c:	2200      	movs	r2, #0
 800304e:	2300      	movs	r3, #0
 8003050:	4620      	mov	r0, r4
 8003052:	4639      	mov	r1, r7
 8003054:	f7fd fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8003058:	b108      	cbz	r0, 800305e <__cvt+0x9e>
 800305a:	f8cd 901c 	str.w	r9, [sp, #28]
 800305e:	2230      	movs	r2, #48	; 0x30
 8003060:	9b07      	ldr	r3, [sp, #28]
 8003062:	454b      	cmp	r3, r9
 8003064:	d307      	bcc.n	8003076 <__cvt+0xb6>
 8003066:	4630      	mov	r0, r6
 8003068:	9b07      	ldr	r3, [sp, #28]
 800306a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800306c:	1b9b      	subs	r3, r3, r6
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	b008      	add	sp, #32
 8003072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	9107      	str	r1, [sp, #28]
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e7f0      	b.n	8003060 <__cvt+0xa0>

0800307e <__exponent>:
 800307e:	4603      	mov	r3, r0
 8003080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003082:	2900      	cmp	r1, #0
 8003084:	f803 2b02 	strb.w	r2, [r3], #2
 8003088:	bfb6      	itet	lt
 800308a:	222d      	movlt	r2, #45	; 0x2d
 800308c:	222b      	movge	r2, #43	; 0x2b
 800308e:	4249      	neglt	r1, r1
 8003090:	2909      	cmp	r1, #9
 8003092:	7042      	strb	r2, [r0, #1]
 8003094:	dd2a      	ble.n	80030ec <__exponent+0x6e>
 8003096:	f10d 0207 	add.w	r2, sp, #7
 800309a:	4617      	mov	r7, r2
 800309c:	260a      	movs	r6, #10
 800309e:	fb91 f5f6 	sdiv	r5, r1, r6
 80030a2:	4694      	mov	ip, r2
 80030a4:	fb06 1415 	mls	r4, r6, r5, r1
 80030a8:	3430      	adds	r4, #48	; 0x30
 80030aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80030ae:	460c      	mov	r4, r1
 80030b0:	2c63      	cmp	r4, #99	; 0x63
 80030b2:	4629      	mov	r1, r5
 80030b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80030b8:	dcf1      	bgt.n	800309e <__exponent+0x20>
 80030ba:	3130      	adds	r1, #48	; 0x30
 80030bc:	f1ac 0402 	sub.w	r4, ip, #2
 80030c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80030c4:	4622      	mov	r2, r4
 80030c6:	1c41      	adds	r1, r0, #1
 80030c8:	42ba      	cmp	r2, r7
 80030ca:	d30a      	bcc.n	80030e2 <__exponent+0x64>
 80030cc:	f10d 0209 	add.w	r2, sp, #9
 80030d0:	eba2 020c 	sub.w	r2, r2, ip
 80030d4:	42bc      	cmp	r4, r7
 80030d6:	bf88      	it	hi
 80030d8:	2200      	movhi	r2, #0
 80030da:	4413      	add	r3, r2
 80030dc:	1a18      	subs	r0, r3, r0
 80030de:	b003      	add	sp, #12
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80030e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80030ea:	e7ed      	b.n	80030c8 <__exponent+0x4a>
 80030ec:	2330      	movs	r3, #48	; 0x30
 80030ee:	3130      	adds	r1, #48	; 0x30
 80030f0:	7083      	strb	r3, [r0, #2]
 80030f2:	70c1      	strb	r1, [r0, #3]
 80030f4:	1d03      	adds	r3, r0, #4
 80030f6:	e7f1      	b.n	80030dc <__exponent+0x5e>

080030f8 <_printf_float>:
 80030f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030fc:	b091      	sub	sp, #68	; 0x44
 80030fe:	460c      	mov	r4, r1
 8003100:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003104:	4616      	mov	r6, r2
 8003106:	461f      	mov	r7, r3
 8003108:	4605      	mov	r5, r0
 800310a:	f000 fce5 	bl	8003ad8 <_localeconv_r>
 800310e:	6803      	ldr	r3, [r0, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	9309      	str	r3, [sp, #36]	; 0x24
 8003114:	f7fd f81c 	bl	8000150 <strlen>
 8003118:	2300      	movs	r3, #0
 800311a:	930e      	str	r3, [sp, #56]	; 0x38
 800311c:	f8d8 3000 	ldr.w	r3, [r8]
 8003120:	900a      	str	r0, [sp, #40]	; 0x28
 8003122:	3307      	adds	r3, #7
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	f103 0208 	add.w	r2, r3, #8
 800312c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003130:	f8d4 b000 	ldr.w	fp, [r4]
 8003134:	f8c8 2000 	str.w	r2, [r8]
 8003138:	e9d3 a800 	ldrd	sl, r8, [r3]
 800313c:	4652      	mov	r2, sl
 800313e:	4643      	mov	r3, r8
 8003140:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003144:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003148:	930b      	str	r3, [sp, #44]	; 0x2c
 800314a:	f04f 32ff 	mov.w	r2, #4294967295
 800314e:	4650      	mov	r0, sl
 8003150:	4b9c      	ldr	r3, [pc, #624]	; (80033c4 <_printf_float+0x2cc>)
 8003152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003154:	f7fd fc5a 	bl	8000a0c <__aeabi_dcmpun>
 8003158:	bb70      	cbnz	r0, 80031b8 <_printf_float+0xc0>
 800315a:	f04f 32ff 	mov.w	r2, #4294967295
 800315e:	4650      	mov	r0, sl
 8003160:	4b98      	ldr	r3, [pc, #608]	; (80033c4 <_printf_float+0x2cc>)
 8003162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003164:	f7fd fc34 	bl	80009d0 <__aeabi_dcmple>
 8003168:	bb30      	cbnz	r0, 80031b8 <_printf_float+0xc0>
 800316a:	2200      	movs	r2, #0
 800316c:	2300      	movs	r3, #0
 800316e:	4650      	mov	r0, sl
 8003170:	4641      	mov	r1, r8
 8003172:	f7fd fc23 	bl	80009bc <__aeabi_dcmplt>
 8003176:	b110      	cbz	r0, 800317e <_printf_float+0x86>
 8003178:	232d      	movs	r3, #45	; 0x2d
 800317a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800317e:	4a92      	ldr	r2, [pc, #584]	; (80033c8 <_printf_float+0x2d0>)
 8003180:	4b92      	ldr	r3, [pc, #584]	; (80033cc <_printf_float+0x2d4>)
 8003182:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003186:	bf94      	ite	ls
 8003188:	4690      	movls	r8, r2
 800318a:	4698      	movhi	r8, r3
 800318c:	2303      	movs	r3, #3
 800318e:	f04f 0a00 	mov.w	sl, #0
 8003192:	6123      	str	r3, [r4, #16]
 8003194:	f02b 0304 	bic.w	r3, fp, #4
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	4633      	mov	r3, r6
 800319c:	4621      	mov	r1, r4
 800319e:	4628      	mov	r0, r5
 80031a0:	9700      	str	r7, [sp, #0]
 80031a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80031a4:	f000 f9d6 	bl	8003554 <_printf_common>
 80031a8:	3001      	adds	r0, #1
 80031aa:	f040 8090 	bne.w	80032ce <_printf_float+0x1d6>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	b011      	add	sp, #68	; 0x44
 80031b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b8:	4652      	mov	r2, sl
 80031ba:	4643      	mov	r3, r8
 80031bc:	4650      	mov	r0, sl
 80031be:	4641      	mov	r1, r8
 80031c0:	f7fd fc24 	bl	8000a0c <__aeabi_dcmpun>
 80031c4:	b148      	cbz	r0, 80031da <_printf_float+0xe2>
 80031c6:	f1b8 0f00 	cmp.w	r8, #0
 80031ca:	bfb8      	it	lt
 80031cc:	232d      	movlt	r3, #45	; 0x2d
 80031ce:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <_printf_float+0x2d8>)
 80031d0:	bfb8      	it	lt
 80031d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031d6:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <_printf_float+0x2dc>)
 80031d8:	e7d3      	b.n	8003182 <_printf_float+0x8a>
 80031da:	6863      	ldr	r3, [r4, #4]
 80031dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	d142      	bne.n	800326a <_printf_float+0x172>
 80031e4:	2306      	movs	r3, #6
 80031e6:	6063      	str	r3, [r4, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	9206      	str	r2, [sp, #24]
 80031ec:	aa0e      	add	r2, sp, #56	; 0x38
 80031ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80031f2:	aa0d      	add	r2, sp, #52	; 0x34
 80031f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80031f8:	9203      	str	r2, [sp, #12]
 80031fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80031fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	6863      	ldr	r3, [r4, #4]
 8003206:	4652      	mov	r2, sl
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4628      	mov	r0, r5
 800320c:	4643      	mov	r3, r8
 800320e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003210:	f7ff fed6 	bl	8002fc0 <__cvt>
 8003214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003216:	4680      	mov	r8, r0
 8003218:	2947      	cmp	r1, #71	; 0x47
 800321a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800321c:	d108      	bne.n	8003230 <_printf_float+0x138>
 800321e:	1cc8      	adds	r0, r1, #3
 8003220:	db02      	blt.n	8003228 <_printf_float+0x130>
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	4299      	cmp	r1, r3
 8003226:	dd40      	ble.n	80032aa <_printf_float+0x1b2>
 8003228:	f1a9 0902 	sub.w	r9, r9, #2
 800322c:	fa5f f989 	uxtb.w	r9, r9
 8003230:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003234:	d81f      	bhi.n	8003276 <_printf_float+0x17e>
 8003236:	464a      	mov	r2, r9
 8003238:	3901      	subs	r1, #1
 800323a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800323e:	910d      	str	r1, [sp, #52]	; 0x34
 8003240:	f7ff ff1d 	bl	800307e <__exponent>
 8003244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003246:	4682      	mov	sl, r0
 8003248:	1813      	adds	r3, r2, r0
 800324a:	2a01      	cmp	r2, #1
 800324c:	6123      	str	r3, [r4, #16]
 800324e:	dc02      	bgt.n	8003256 <_printf_float+0x15e>
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	07d2      	lsls	r2, r2, #31
 8003254:	d501      	bpl.n	800325a <_printf_float+0x162>
 8003256:	3301      	adds	r3, #1
 8003258:	6123      	str	r3, [r4, #16]
 800325a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800325e:	2b00      	cmp	r3, #0
 8003260:	d09b      	beq.n	800319a <_printf_float+0xa2>
 8003262:	232d      	movs	r3, #45	; 0x2d
 8003264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003268:	e797      	b.n	800319a <_printf_float+0xa2>
 800326a:	2947      	cmp	r1, #71	; 0x47
 800326c:	d1bc      	bne.n	80031e8 <_printf_float+0xf0>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ba      	bne.n	80031e8 <_printf_float+0xf0>
 8003272:	2301      	movs	r3, #1
 8003274:	e7b7      	b.n	80031e6 <_printf_float+0xee>
 8003276:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800327a:	d118      	bne.n	80032ae <_printf_float+0x1b6>
 800327c:	2900      	cmp	r1, #0
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	dd0b      	ble.n	800329a <_printf_float+0x1a2>
 8003282:	6121      	str	r1, [r4, #16]
 8003284:	b913      	cbnz	r3, 800328c <_printf_float+0x194>
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	07d0      	lsls	r0, r2, #31
 800328a:	d502      	bpl.n	8003292 <_printf_float+0x19a>
 800328c:	3301      	adds	r3, #1
 800328e:	440b      	add	r3, r1
 8003290:	6123      	str	r3, [r4, #16]
 8003292:	f04f 0a00 	mov.w	sl, #0
 8003296:	65a1      	str	r1, [r4, #88]	; 0x58
 8003298:	e7df      	b.n	800325a <_printf_float+0x162>
 800329a:	b913      	cbnz	r3, 80032a2 <_printf_float+0x1aa>
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	07d2      	lsls	r2, r2, #31
 80032a0:	d501      	bpl.n	80032a6 <_printf_float+0x1ae>
 80032a2:	3302      	adds	r3, #2
 80032a4:	e7f4      	b.n	8003290 <_printf_float+0x198>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e7f2      	b.n	8003290 <_printf_float+0x198>
 80032aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b0:	4299      	cmp	r1, r3
 80032b2:	db05      	blt.n	80032c0 <_printf_float+0x1c8>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	6121      	str	r1, [r4, #16]
 80032b8:	07d8      	lsls	r0, r3, #31
 80032ba:	d5ea      	bpl.n	8003292 <_printf_float+0x19a>
 80032bc:	1c4b      	adds	r3, r1, #1
 80032be:	e7e7      	b.n	8003290 <_printf_float+0x198>
 80032c0:	2900      	cmp	r1, #0
 80032c2:	bfcc      	ite	gt
 80032c4:	2201      	movgt	r2, #1
 80032c6:	f1c1 0202 	rsble	r2, r1, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	e7e0      	b.n	8003290 <_printf_float+0x198>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	055a      	lsls	r2, r3, #21
 80032d2:	d407      	bmi.n	80032e4 <_printf_float+0x1ec>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	4642      	mov	r2, r8
 80032d8:	4631      	mov	r1, r6
 80032da:	4628      	mov	r0, r5
 80032dc:	47b8      	blx	r7
 80032de:	3001      	adds	r0, #1
 80032e0:	d12b      	bne.n	800333a <_printf_float+0x242>
 80032e2:	e764      	b.n	80031ae <_printf_float+0xb6>
 80032e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032e8:	f240 80dd 	bls.w	80034a6 <_printf_float+0x3ae>
 80032ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032f0:	2200      	movs	r2, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	f7fd fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d033      	beq.n	8003364 <_printf_float+0x26c>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4631      	mov	r1, r6
 8003300:	4628      	mov	r0, r5
 8003302:	4a35      	ldr	r2, [pc, #212]	; (80033d8 <_printf_float+0x2e0>)
 8003304:	47b8      	blx	r7
 8003306:	3001      	adds	r0, #1
 8003308:	f43f af51 	beq.w	80031ae <_printf_float+0xb6>
 800330c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003310:	429a      	cmp	r2, r3
 8003312:	db02      	blt.n	800331a <_printf_float+0x222>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	07d8      	lsls	r0, r3, #31
 8003318:	d50f      	bpl.n	800333a <_printf_float+0x242>
 800331a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800331e:	4631      	mov	r1, r6
 8003320:	4628      	mov	r0, r5
 8003322:	47b8      	blx	r7
 8003324:	3001      	adds	r0, #1
 8003326:	f43f af42 	beq.w	80031ae <_printf_float+0xb6>
 800332a:	f04f 0800 	mov.w	r8, #0
 800332e:	f104 091a 	add.w	r9, r4, #26
 8003332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003334:	3b01      	subs	r3, #1
 8003336:	4543      	cmp	r3, r8
 8003338:	dc09      	bgt.n	800334e <_printf_float+0x256>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	079b      	lsls	r3, r3, #30
 800333e:	f100 8104 	bmi.w	800354a <_printf_float+0x452>
 8003342:	68e0      	ldr	r0, [r4, #12]
 8003344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003346:	4298      	cmp	r0, r3
 8003348:	bfb8      	it	lt
 800334a:	4618      	movlt	r0, r3
 800334c:	e731      	b.n	80031b2 <_printf_float+0xba>
 800334e:	2301      	movs	r3, #1
 8003350:	464a      	mov	r2, r9
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f af28 	beq.w	80031ae <_printf_float+0xb6>
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	e7e6      	b.n	8003332 <_printf_float+0x23a>
 8003364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003366:	2b00      	cmp	r3, #0
 8003368:	dc38      	bgt.n	80033dc <_printf_float+0x2e4>
 800336a:	2301      	movs	r3, #1
 800336c:	4631      	mov	r1, r6
 800336e:	4628      	mov	r0, r5
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <_printf_float+0x2e0>)
 8003372:	47b8      	blx	r7
 8003374:	3001      	adds	r0, #1
 8003376:	f43f af1a 	beq.w	80031ae <_printf_float+0xb6>
 800337a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800337e:	4313      	orrs	r3, r2
 8003380:	d102      	bne.n	8003388 <_printf_float+0x290>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	07d9      	lsls	r1, r3, #31
 8003386:	d5d8      	bpl.n	800333a <_printf_float+0x242>
 8003388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800338c:	4631      	mov	r1, r6
 800338e:	4628      	mov	r0, r5
 8003390:	47b8      	blx	r7
 8003392:	3001      	adds	r0, #1
 8003394:	f43f af0b 	beq.w	80031ae <_printf_float+0xb6>
 8003398:	f04f 0900 	mov.w	r9, #0
 800339c:	f104 0a1a 	add.w	sl, r4, #26
 80033a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a2:	425b      	negs	r3, r3
 80033a4:	454b      	cmp	r3, r9
 80033a6:	dc01      	bgt.n	80033ac <_printf_float+0x2b4>
 80033a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033aa:	e794      	b.n	80032d6 <_printf_float+0x1de>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4652      	mov	r2, sl
 80033b0:	4631      	mov	r1, r6
 80033b2:	4628      	mov	r0, r5
 80033b4:	47b8      	blx	r7
 80033b6:	3001      	adds	r0, #1
 80033b8:	f43f aef9 	beq.w	80031ae <_printf_float+0xb6>
 80033bc:	f109 0901 	add.w	r9, r9, #1
 80033c0:	e7ee      	b.n	80033a0 <_printf_float+0x2a8>
 80033c2:	bf00      	nop
 80033c4:	7fefffff 	.word	0x7fefffff
 80033c8:	08005d0a 	.word	0x08005d0a
 80033cc:	08005d0e 	.word	0x08005d0e
 80033d0:	08005d12 	.word	0x08005d12
 80033d4:	08005d16 	.word	0x08005d16
 80033d8:	08005d1a 	.word	0x08005d1a
 80033dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033e0:	429a      	cmp	r2, r3
 80033e2:	bfa8      	it	ge
 80033e4:	461a      	movge	r2, r3
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	4691      	mov	r9, r2
 80033ea:	dc37      	bgt.n	800345c <_printf_float+0x364>
 80033ec:	f04f 0b00 	mov.w	fp, #0
 80033f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033f4:	f104 021a 	add.w	r2, r4, #26
 80033f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80033fc:	ebaa 0309 	sub.w	r3, sl, r9
 8003400:	455b      	cmp	r3, fp
 8003402:	dc33      	bgt.n	800346c <_printf_float+0x374>
 8003404:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003408:	429a      	cmp	r2, r3
 800340a:	db3b      	blt.n	8003484 <_printf_float+0x38c>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	07da      	lsls	r2, r3, #31
 8003410:	d438      	bmi.n	8003484 <_printf_float+0x38c>
 8003412:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003416:	eba2 0903 	sub.w	r9, r2, r3
 800341a:	eba2 020a 	sub.w	r2, r2, sl
 800341e:	4591      	cmp	r9, r2
 8003420:	bfa8      	it	ge
 8003422:	4691      	movge	r9, r2
 8003424:	f1b9 0f00 	cmp.w	r9, #0
 8003428:	dc34      	bgt.n	8003494 <_printf_float+0x39c>
 800342a:	f04f 0800 	mov.w	r8, #0
 800342e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003432:	f104 0a1a 	add.w	sl, r4, #26
 8003436:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	eba3 0309 	sub.w	r3, r3, r9
 8003440:	4543      	cmp	r3, r8
 8003442:	f77f af7a 	ble.w	800333a <_printf_float+0x242>
 8003446:	2301      	movs	r3, #1
 8003448:	4652      	mov	r2, sl
 800344a:	4631      	mov	r1, r6
 800344c:	4628      	mov	r0, r5
 800344e:	47b8      	blx	r7
 8003450:	3001      	adds	r0, #1
 8003452:	f43f aeac 	beq.w	80031ae <_printf_float+0xb6>
 8003456:	f108 0801 	add.w	r8, r8, #1
 800345a:	e7ec      	b.n	8003436 <_printf_float+0x33e>
 800345c:	4613      	mov	r3, r2
 800345e:	4631      	mov	r1, r6
 8003460:	4642      	mov	r2, r8
 8003462:	4628      	mov	r0, r5
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	d1c0      	bne.n	80033ec <_printf_float+0x2f4>
 800346a:	e6a0      	b.n	80031ae <_printf_float+0xb6>
 800346c:	2301      	movs	r3, #1
 800346e:	4631      	mov	r1, r6
 8003470:	4628      	mov	r0, r5
 8003472:	920b      	str	r2, [sp, #44]	; 0x2c
 8003474:	47b8      	blx	r7
 8003476:	3001      	adds	r0, #1
 8003478:	f43f ae99 	beq.w	80031ae <_printf_float+0xb6>
 800347c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800347e:	f10b 0b01 	add.w	fp, fp, #1
 8003482:	e7b9      	b.n	80033f8 <_printf_float+0x300>
 8003484:	4631      	mov	r1, r6
 8003486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800348a:	4628      	mov	r0, r5
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	d1bf      	bne.n	8003412 <_printf_float+0x31a>
 8003492:	e68c      	b.n	80031ae <_printf_float+0xb6>
 8003494:	464b      	mov	r3, r9
 8003496:	4631      	mov	r1, r6
 8003498:	4628      	mov	r0, r5
 800349a:	eb08 020a 	add.w	r2, r8, sl
 800349e:	47b8      	blx	r7
 80034a0:	3001      	adds	r0, #1
 80034a2:	d1c2      	bne.n	800342a <_printf_float+0x332>
 80034a4:	e683      	b.n	80031ae <_printf_float+0xb6>
 80034a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034a8:	2a01      	cmp	r2, #1
 80034aa:	dc01      	bgt.n	80034b0 <_printf_float+0x3b8>
 80034ac:	07db      	lsls	r3, r3, #31
 80034ae:	d539      	bpl.n	8003524 <_printf_float+0x42c>
 80034b0:	2301      	movs	r3, #1
 80034b2:	4642      	mov	r2, r8
 80034b4:	4631      	mov	r1, r6
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	f43f ae77 	beq.w	80031ae <_printf_float+0xb6>
 80034c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c4:	4631      	mov	r1, r6
 80034c6:	4628      	mov	r0, r5
 80034c8:	47b8      	blx	r7
 80034ca:	3001      	adds	r0, #1
 80034cc:	f43f ae6f 	beq.w	80031ae <_printf_float+0xb6>
 80034d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034d4:	2200      	movs	r2, #0
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80034dc:	f7fd fa64 	bl	80009a8 <__aeabi_dcmpeq>
 80034e0:	b9d8      	cbnz	r0, 800351a <_printf_float+0x422>
 80034e2:	f109 33ff 	add.w	r3, r9, #4294967295
 80034e6:	f108 0201 	add.w	r2, r8, #1
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	47b8      	blx	r7
 80034f0:	3001      	adds	r0, #1
 80034f2:	d10e      	bne.n	8003512 <_printf_float+0x41a>
 80034f4:	e65b      	b.n	80031ae <_printf_float+0xb6>
 80034f6:	2301      	movs	r3, #1
 80034f8:	464a      	mov	r2, r9
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b8      	blx	r7
 8003500:	3001      	adds	r0, #1
 8003502:	f43f ae54 	beq.w	80031ae <_printf_float+0xb6>
 8003506:	f108 0801 	add.w	r8, r8, #1
 800350a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800350c:	3b01      	subs	r3, #1
 800350e:	4543      	cmp	r3, r8
 8003510:	dcf1      	bgt.n	80034f6 <_printf_float+0x3fe>
 8003512:	4653      	mov	r3, sl
 8003514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003518:	e6de      	b.n	80032d8 <_printf_float+0x1e0>
 800351a:	f04f 0800 	mov.w	r8, #0
 800351e:	f104 091a 	add.w	r9, r4, #26
 8003522:	e7f2      	b.n	800350a <_printf_float+0x412>
 8003524:	2301      	movs	r3, #1
 8003526:	4642      	mov	r2, r8
 8003528:	e7df      	b.n	80034ea <_printf_float+0x3f2>
 800352a:	2301      	movs	r3, #1
 800352c:	464a      	mov	r2, r9
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	47b8      	blx	r7
 8003534:	3001      	adds	r0, #1
 8003536:	f43f ae3a 	beq.w	80031ae <_printf_float+0xb6>
 800353a:	f108 0801 	add.w	r8, r8, #1
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003542:	1a5b      	subs	r3, r3, r1
 8003544:	4543      	cmp	r3, r8
 8003546:	dcf0      	bgt.n	800352a <_printf_float+0x432>
 8003548:	e6fb      	b.n	8003342 <_printf_float+0x24a>
 800354a:	f04f 0800 	mov.w	r8, #0
 800354e:	f104 0919 	add.w	r9, r4, #25
 8003552:	e7f4      	b.n	800353e <_printf_float+0x446>

08003554 <_printf_common>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	4616      	mov	r6, r2
 800355a:	4699      	mov	r9, r3
 800355c:	688a      	ldr	r2, [r1, #8]
 800355e:	690b      	ldr	r3, [r1, #16]
 8003560:	4607      	mov	r7, r0
 8003562:	4293      	cmp	r3, r2
 8003564:	bfb8      	it	lt
 8003566:	4613      	movlt	r3, r2
 8003568:	6033      	str	r3, [r6, #0]
 800356a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800356e:	460c      	mov	r4, r1
 8003570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003574:	b10a      	cbz	r2, 800357a <_printf_common+0x26>
 8003576:	3301      	adds	r3, #1
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	0699      	lsls	r1, r3, #26
 800357e:	bf42      	ittt	mi
 8003580:	6833      	ldrmi	r3, [r6, #0]
 8003582:	3302      	addmi	r3, #2
 8003584:	6033      	strmi	r3, [r6, #0]
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	f015 0506 	ands.w	r5, r5, #6
 800358c:	d106      	bne.n	800359c <_printf_common+0x48>
 800358e:	f104 0a19 	add.w	sl, r4, #25
 8003592:	68e3      	ldr	r3, [r4, #12]
 8003594:	6832      	ldr	r2, [r6, #0]
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	42ab      	cmp	r3, r5
 800359a:	dc2b      	bgt.n	80035f4 <_printf_common+0xa0>
 800359c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a0:	1e13      	subs	r3, r2, #0
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	bf18      	it	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	0692      	lsls	r2, r2, #26
 80035aa:	d430      	bmi.n	800360e <_printf_common+0xba>
 80035ac:	4649      	mov	r1, r9
 80035ae:	4638      	mov	r0, r7
 80035b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035b4:	47c0      	blx	r8
 80035b6:	3001      	adds	r0, #1
 80035b8:	d023      	beq.n	8003602 <_printf_common+0xae>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	6922      	ldr	r2, [r4, #16]
 80035be:	f003 0306 	and.w	r3, r3, #6
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf14      	ite	ne
 80035c6:	2500      	movne	r5, #0
 80035c8:	6833      	ldreq	r3, [r6, #0]
 80035ca:	f04f 0600 	mov.w	r6, #0
 80035ce:	bf08      	it	eq
 80035d0:	68e5      	ldreq	r5, [r4, #12]
 80035d2:	f104 041a 	add.w	r4, r4, #26
 80035d6:	bf08      	it	eq
 80035d8:	1aed      	subeq	r5, r5, r3
 80035da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035de:	bf08      	it	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bfc4      	itt	gt
 80035e8:	1a9b      	subgt	r3, r3, r2
 80035ea:	18ed      	addgt	r5, r5, r3
 80035ec:	42b5      	cmp	r5, r6
 80035ee:	d11a      	bne.n	8003626 <_printf_common+0xd2>
 80035f0:	2000      	movs	r0, #0
 80035f2:	e008      	b.n	8003606 <_printf_common+0xb2>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4652      	mov	r2, sl
 80035f8:	4649      	mov	r1, r9
 80035fa:	4638      	mov	r0, r7
 80035fc:	47c0      	blx	r8
 80035fe:	3001      	adds	r0, #1
 8003600:	d103      	bne.n	800360a <_printf_common+0xb6>
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
 8003606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360a:	3501      	adds	r5, #1
 800360c:	e7c1      	b.n	8003592 <_printf_common+0x3e>
 800360e:	2030      	movs	r0, #48	; 0x30
 8003610:	18e1      	adds	r1, r4, r3
 8003612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800361c:	4422      	add	r2, r4
 800361e:	3302      	adds	r3, #2
 8003620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003624:	e7c2      	b.n	80035ac <_printf_common+0x58>
 8003626:	2301      	movs	r3, #1
 8003628:	4622      	mov	r2, r4
 800362a:	4649      	mov	r1, r9
 800362c:	4638      	mov	r0, r7
 800362e:	47c0      	blx	r8
 8003630:	3001      	adds	r0, #1
 8003632:	d0e6      	beq.n	8003602 <_printf_common+0xae>
 8003634:	3601      	adds	r6, #1
 8003636:	e7d9      	b.n	80035ec <_printf_common+0x98>

08003638 <_printf_i>:
 8003638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800363c:	7e0f      	ldrb	r7, [r1, #24]
 800363e:	4691      	mov	r9, r2
 8003640:	2f78      	cmp	r7, #120	; 0x78
 8003642:	4680      	mov	r8, r0
 8003644:	460c      	mov	r4, r1
 8003646:	469a      	mov	sl, r3
 8003648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800364a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800364e:	d807      	bhi.n	8003660 <_printf_i+0x28>
 8003650:	2f62      	cmp	r7, #98	; 0x62
 8003652:	d80a      	bhi.n	800366a <_printf_i+0x32>
 8003654:	2f00      	cmp	r7, #0
 8003656:	f000 80d5 	beq.w	8003804 <_printf_i+0x1cc>
 800365a:	2f58      	cmp	r7, #88	; 0x58
 800365c:	f000 80c1 	beq.w	80037e2 <_printf_i+0x1aa>
 8003660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003668:	e03a      	b.n	80036e0 <_printf_i+0xa8>
 800366a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800366e:	2b15      	cmp	r3, #21
 8003670:	d8f6      	bhi.n	8003660 <_printf_i+0x28>
 8003672:	a101      	add	r1, pc, #4	; (adr r1, 8003678 <_printf_i+0x40>)
 8003674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003678:	080036d1 	.word	0x080036d1
 800367c:	080036e5 	.word	0x080036e5
 8003680:	08003661 	.word	0x08003661
 8003684:	08003661 	.word	0x08003661
 8003688:	08003661 	.word	0x08003661
 800368c:	08003661 	.word	0x08003661
 8003690:	080036e5 	.word	0x080036e5
 8003694:	08003661 	.word	0x08003661
 8003698:	08003661 	.word	0x08003661
 800369c:	08003661 	.word	0x08003661
 80036a0:	08003661 	.word	0x08003661
 80036a4:	080037eb 	.word	0x080037eb
 80036a8:	08003711 	.word	0x08003711
 80036ac:	080037a5 	.word	0x080037a5
 80036b0:	08003661 	.word	0x08003661
 80036b4:	08003661 	.word	0x08003661
 80036b8:	0800380d 	.word	0x0800380d
 80036bc:	08003661 	.word	0x08003661
 80036c0:	08003711 	.word	0x08003711
 80036c4:	08003661 	.word	0x08003661
 80036c8:	08003661 	.word	0x08003661
 80036cc:	080037ad 	.word	0x080037ad
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	1d1a      	adds	r2, r3, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	602a      	str	r2, [r5, #0]
 80036d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0a0      	b.n	8003826 <_printf_i+0x1ee>
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	0607      	lsls	r7, r0, #24
 80036ea:	f103 0104 	add.w	r1, r3, #4
 80036ee:	6029      	str	r1, [r5, #0]
 80036f0:	d501      	bpl.n	80036f6 <_printf_i+0xbe>
 80036f2:	681e      	ldr	r6, [r3, #0]
 80036f4:	e003      	b.n	80036fe <_printf_i+0xc6>
 80036f6:	0646      	lsls	r6, r0, #25
 80036f8:	d5fb      	bpl.n	80036f2 <_printf_i+0xba>
 80036fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036fe:	2e00      	cmp	r6, #0
 8003700:	da03      	bge.n	800370a <_printf_i+0xd2>
 8003702:	232d      	movs	r3, #45	; 0x2d
 8003704:	4276      	negs	r6, r6
 8003706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370a:	230a      	movs	r3, #10
 800370c:	4859      	ldr	r0, [pc, #356]	; (8003874 <_printf_i+0x23c>)
 800370e:	e012      	b.n	8003736 <_printf_i+0xfe>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	1d19      	adds	r1, r3, #4
 8003716:	6029      	str	r1, [r5, #0]
 8003718:	0605      	lsls	r5, r0, #24
 800371a:	d501      	bpl.n	8003720 <_printf_i+0xe8>
 800371c:	681e      	ldr	r6, [r3, #0]
 800371e:	e002      	b.n	8003726 <_printf_i+0xee>
 8003720:	0641      	lsls	r1, r0, #25
 8003722:	d5fb      	bpl.n	800371c <_printf_i+0xe4>
 8003724:	881e      	ldrh	r6, [r3, #0]
 8003726:	2f6f      	cmp	r7, #111	; 0x6f
 8003728:	bf0c      	ite	eq
 800372a:	2308      	moveq	r3, #8
 800372c:	230a      	movne	r3, #10
 800372e:	4851      	ldr	r0, [pc, #324]	; (8003874 <_printf_i+0x23c>)
 8003730:	2100      	movs	r1, #0
 8003732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003736:	6865      	ldr	r5, [r4, #4]
 8003738:	2d00      	cmp	r5, #0
 800373a:	bfa8      	it	ge
 800373c:	6821      	ldrge	r1, [r4, #0]
 800373e:	60a5      	str	r5, [r4, #8]
 8003740:	bfa4      	itt	ge
 8003742:	f021 0104 	bicge.w	r1, r1, #4
 8003746:	6021      	strge	r1, [r4, #0]
 8003748:	b90e      	cbnz	r6, 800374e <_printf_i+0x116>
 800374a:	2d00      	cmp	r5, #0
 800374c:	d04b      	beq.n	80037e6 <_printf_i+0x1ae>
 800374e:	4615      	mov	r5, r2
 8003750:	fbb6 f1f3 	udiv	r1, r6, r3
 8003754:	fb03 6711 	mls	r7, r3, r1, r6
 8003758:	5dc7      	ldrb	r7, [r0, r7]
 800375a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800375e:	4637      	mov	r7, r6
 8003760:	42bb      	cmp	r3, r7
 8003762:	460e      	mov	r6, r1
 8003764:	d9f4      	bls.n	8003750 <_printf_i+0x118>
 8003766:	2b08      	cmp	r3, #8
 8003768:	d10b      	bne.n	8003782 <_printf_i+0x14a>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	07de      	lsls	r6, r3, #31
 800376e:	d508      	bpl.n	8003782 <_printf_i+0x14a>
 8003770:	6923      	ldr	r3, [r4, #16]
 8003772:	6861      	ldr	r1, [r4, #4]
 8003774:	4299      	cmp	r1, r3
 8003776:	bfde      	ittt	le
 8003778:	2330      	movle	r3, #48	; 0x30
 800377a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800377e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003782:	1b52      	subs	r2, r2, r5
 8003784:	6122      	str	r2, [r4, #16]
 8003786:	464b      	mov	r3, r9
 8003788:	4621      	mov	r1, r4
 800378a:	4640      	mov	r0, r8
 800378c:	f8cd a000 	str.w	sl, [sp]
 8003790:	aa03      	add	r2, sp, #12
 8003792:	f7ff fedf 	bl	8003554 <_printf_common>
 8003796:	3001      	adds	r0, #1
 8003798:	d14a      	bne.n	8003830 <_printf_i+0x1f8>
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
 800379e:	b004      	add	sp, #16
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f043 0320 	orr.w	r3, r3, #32
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	2778      	movs	r7, #120	; 0x78
 80037ae:	4832      	ldr	r0, [pc, #200]	; (8003878 <_printf_i+0x240>)
 80037b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	6829      	ldr	r1, [r5, #0]
 80037b8:	061f      	lsls	r7, r3, #24
 80037ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80037be:	d402      	bmi.n	80037c6 <_printf_i+0x18e>
 80037c0:	065f      	lsls	r7, r3, #25
 80037c2:	bf48      	it	mi
 80037c4:	b2b6      	uxthmi	r6, r6
 80037c6:	07df      	lsls	r7, r3, #31
 80037c8:	bf48      	it	mi
 80037ca:	f043 0320 	orrmi.w	r3, r3, #32
 80037ce:	6029      	str	r1, [r5, #0]
 80037d0:	bf48      	it	mi
 80037d2:	6023      	strmi	r3, [r4, #0]
 80037d4:	b91e      	cbnz	r6, 80037de <_printf_i+0x1a6>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f023 0320 	bic.w	r3, r3, #32
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	2310      	movs	r3, #16
 80037e0:	e7a6      	b.n	8003730 <_printf_i+0xf8>
 80037e2:	4824      	ldr	r0, [pc, #144]	; (8003874 <_printf_i+0x23c>)
 80037e4:	e7e4      	b.n	80037b0 <_printf_i+0x178>
 80037e6:	4615      	mov	r5, r2
 80037e8:	e7bd      	b.n	8003766 <_printf_i+0x12e>
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	6826      	ldr	r6, [r4, #0]
 80037ee:	1d18      	adds	r0, r3, #4
 80037f0:	6961      	ldr	r1, [r4, #20]
 80037f2:	6028      	str	r0, [r5, #0]
 80037f4:	0635      	lsls	r5, r6, #24
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	d501      	bpl.n	80037fe <_printf_i+0x1c6>
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	e002      	b.n	8003804 <_printf_i+0x1cc>
 80037fe:	0670      	lsls	r0, r6, #25
 8003800:	d5fb      	bpl.n	80037fa <_printf_i+0x1c2>
 8003802:	8019      	strh	r1, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	4615      	mov	r5, r2
 8003808:	6123      	str	r3, [r4, #16]
 800380a:	e7bc      	b.n	8003786 <_printf_i+0x14e>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	2100      	movs	r1, #0
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	602a      	str	r2, [r5, #0]
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	4628      	mov	r0, r5
 800381a:	f000 f9d4 	bl	8003bc6 <memchr>
 800381e:	b108      	cbz	r0, 8003824 <_printf_i+0x1ec>
 8003820:	1b40      	subs	r0, r0, r5
 8003822:	6060      	str	r0, [r4, #4]
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	2300      	movs	r3, #0
 800382a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382e:	e7aa      	b.n	8003786 <_printf_i+0x14e>
 8003830:	462a      	mov	r2, r5
 8003832:	4649      	mov	r1, r9
 8003834:	4640      	mov	r0, r8
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	47d0      	blx	sl
 800383a:	3001      	adds	r0, #1
 800383c:	d0ad      	beq.n	800379a <_printf_i+0x162>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	079b      	lsls	r3, r3, #30
 8003842:	d413      	bmi.n	800386c <_printf_i+0x234>
 8003844:	68e0      	ldr	r0, [r4, #12]
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	4298      	cmp	r0, r3
 800384a:	bfb8      	it	lt
 800384c:	4618      	movlt	r0, r3
 800384e:	e7a6      	b.n	800379e <_printf_i+0x166>
 8003850:	2301      	movs	r3, #1
 8003852:	4632      	mov	r2, r6
 8003854:	4649      	mov	r1, r9
 8003856:	4640      	mov	r0, r8
 8003858:	47d0      	blx	sl
 800385a:	3001      	adds	r0, #1
 800385c:	d09d      	beq.n	800379a <_printf_i+0x162>
 800385e:	3501      	adds	r5, #1
 8003860:	68e3      	ldr	r3, [r4, #12]
 8003862:	9903      	ldr	r1, [sp, #12]
 8003864:	1a5b      	subs	r3, r3, r1
 8003866:	42ab      	cmp	r3, r5
 8003868:	dcf2      	bgt.n	8003850 <_printf_i+0x218>
 800386a:	e7eb      	b.n	8003844 <_printf_i+0x20c>
 800386c:	2500      	movs	r5, #0
 800386e:	f104 0619 	add.w	r6, r4, #25
 8003872:	e7f5      	b.n	8003860 <_printf_i+0x228>
 8003874:	08005d1c 	.word	0x08005d1c
 8003878:	08005d2d 	.word	0x08005d2d

0800387c <std>:
 800387c:	2300      	movs	r3, #0
 800387e:	b510      	push	{r4, lr}
 8003880:	4604      	mov	r4, r0
 8003882:	e9c0 3300 	strd	r3, r3, [r0]
 8003886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800388a:	6083      	str	r3, [r0, #8]
 800388c:	8181      	strh	r1, [r0, #12]
 800388e:	6643      	str	r3, [r0, #100]	; 0x64
 8003890:	81c2      	strh	r2, [r0, #14]
 8003892:	6183      	str	r3, [r0, #24]
 8003894:	4619      	mov	r1, r3
 8003896:	2208      	movs	r2, #8
 8003898:	305c      	adds	r0, #92	; 0x5c
 800389a:	f000 f914 	bl	8003ac6 <memset>
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <std+0x58>)
 80038a0:	6224      	str	r4, [r4, #32]
 80038a2:	6263      	str	r3, [r4, #36]	; 0x24
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <std+0x5c>)
 80038a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <std+0x60>)
 80038aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <std+0x64>)
 80038ae:	6323      	str	r3, [r4, #48]	; 0x30
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <std+0x68>)
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d006      	beq.n	80038c4 <std+0x48>
 80038b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80038ba:	4294      	cmp	r4, r2
 80038bc:	d002      	beq.n	80038c4 <std+0x48>
 80038be:	33d0      	adds	r3, #208	; 0xd0
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d105      	bne.n	80038d0 <std+0x54>
 80038c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038cc:	f000 b978 	b.w	8003bc0 <__retarget_lock_init_recursive>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	bf00      	nop
 80038d4:	08003a41 	.word	0x08003a41
 80038d8:	08003a63 	.word	0x08003a63
 80038dc:	08003a9b 	.word	0x08003a9b
 80038e0:	08003abf 	.word	0x08003abf
 80038e4:	20000320 	.word	0x20000320

080038e8 <stdio_exit_handler>:
 80038e8:	4a02      	ldr	r2, [pc, #8]	; (80038f4 <stdio_exit_handler+0xc>)
 80038ea:	4903      	ldr	r1, [pc, #12]	; (80038f8 <stdio_exit_handler+0x10>)
 80038ec:	4803      	ldr	r0, [pc, #12]	; (80038fc <stdio_exit_handler+0x14>)
 80038ee:	f000 b869 	b.w	80039c4 <_fwalk_sglue>
 80038f2:	bf00      	nop
 80038f4:	20000014 	.word	0x20000014
 80038f8:	0800555d 	.word	0x0800555d
 80038fc:	20000020 	.word	0x20000020

08003900 <cleanup_stdio>:
 8003900:	6841      	ldr	r1, [r0, #4]
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <cleanup_stdio+0x34>)
 8003904:	b510      	push	{r4, lr}
 8003906:	4299      	cmp	r1, r3
 8003908:	4604      	mov	r4, r0
 800390a:	d001      	beq.n	8003910 <cleanup_stdio+0x10>
 800390c:	f001 fe26 	bl	800555c <_fflush_r>
 8003910:	68a1      	ldr	r1, [r4, #8]
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <cleanup_stdio+0x38>)
 8003914:	4299      	cmp	r1, r3
 8003916:	d002      	beq.n	800391e <cleanup_stdio+0x1e>
 8003918:	4620      	mov	r0, r4
 800391a:	f001 fe1f 	bl	800555c <_fflush_r>
 800391e:	68e1      	ldr	r1, [r4, #12]
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <cleanup_stdio+0x3c>)
 8003922:	4299      	cmp	r1, r3
 8003924:	d004      	beq.n	8003930 <cleanup_stdio+0x30>
 8003926:	4620      	mov	r0, r4
 8003928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800392c:	f001 be16 	b.w	800555c <_fflush_r>
 8003930:	bd10      	pop	{r4, pc}
 8003932:	bf00      	nop
 8003934:	20000320 	.word	0x20000320
 8003938:	20000388 	.word	0x20000388
 800393c:	200003f0 	.word	0x200003f0

08003940 <global_stdio_init.part.0>:
 8003940:	b510      	push	{r4, lr}
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <global_stdio_init.part.0+0x30>)
 8003944:	4c0b      	ldr	r4, [pc, #44]	; (8003974 <global_stdio_init.part.0+0x34>)
 8003946:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <global_stdio_init.part.0+0x38>)
 8003948:	4620      	mov	r0, r4
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	2104      	movs	r1, #4
 800394e:	2200      	movs	r2, #0
 8003950:	f7ff ff94 	bl	800387c <std>
 8003954:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003958:	2201      	movs	r2, #1
 800395a:	2109      	movs	r1, #9
 800395c:	f7ff ff8e 	bl	800387c <std>
 8003960:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003964:	2202      	movs	r2, #2
 8003966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800396a:	2112      	movs	r1, #18
 800396c:	f7ff bf86 	b.w	800387c <std>
 8003970:	20000458 	.word	0x20000458
 8003974:	20000320 	.word	0x20000320
 8003978:	080038e9 	.word	0x080038e9

0800397c <__sfp_lock_acquire>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__sfp_lock_acquire+0x8>)
 800397e:	f000 b920 	b.w	8003bc2 <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	20000461 	.word	0x20000461

08003988 <__sfp_lock_release>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__sfp_lock_release+0x8>)
 800398a:	f000 b91b 	b.w	8003bc4 <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	20000461 	.word	0x20000461

08003994 <__sinit>:
 8003994:	b510      	push	{r4, lr}
 8003996:	4604      	mov	r4, r0
 8003998:	f7ff fff0 	bl	800397c <__sfp_lock_acquire>
 800399c:	6a23      	ldr	r3, [r4, #32]
 800399e:	b11b      	cbz	r3, 80039a8 <__sinit+0x14>
 80039a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a4:	f7ff bff0 	b.w	8003988 <__sfp_lock_release>
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <__sinit+0x28>)
 80039aa:	6223      	str	r3, [r4, #32]
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <__sinit+0x2c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f5      	bne.n	80039a0 <__sinit+0xc>
 80039b4:	f7ff ffc4 	bl	8003940 <global_stdio_init.part.0>
 80039b8:	e7f2      	b.n	80039a0 <__sinit+0xc>
 80039ba:	bf00      	nop
 80039bc:	08003901 	.word	0x08003901
 80039c0:	20000458 	.word	0x20000458

080039c4 <_fwalk_sglue>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	4607      	mov	r7, r0
 80039ca:	4688      	mov	r8, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	2600      	movs	r6, #0
 80039d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039d4:	f1b9 0901 	subs.w	r9, r9, #1
 80039d8:	d505      	bpl.n	80039e6 <_fwalk_sglue+0x22>
 80039da:	6824      	ldr	r4, [r4, #0]
 80039dc:	2c00      	cmp	r4, #0
 80039de:	d1f7      	bne.n	80039d0 <_fwalk_sglue+0xc>
 80039e0:	4630      	mov	r0, r6
 80039e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039e6:	89ab      	ldrh	r3, [r5, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d907      	bls.n	80039fc <_fwalk_sglue+0x38>
 80039ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039f0:	3301      	adds	r3, #1
 80039f2:	d003      	beq.n	80039fc <_fwalk_sglue+0x38>
 80039f4:	4629      	mov	r1, r5
 80039f6:	4638      	mov	r0, r7
 80039f8:	47c0      	blx	r8
 80039fa:	4306      	orrs	r6, r0
 80039fc:	3568      	adds	r5, #104	; 0x68
 80039fe:	e7e9      	b.n	80039d4 <_fwalk_sglue+0x10>

08003a00 <siprintf>:
 8003a00:	b40e      	push	{r1, r2, r3}
 8003a02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a06:	b500      	push	{lr}
 8003a08:	b09c      	sub	sp, #112	; 0x70
 8003a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a0c:	9002      	str	r0, [sp, #8]
 8003a0e:	9006      	str	r0, [sp, #24]
 8003a10:	9107      	str	r1, [sp, #28]
 8003a12:	9104      	str	r1, [sp, #16]
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <siprintf+0x38>)
 8003a16:	4909      	ldr	r1, [pc, #36]	; (8003a3c <siprintf+0x3c>)
 8003a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a1c:	9105      	str	r1, [sp, #20]
 8003a1e:	6800      	ldr	r0, [r0, #0]
 8003a20:	a902      	add	r1, sp, #8
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	f001 fc1a 	bl	800525c <_svfiprintf_r>
 8003a28:	2200      	movs	r2, #0
 8003a2a:	9b02      	ldr	r3, [sp, #8]
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	b01c      	add	sp, #112	; 0x70
 8003a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a34:	b003      	add	sp, #12
 8003a36:	4770      	bx	lr
 8003a38:	2000006c 	.word	0x2000006c
 8003a3c:	ffff0208 	.word	0xffff0208

08003a40 <__sread>:
 8003a40:	b510      	push	{r4, lr}
 8003a42:	460c      	mov	r4, r1
 8003a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a48:	f000 f86c 	bl	8003b24 <_read_r>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	bfab      	itete	ge
 8003a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a52:	89a3      	ldrhlt	r3, [r4, #12]
 8003a54:	181b      	addge	r3, r3, r0
 8003a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a5a:	bfac      	ite	ge
 8003a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a5e:	81a3      	strhlt	r3, [r4, #12]
 8003a60:	bd10      	pop	{r4, pc}

08003a62 <__swrite>:
 8003a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	461f      	mov	r7, r3
 8003a68:	898b      	ldrh	r3, [r1, #12]
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	460c      	mov	r4, r1
 8003a70:	4616      	mov	r6, r2
 8003a72:	d505      	bpl.n	8003a80 <__swrite+0x1e>
 8003a74:	2302      	movs	r3, #2
 8003a76:	2200      	movs	r2, #0
 8003a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7c:	f000 f840 	bl	8003b00 <_lseek_r>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	4632      	mov	r2, r6
 8003a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a96:	f000 b857 	b.w	8003b48 <_write_r>

08003a9a <__sseek>:
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa2:	f000 f82d 	bl	8003b00 <_lseek_r>
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	bf15      	itete	ne
 8003aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ab6:	81a3      	strheq	r3, [r4, #12]
 8003ab8:	bf18      	it	ne
 8003aba:	81a3      	strhne	r3, [r4, #12]
 8003abc:	bd10      	pop	{r4, pc}

08003abe <__sclose>:
 8003abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac2:	f000 b80d 	b.w	8003ae0 <_close_r>

08003ac6 <memset>:
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4402      	add	r2, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <memset+0xa>
 8003ace:	4770      	bx	lr
 8003ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad4:	e7f9      	b.n	8003aca <memset+0x4>
	...

08003ad8 <_localeconv_r>:
 8003ad8:	4800      	ldr	r0, [pc, #0]	; (8003adc <_localeconv_r+0x4>)
 8003ada:	4770      	bx	lr
 8003adc:	20000160 	.word	0x20000160

08003ae0 <_close_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	4d05      	ldr	r5, [pc, #20]	; (8003afc <_close_r+0x1c>)
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fd fa9e 	bl	800102c <_close>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_close_r+0x1a>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_close_r+0x1a>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	2000045c 	.word	0x2000045c

08003b00 <_lseek_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4d05      	ldr	r5, [pc, #20]	; (8003b20 <_lseek_r+0x20>)
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fd fab0 	bl	8001074 <_lseek>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_lseek_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_lseek_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	2000045c 	.word	0x2000045c

08003b24 <_read_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4d05      	ldr	r5, [pc, #20]	; (8003b44 <_read_r+0x20>)
 8003b30:	602a      	str	r2, [r5, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7fd fa41 	bl	8000fba <_read>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_read_r+0x1e>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_read_r+0x1e>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	2000045c 	.word	0x2000045c

08003b48 <_write_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	2200      	movs	r2, #0
 8003b52:	4d05      	ldr	r5, [pc, #20]	; (8003b68 <_write_r+0x20>)
 8003b54:	602a      	str	r2, [r5, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f7fd fa4c 	bl	8000ff4 <_write>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_write_r+0x1e>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_write_r+0x1e>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	2000045c 	.word	0x2000045c

08003b6c <__errno>:
 8003b6c:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <__errno+0x8>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000006c 	.word	0x2000006c

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	4d0c      	ldr	r5, [pc, #48]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7e:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b80:	1b64      	subs	r4, r4, r5
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	f002 f888 	bl	8005c9c <_init>
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	4d0a      	ldr	r5, [pc, #40]	; (8003bb8 <__libc_init_array+0x40>)
 8003b90:	4c0a      	ldr	r4, [pc, #40]	; (8003bbc <__libc_init_array+0x44>)
 8003b92:	1b64      	subs	r4, r4, r5
 8003b94:	10a4      	asrs	r4, r4, #2
 8003b96:	42a6      	cmp	r6, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba0:	4798      	blx	r3
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003baa:	4798      	blx	r3
 8003bac:	3601      	adds	r6, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	0800607c 	.word	0x0800607c
 8003bb4:	0800607c 	.word	0x0800607c
 8003bb8:	0800607c 	.word	0x0800607c
 8003bbc:	08006080 	.word	0x08006080

08003bc0 <__retarget_lock_init_recursive>:
 8003bc0:	4770      	bx	lr

08003bc2 <__retarget_lock_acquire_recursive>:
 8003bc2:	4770      	bx	lr

08003bc4 <__retarget_lock_release_recursive>:
 8003bc4:	4770      	bx	lr

08003bc6 <memchr>:
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	b2c9      	uxtb	r1, r1
 8003bcc:	4402      	add	r2, r0
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	d101      	bne.n	8003bd8 <memchr+0x12>
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e003      	b.n	8003be0 <memchr+0x1a>
 8003bd8:	7804      	ldrb	r4, [r0, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	428c      	cmp	r4, r1
 8003bde:	d1f6      	bne.n	8003bce <memchr+0x8>
 8003be0:	bd10      	pop	{r4, pc}

08003be2 <quorem>:
 8003be2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be6:	6903      	ldr	r3, [r0, #16]
 8003be8:	690c      	ldr	r4, [r1, #16]
 8003bea:	4607      	mov	r7, r0
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	db7f      	blt.n	8003cf0 <quorem+0x10e>
 8003bf0:	3c01      	subs	r4, #1
 8003bf2:	f100 0514 	add.w	r5, r0, #20
 8003bf6:	f101 0814 	add.w	r8, r1, #20
 8003bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003c14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c18:	d331      	bcc.n	8003c7e <quorem+0x9c>
 8003c1a:	f04f 0e00 	mov.w	lr, #0
 8003c1e:	4640      	mov	r0, r8
 8003c20:	46ac      	mov	ip, r5
 8003c22:	46f2      	mov	sl, lr
 8003c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c28:	b293      	uxth	r3, r2
 8003c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8003c2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c32:	0c1a      	lsrs	r2, r3, #16
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	fb06 220e 	mla	r2, r6, lr, r2
 8003c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8003c3e:	f8dc a000 	ldr.w	sl, [ip]
 8003c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c46:	fa1f fa8a 	uxth.w	sl, sl
 8003c4a:	4453      	add	r3, sl
 8003c4c:	f8dc a000 	ldr.w	sl, [ip]
 8003c50:	b292      	uxth	r2, r2
 8003c52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003c56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c60:	4581      	cmp	r9, r0
 8003c62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c66:	f84c 3b04 	str.w	r3, [ip], #4
 8003c6a:	d2db      	bcs.n	8003c24 <quorem+0x42>
 8003c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c70:	b92b      	cbnz	r3, 8003c7e <quorem+0x9c>
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	3b04      	subs	r3, #4
 8003c76:	429d      	cmp	r5, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	d32d      	bcc.n	8003cd8 <quorem+0xf6>
 8003c7c:	613c      	str	r4, [r7, #16]
 8003c7e:	4638      	mov	r0, r7
 8003c80:	f001 f994 	bl	8004fac <__mcmp>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	db23      	blt.n	8003cd0 <quorem+0xee>
 8003c88:	4629      	mov	r1, r5
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	3601      	adds	r6, #1
 8003c8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c92:	f8d1 c000 	ldr.w	ip, [r1]
 8003c96:	b293      	uxth	r3, r2
 8003c98:	1ac3      	subs	r3, r0, r3
 8003c9a:	0c12      	lsrs	r2, r2, #16
 8003c9c:	fa1f f08c 	uxth.w	r0, ip
 8003ca0:	4403      	add	r3, r0
 8003ca2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003ca6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cb0:	45c1      	cmp	r9, r8
 8003cb2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003cb6:	f841 3b04 	str.w	r3, [r1], #4
 8003cba:	d2e8      	bcs.n	8003c8e <quorem+0xac>
 8003cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cc4:	b922      	cbnz	r2, 8003cd0 <quorem+0xee>
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	429d      	cmp	r5, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	d30a      	bcc.n	8003ce4 <quorem+0x102>
 8003cce:	613c      	str	r4, [r7, #16]
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	b003      	add	sp, #12
 8003cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	2a00      	cmp	r2, #0
 8003cde:	d1cd      	bne.n	8003c7c <quorem+0x9a>
 8003ce0:	3c01      	subs	r4, #1
 8003ce2:	e7c8      	b.n	8003c76 <quorem+0x94>
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d1f0      	bne.n	8003cce <quorem+0xec>
 8003cec:	3c01      	subs	r4, #1
 8003cee:	e7eb      	b.n	8003cc8 <quorem+0xe6>
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e7ee      	b.n	8003cd2 <quorem+0xf0>
 8003cf4:	0000      	movs	r0, r0
	...

08003cf8 <_dtoa_r>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	4616      	mov	r6, r2
 8003cfe:	461f      	mov	r7, r3
 8003d00:	69c4      	ldr	r4, [r0, #28]
 8003d02:	b099      	sub	sp, #100	; 0x64
 8003d04:	4605      	mov	r5, r0
 8003d06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003d0e:	b974      	cbnz	r4, 8003d2e <_dtoa_r+0x36>
 8003d10:	2010      	movs	r0, #16
 8003d12:	f000 fe1d 	bl	8004950 <malloc>
 8003d16:	4602      	mov	r2, r0
 8003d18:	61e8      	str	r0, [r5, #28]
 8003d1a:	b920      	cbnz	r0, 8003d26 <_dtoa_r+0x2e>
 8003d1c:	21ef      	movs	r1, #239	; 0xef
 8003d1e:	4bac      	ldr	r3, [pc, #688]	; (8003fd0 <_dtoa_r+0x2d8>)
 8003d20:	48ac      	ldr	r0, [pc, #688]	; (8003fd4 <_dtoa_r+0x2dc>)
 8003d22:	f001 fc7b 	bl	800561c <__assert_func>
 8003d26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003d2a:	6004      	str	r4, [r0, #0]
 8003d2c:	60c4      	str	r4, [r0, #12]
 8003d2e:	69eb      	ldr	r3, [r5, #28]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	b151      	cbz	r1, 8003d4a <_dtoa_r+0x52>
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2301      	movs	r3, #1
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	604a      	str	r2, [r1, #4]
 8003d3c:	608b      	str	r3, [r1, #8]
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 fefa 	bl	8004b38 <_Bfree>
 8003d44:	2200      	movs	r2, #0
 8003d46:	69eb      	ldr	r3, [r5, #28]
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	1e3b      	subs	r3, r7, #0
 8003d4c:	bfaf      	iteee	ge
 8003d4e:	2300      	movge	r3, #0
 8003d50:	2201      	movlt	r2, #1
 8003d52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d56:	9305      	strlt	r3, [sp, #20]
 8003d58:	bfa8      	it	ge
 8003d5a:	f8c8 3000 	strge.w	r3, [r8]
 8003d5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003d62:	4b9d      	ldr	r3, [pc, #628]	; (8003fd8 <_dtoa_r+0x2e0>)
 8003d64:	bfb8      	it	lt
 8003d66:	f8c8 2000 	strlt.w	r2, [r8]
 8003d6a:	ea33 0309 	bics.w	r3, r3, r9
 8003d6e:	d119      	bne.n	8003da4 <_dtoa_r+0xac>
 8003d70:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d7c:	4333      	orrs	r3, r6
 8003d7e:	f000 8589 	beq.w	8004894 <_dtoa_r+0xb9c>
 8003d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d84:	b953      	cbnz	r3, 8003d9c <_dtoa_r+0xa4>
 8003d86:	4b95      	ldr	r3, [pc, #596]	; (8003fdc <_dtoa_r+0x2e4>)
 8003d88:	e023      	b.n	8003dd2 <_dtoa_r+0xda>
 8003d8a:	4b95      	ldr	r3, [pc, #596]	; (8003fe0 <_dtoa_r+0x2e8>)
 8003d8c:	9303      	str	r3, [sp, #12]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	9803      	ldr	r0, [sp, #12]
 8003d96:	b019      	add	sp, #100	; 0x64
 8003d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9c:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <_dtoa_r+0x2e4>)
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	3303      	adds	r3, #3
 8003da2:	e7f5      	b.n	8003d90 <_dtoa_r+0x98>
 8003da4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003da8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003db0:	2200      	movs	r2, #0
 8003db2:	2300      	movs	r3, #0
 8003db4:	f7fc fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8003db8:	4680      	mov	r8, r0
 8003dba:	b160      	cbz	r0, 8003dd6 <_dtoa_r+0xde>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8562 	beq.w	800488e <_dtoa_r+0xb96>
 8003dca:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <_dtoa_r+0x2ec>)
 8003dcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	9303      	str	r3, [sp, #12]
 8003dd4:	e7de      	b.n	8003d94 <_dtoa_r+0x9c>
 8003dd6:	ab16      	add	r3, sp, #88	; 0x58
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	ab17      	add	r3, sp, #92	; 0x5c
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4628      	mov	r0, r5
 8003de0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003de4:	f001 f98a 	bl	80050fc <__d2b>
 8003de8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003dec:	4682      	mov	sl, r0
 8003dee:	2c00      	cmp	r4, #0
 8003df0:	d07e      	beq.n	8003ef0 <_dtoa_r+0x1f8>
 8003df2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003e04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003e08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	2200      	movs	r2, #0
 8003e10:	4b75      	ldr	r3, [pc, #468]	; (8003fe8 <_dtoa_r+0x2f0>)
 8003e12:	f7fc f9a9 	bl	8000168 <__aeabi_dsub>
 8003e16:	a368      	add	r3, pc, #416	; (adr r3, 8003fb8 <_dtoa_r+0x2c0>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fb5c 	bl	80004d8 <__aeabi_dmul>
 8003e20:	a367      	add	r3, pc, #412	; (adr r3, 8003fc0 <_dtoa_r+0x2c8>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f7fc f9a1 	bl	800016c <__adddf3>
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	460f      	mov	r7, r1
 8003e30:	f7fc fae8 	bl	8000404 <__aeabi_i2d>
 8003e34:	a364      	add	r3, pc, #400	; (adr r3, 8003fc8 <_dtoa_r+0x2d0>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f7fc fb4d 	bl	80004d8 <__aeabi_dmul>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4630      	mov	r0, r6
 8003e44:	4639      	mov	r1, r7
 8003e46:	f7fc f991 	bl	800016c <__adddf3>
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460f      	mov	r7, r1
 8003e4e:	f7fc fdf3 	bl	8000a38 <__aeabi_d2iz>
 8003e52:	2200      	movs	r2, #0
 8003e54:	4683      	mov	fp, r0
 8003e56:	2300      	movs	r3, #0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	4639      	mov	r1, r7
 8003e5c:	f7fc fdae 	bl	80009bc <__aeabi_dcmplt>
 8003e60:	b148      	cbz	r0, 8003e76 <_dtoa_r+0x17e>
 8003e62:	4658      	mov	r0, fp
 8003e64:	f7fc face 	bl	8000404 <__aeabi_i2d>
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	f7fc fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003e70:	b908      	cbnz	r0, 8003e76 <_dtoa_r+0x17e>
 8003e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e76:	f1bb 0f16 	cmp.w	fp, #22
 8003e7a:	d857      	bhi.n	8003f2c <_dtoa_r+0x234>
 8003e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e80:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <_dtoa_r+0x2f4>)
 8003e82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f7fc fd97 	bl	80009bc <__aeabi_dcmplt>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d04e      	beq.n	8003f30 <_dtoa_r+0x238>
 8003e92:	2300      	movs	r3, #0
 8003e94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e9c:	1b1b      	subs	r3, r3, r4
 8003e9e:	1e5a      	subs	r2, r3, #1
 8003ea0:	bf46      	itte	mi
 8003ea2:	f1c3 0901 	rsbmi	r9, r3, #1
 8003ea6:	2300      	movmi	r3, #0
 8003ea8:	f04f 0900 	movpl.w	r9, #0
 8003eac:	9209      	str	r2, [sp, #36]	; 0x24
 8003eae:	bf48      	it	mi
 8003eb0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003eb2:	f1bb 0f00 	cmp.w	fp, #0
 8003eb6:	db3d      	blt.n	8003f34 <_dtoa_r+0x23c>
 8003eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003ebe:	445b      	add	r3, fp
 8003ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d867      	bhi.n	8003f9c <_dtoa_r+0x2a4>
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	bfc4      	itt	gt
 8003ed0:	3b04      	subgt	r3, #4
 8003ed2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ed6:	bfc8      	it	gt
 8003ed8:	2400      	movgt	r4, #0
 8003eda:	f1a3 0302 	sub.w	r3, r3, #2
 8003ede:	bfd8      	it	le
 8003ee0:	2401      	movle	r4, #1
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	f200 8086 	bhi.w	8003ff4 <_dtoa_r+0x2fc>
 8003ee8:	e8df f003 	tbb	[pc, r3]
 8003eec:	5637392c 	.word	0x5637392c
 8003ef0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ef4:	441c      	add	r4, r3
 8003ef6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	bfc1      	itttt	gt
 8003efe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003f02:	fa09 f903 	lslgt.w	r9, r9, r3
 8003f06:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003f0a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003f0e:	bfd6      	itet	le
 8003f10:	f1c3 0320 	rsble	r3, r3, #32
 8003f14:	ea49 0003 	orrgt.w	r0, r9, r3
 8003f18:	fa06 f003 	lslle.w	r0, r6, r3
 8003f1c:	f7fc fa62 	bl	80003e4 <__aeabi_ui2d>
 8003f20:	2201      	movs	r2, #1
 8003f22:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003f26:	3c01      	subs	r4, #1
 8003f28:	9213      	str	r2, [sp, #76]	; 0x4c
 8003f2a:	e76f      	b.n	8003e0c <_dtoa_r+0x114>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e7b3      	b.n	8003e98 <_dtoa_r+0x1a0>
 8003f30:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f32:	e7b2      	b.n	8003e9a <_dtoa_r+0x1a2>
 8003f34:	f1cb 0300 	rsb	r3, fp, #0
 8003f38:	930a      	str	r3, [sp, #40]	; 0x28
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	eba9 090b 	sub.w	r9, r9, fp
 8003f40:	930e      	str	r3, [sp, #56]	; 0x38
 8003f42:	e7c0      	b.n	8003ec6 <_dtoa_r+0x1ce>
 8003f44:	2300      	movs	r3, #0
 8003f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	dc55      	bgt.n	8003ffa <_dtoa_r+0x302>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	461a      	mov	r2, r3
 8003f52:	9306      	str	r3, [sp, #24]
 8003f54:	9308      	str	r3, [sp, #32]
 8003f56:	9223      	str	r2, [sp, #140]	; 0x8c
 8003f58:	e00b      	b.n	8003f72 <_dtoa_r+0x27a>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e7f3      	b.n	8003f46 <_dtoa_r+0x24e>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f64:	445b      	add	r3, fp
 8003f66:	9306      	str	r3, [sp, #24]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	9308      	str	r3, [sp, #32]
 8003f6e:	bfb8      	it	lt
 8003f70:	2301      	movlt	r3, #1
 8003f72:	2100      	movs	r1, #0
 8003f74:	2204      	movs	r2, #4
 8003f76:	69e8      	ldr	r0, [r5, #28]
 8003f78:	f102 0614 	add.w	r6, r2, #20
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	d940      	bls.n	8004002 <_dtoa_r+0x30a>
 8003f80:	6041      	str	r1, [r0, #4]
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 fd98 	bl	8004ab8 <_Balloc>
 8003f88:	9003      	str	r0, [sp, #12]
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d13c      	bne.n	8004008 <_dtoa_r+0x310>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	f240 11af 	movw	r1, #431	; 0x1af
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <_dtoa_r+0x2f8>)
 8003f96:	e6c3      	b.n	8003d20 <_dtoa_r+0x28>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e7e1      	b.n	8003f60 <_dtoa_r+0x268>
 8003f9c:	2401      	movs	r4, #1
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003fa2:	9322      	str	r3, [sp, #136]	; 0x88
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa8:	2200      	movs	r2, #0
 8003faa:	9306      	str	r3, [sp, #24]
 8003fac:	9308      	str	r3, [sp, #32]
 8003fae:	2312      	movs	r3, #18
 8003fb0:	e7d1      	b.n	8003f56 <_dtoa_r+0x25e>
 8003fb2:	bf00      	nop
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	636f4361 	.word	0x636f4361
 8003fbc:	3fd287a7 	.word	0x3fd287a7
 8003fc0:	8b60c8b3 	.word	0x8b60c8b3
 8003fc4:	3fc68a28 	.word	0x3fc68a28
 8003fc8:	509f79fb 	.word	0x509f79fb
 8003fcc:	3fd34413 	.word	0x3fd34413
 8003fd0:	08005d4b 	.word	0x08005d4b
 8003fd4:	08005d62 	.word	0x08005d62
 8003fd8:	7ff00000 	.word	0x7ff00000
 8003fdc:	08005d47 	.word	0x08005d47
 8003fe0:	08005d3e 	.word	0x08005d3e
 8003fe4:	08005d1b 	.word	0x08005d1b
 8003fe8:	3ff80000 	.word	0x3ff80000
 8003fec:	08005e50 	.word	0x08005e50
 8003ff0:	08005dba 	.word	0x08005dba
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ff8:	e7d4      	b.n	8003fa4 <_dtoa_r+0x2ac>
 8003ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ffc:	9306      	str	r3, [sp, #24]
 8003ffe:	9308      	str	r3, [sp, #32]
 8004000:	e7b7      	b.n	8003f72 <_dtoa_r+0x27a>
 8004002:	3101      	adds	r1, #1
 8004004:	0052      	lsls	r2, r2, #1
 8004006:	e7b7      	b.n	8003f78 <_dtoa_r+0x280>
 8004008:	69eb      	ldr	r3, [r5, #28]
 800400a:	9a03      	ldr	r2, [sp, #12]
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	9b08      	ldr	r3, [sp, #32]
 8004010:	2b0e      	cmp	r3, #14
 8004012:	f200 80a8 	bhi.w	8004166 <_dtoa_r+0x46e>
 8004016:	2c00      	cmp	r4, #0
 8004018:	f000 80a5 	beq.w	8004166 <_dtoa_r+0x46e>
 800401c:	f1bb 0f00 	cmp.w	fp, #0
 8004020:	dd34      	ble.n	800408c <_dtoa_r+0x394>
 8004022:	4b9a      	ldr	r3, [pc, #616]	; (800428c <_dtoa_r+0x594>)
 8004024:	f00b 020f 	and.w	r2, fp, #15
 8004028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800402c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004030:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004034:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004038:	ea4f 142b 	mov.w	r4, fp, asr #4
 800403c:	d016      	beq.n	800406c <_dtoa_r+0x374>
 800403e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004042:	4b93      	ldr	r3, [pc, #588]	; (8004290 <_dtoa_r+0x598>)
 8004044:	2703      	movs	r7, #3
 8004046:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800404a:	f7fc fb6f 	bl	800072c <__aeabi_ddiv>
 800404e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004052:	f004 040f 	and.w	r4, r4, #15
 8004056:	4e8e      	ldr	r6, [pc, #568]	; (8004290 <_dtoa_r+0x598>)
 8004058:	b954      	cbnz	r4, 8004070 <_dtoa_r+0x378>
 800405a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800405e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004062:	f7fc fb63 	bl	800072c <__aeabi_ddiv>
 8004066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800406a:	e029      	b.n	80040c0 <_dtoa_r+0x3c8>
 800406c:	2702      	movs	r7, #2
 800406e:	e7f2      	b.n	8004056 <_dtoa_r+0x35e>
 8004070:	07e1      	lsls	r1, r4, #31
 8004072:	d508      	bpl.n	8004086 <_dtoa_r+0x38e>
 8004074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004078:	e9d6 2300 	ldrd	r2, r3, [r6]
 800407c:	f7fc fa2c 	bl	80004d8 <__aeabi_dmul>
 8004080:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004084:	3701      	adds	r7, #1
 8004086:	1064      	asrs	r4, r4, #1
 8004088:	3608      	adds	r6, #8
 800408a:	e7e5      	b.n	8004058 <_dtoa_r+0x360>
 800408c:	f000 80a5 	beq.w	80041da <_dtoa_r+0x4e2>
 8004090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004094:	f1cb 0400 	rsb	r4, fp, #0
 8004098:	4b7c      	ldr	r3, [pc, #496]	; (800428c <_dtoa_r+0x594>)
 800409a:	f004 020f 	and.w	r2, r4, #15
 800409e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc fa17 	bl	80004d8 <__aeabi_dmul>
 80040aa:	2702      	movs	r7, #2
 80040ac:	2300      	movs	r3, #0
 80040ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040b2:	4e77      	ldr	r6, [pc, #476]	; (8004290 <_dtoa_r+0x598>)
 80040b4:	1124      	asrs	r4, r4, #4
 80040b6:	2c00      	cmp	r4, #0
 80040b8:	f040 8084 	bne.w	80041c4 <_dtoa_r+0x4cc>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1d2      	bne.n	8004066 <_dtoa_r+0x36e>
 80040c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80040c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80040c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8087 	beq.w	80041de <_dtoa_r+0x4e6>
 80040d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040d4:	2200      	movs	r2, #0
 80040d6:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <_dtoa_r+0x59c>)
 80040d8:	f7fc fc70 	bl	80009bc <__aeabi_dcmplt>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d07e      	beq.n	80041de <_dtoa_r+0x4e6>
 80040e0:	9b08      	ldr	r3, [sp, #32]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d07b      	beq.n	80041de <_dtoa_r+0x4e6>
 80040e6:	9b06      	ldr	r3, [sp, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dd38      	ble.n	800415e <_dtoa_r+0x466>
 80040ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040f0:	2200      	movs	r2, #0
 80040f2:	4b69      	ldr	r3, [pc, #420]	; (8004298 <_dtoa_r+0x5a0>)
 80040f4:	f7fc f9f0 	bl	80004d8 <__aeabi_dmul>
 80040f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040fc:	9c06      	ldr	r4, [sp, #24]
 80040fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004102:	3701      	adds	r7, #1
 8004104:	4638      	mov	r0, r7
 8004106:	f7fc f97d 	bl	8000404 <__aeabi_i2d>
 800410a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800410e:	f7fc f9e3 	bl	80004d8 <__aeabi_dmul>
 8004112:	2200      	movs	r2, #0
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <_dtoa_r+0x5a4>)
 8004116:	f7fc f829 	bl	800016c <__adddf3>
 800411a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800411e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004122:	9611      	str	r6, [sp, #68]	; 0x44
 8004124:	2c00      	cmp	r4, #0
 8004126:	d15d      	bne.n	80041e4 <_dtoa_r+0x4ec>
 8004128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800412c:	2200      	movs	r2, #0
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <_dtoa_r+0x5a8>)
 8004130:	f7fc f81a 	bl	8000168 <__aeabi_dsub>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800413c:	4633      	mov	r3, r6
 800413e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004140:	f7fc fc5a 	bl	80009f8 <__aeabi_dcmpgt>
 8004144:	2800      	cmp	r0, #0
 8004146:	f040 8295 	bne.w	8004674 <_dtoa_r+0x97c>
 800414a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800414e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004150:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004154:	f7fc fc32 	bl	80009bc <__aeabi_dcmplt>
 8004158:	2800      	cmp	r0, #0
 800415a:	f040 8289 	bne.w	8004670 <_dtoa_r+0x978>
 800415e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004162:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004166:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004168:	2b00      	cmp	r3, #0
 800416a:	f2c0 8151 	blt.w	8004410 <_dtoa_r+0x718>
 800416e:	f1bb 0f0e 	cmp.w	fp, #14
 8004172:	f300 814d 	bgt.w	8004410 <_dtoa_r+0x718>
 8004176:	4b45      	ldr	r3, [pc, #276]	; (800428c <_dtoa_r+0x594>)
 8004178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800417c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004180:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004186:	2b00      	cmp	r3, #0
 8004188:	f280 80da 	bge.w	8004340 <_dtoa_r+0x648>
 800418c:	9b08      	ldr	r3, [sp, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f300 80d6 	bgt.w	8004340 <_dtoa_r+0x648>
 8004194:	f040 826b 	bne.w	800466e <_dtoa_r+0x976>
 8004198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800419c:	2200      	movs	r2, #0
 800419e:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <_dtoa_r+0x5a8>)
 80041a0:	f7fc f99a 	bl	80004d8 <__aeabi_dmul>
 80041a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041a8:	f7fc fc1c 	bl	80009e4 <__aeabi_dcmpge>
 80041ac:	9c08      	ldr	r4, [sp, #32]
 80041ae:	4626      	mov	r6, r4
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f040 8241 	bne.w	8004638 <_dtoa_r+0x940>
 80041b6:	2331      	movs	r3, #49	; 0x31
 80041b8:	9f03      	ldr	r7, [sp, #12]
 80041ba:	f10b 0b01 	add.w	fp, fp, #1
 80041be:	f807 3b01 	strb.w	r3, [r7], #1
 80041c2:	e23d      	b.n	8004640 <_dtoa_r+0x948>
 80041c4:	07e2      	lsls	r2, r4, #31
 80041c6:	d505      	bpl.n	80041d4 <_dtoa_r+0x4dc>
 80041c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041cc:	f7fc f984 	bl	80004d8 <__aeabi_dmul>
 80041d0:	2301      	movs	r3, #1
 80041d2:	3701      	adds	r7, #1
 80041d4:	1064      	asrs	r4, r4, #1
 80041d6:	3608      	adds	r6, #8
 80041d8:	e76d      	b.n	80040b6 <_dtoa_r+0x3be>
 80041da:	2702      	movs	r7, #2
 80041dc:	e770      	b.n	80040c0 <_dtoa_r+0x3c8>
 80041de:	46d8      	mov	r8, fp
 80041e0:	9c08      	ldr	r4, [sp, #32]
 80041e2:	e78f      	b.n	8004104 <_dtoa_r+0x40c>
 80041e4:	9903      	ldr	r1, [sp, #12]
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <_dtoa_r+0x594>)
 80041e8:	4421      	add	r1, r4
 80041ea:	9112      	str	r1, [sp, #72]	; 0x48
 80041ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80041f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041fa:	2900      	cmp	r1, #0
 80041fc:	d054      	beq.n	80042a8 <_dtoa_r+0x5b0>
 80041fe:	2000      	movs	r0, #0
 8004200:	4928      	ldr	r1, [pc, #160]	; (80042a4 <_dtoa_r+0x5ac>)
 8004202:	f7fc fa93 	bl	800072c <__aeabi_ddiv>
 8004206:	463b      	mov	r3, r7
 8004208:	4632      	mov	r2, r6
 800420a:	f7fb ffad 	bl	8000168 <__aeabi_dsub>
 800420e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004212:	9f03      	ldr	r7, [sp, #12]
 8004214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004218:	f7fc fc0e 	bl	8000a38 <__aeabi_d2iz>
 800421c:	4604      	mov	r4, r0
 800421e:	f7fc f8f1 	bl	8000404 <__aeabi_i2d>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800422a:	f7fb ff9d 	bl	8000168 <__aeabi_dsub>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	3430      	adds	r4, #48	; 0x30
 8004234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004238:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800423c:	f807 4b01 	strb.w	r4, [r7], #1
 8004240:	f7fc fbbc 	bl	80009bc <__aeabi_dcmplt>
 8004244:	2800      	cmp	r0, #0
 8004246:	d173      	bne.n	8004330 <_dtoa_r+0x638>
 8004248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800424c:	2000      	movs	r0, #0
 800424e:	4911      	ldr	r1, [pc, #68]	; (8004294 <_dtoa_r+0x59c>)
 8004250:	f7fb ff8a 	bl	8000168 <__aeabi_dsub>
 8004254:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004258:	f7fc fbb0 	bl	80009bc <__aeabi_dcmplt>
 800425c:	2800      	cmp	r0, #0
 800425e:	f040 80b6 	bne.w	80043ce <_dtoa_r+0x6d6>
 8004262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004264:	429f      	cmp	r7, r3
 8004266:	f43f af7a 	beq.w	800415e <_dtoa_r+0x466>
 800426a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800426e:	2200      	movs	r2, #0
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <_dtoa_r+0x5a0>)
 8004272:	f7fc f931 	bl	80004d8 <__aeabi_dmul>
 8004276:	2200      	movs	r2, #0
 8004278:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800427c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <_dtoa_r+0x5a0>)
 8004282:	f7fc f929 	bl	80004d8 <__aeabi_dmul>
 8004286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800428a:	e7c3      	b.n	8004214 <_dtoa_r+0x51c>
 800428c:	08005e50 	.word	0x08005e50
 8004290:	08005e28 	.word	0x08005e28
 8004294:	3ff00000 	.word	0x3ff00000
 8004298:	40240000 	.word	0x40240000
 800429c:	401c0000 	.word	0x401c0000
 80042a0:	40140000 	.word	0x40140000
 80042a4:	3fe00000 	.word	0x3fe00000
 80042a8:	4630      	mov	r0, r6
 80042aa:	4639      	mov	r1, r7
 80042ac:	f7fc f914 	bl	80004d8 <__aeabi_dmul>
 80042b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042b6:	9c03      	ldr	r4, [sp, #12]
 80042b8:	9314      	str	r3, [sp, #80]	; 0x50
 80042ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042be:	f7fc fbbb 	bl	8000a38 <__aeabi_d2iz>
 80042c2:	9015      	str	r0, [sp, #84]	; 0x54
 80042c4:	f7fc f89e 	bl	8000404 <__aeabi_i2d>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042d0:	f7fb ff4a 	bl	8000168 <__aeabi_dsub>
 80042d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042d6:	4606      	mov	r6, r0
 80042d8:	3330      	adds	r3, #48	; 0x30
 80042da:	f804 3b01 	strb.w	r3, [r4], #1
 80042de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042e0:	460f      	mov	r7, r1
 80042e2:	429c      	cmp	r4, r3
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	d124      	bne.n	8004334 <_dtoa_r+0x63c>
 80042ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042ee:	4baf      	ldr	r3, [pc, #700]	; (80045ac <_dtoa_r+0x8b4>)
 80042f0:	f7fb ff3c 	bl	800016c <__adddf3>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	f7fc fb7c 	bl	80009f8 <__aeabi_dcmpgt>
 8004300:	2800      	cmp	r0, #0
 8004302:	d163      	bne.n	80043cc <_dtoa_r+0x6d4>
 8004304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004308:	2000      	movs	r0, #0
 800430a:	49a8      	ldr	r1, [pc, #672]	; (80045ac <_dtoa_r+0x8b4>)
 800430c:	f7fb ff2c 	bl	8000168 <__aeabi_dsub>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4630      	mov	r0, r6
 8004316:	4639      	mov	r1, r7
 8004318:	f7fc fb50 	bl	80009bc <__aeabi_dcmplt>
 800431c:	2800      	cmp	r0, #0
 800431e:	f43f af1e 	beq.w	800415e <_dtoa_r+0x466>
 8004322:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004324:	1e7b      	subs	r3, r7, #1
 8004326:	9314      	str	r3, [sp, #80]	; 0x50
 8004328:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d0f8      	beq.n	8004322 <_dtoa_r+0x62a>
 8004330:	46c3      	mov	fp, r8
 8004332:	e03b      	b.n	80043ac <_dtoa_r+0x6b4>
 8004334:	4b9e      	ldr	r3, [pc, #632]	; (80045b0 <_dtoa_r+0x8b8>)
 8004336:	f7fc f8cf 	bl	80004d8 <__aeabi_dmul>
 800433a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800433e:	e7bc      	b.n	80042ba <_dtoa_r+0x5c2>
 8004340:	9f03      	ldr	r7, [sp, #12]
 8004342:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f7fc f9ed 	bl	800072c <__aeabi_ddiv>
 8004352:	f7fc fb71 	bl	8000a38 <__aeabi_d2iz>
 8004356:	4604      	mov	r4, r0
 8004358:	f7fc f854 	bl	8000404 <__aeabi_i2d>
 800435c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004360:	f7fc f8ba 	bl	80004d8 <__aeabi_dmul>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4640      	mov	r0, r8
 800436a:	4649      	mov	r1, r9
 800436c:	f7fb fefc 	bl	8000168 <__aeabi_dsub>
 8004370:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004374:	f807 6b01 	strb.w	r6, [r7], #1
 8004378:	9e03      	ldr	r6, [sp, #12]
 800437a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800437e:	1bbe      	subs	r6, r7, r6
 8004380:	45b4      	cmp	ip, r6
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	d136      	bne.n	80043f6 <_dtoa_r+0x6fe>
 8004388:	f7fb fef0 	bl	800016c <__adddf3>
 800438c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004390:	4680      	mov	r8, r0
 8004392:	4689      	mov	r9, r1
 8004394:	f7fc fb30 	bl	80009f8 <__aeabi_dcmpgt>
 8004398:	bb58      	cbnz	r0, 80043f2 <_dtoa_r+0x6fa>
 800439a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800439e:	4640      	mov	r0, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	f7fc fb01 	bl	80009a8 <__aeabi_dcmpeq>
 80043a6:	b108      	cbz	r0, 80043ac <_dtoa_r+0x6b4>
 80043a8:	07e3      	lsls	r3, r4, #31
 80043aa:	d422      	bmi.n	80043f2 <_dtoa_r+0x6fa>
 80043ac:	4651      	mov	r1, sl
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fbc2 	bl	8004b38 <_Bfree>
 80043b4:	2300      	movs	r3, #0
 80043b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043b8:	703b      	strb	r3, [r7, #0]
 80043ba:	f10b 0301 	add.w	r3, fp, #1
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f43f ace6 	beq.w	8003d94 <_dtoa_r+0x9c>
 80043c8:	601f      	str	r7, [r3, #0]
 80043ca:	e4e3      	b.n	8003d94 <_dtoa_r+0x9c>
 80043cc:	4627      	mov	r7, r4
 80043ce:	463b      	mov	r3, r7
 80043d0:	461f      	mov	r7, r3
 80043d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043d6:	2a39      	cmp	r2, #57	; 0x39
 80043d8:	d107      	bne.n	80043ea <_dtoa_r+0x6f2>
 80043da:	9a03      	ldr	r2, [sp, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1f7      	bne.n	80043d0 <_dtoa_r+0x6d8>
 80043e0:	2230      	movs	r2, #48	; 0x30
 80043e2:	9903      	ldr	r1, [sp, #12]
 80043e4:	f108 0801 	add.w	r8, r8, #1
 80043e8:	700a      	strb	r2, [r1, #0]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	3201      	adds	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e79e      	b.n	8004330 <_dtoa_r+0x638>
 80043f2:	46d8      	mov	r8, fp
 80043f4:	e7eb      	b.n	80043ce <_dtoa_r+0x6d6>
 80043f6:	2200      	movs	r2, #0
 80043f8:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <_dtoa_r+0x8b8>)
 80043fa:	f7fc f86d 	bl	80004d8 <__aeabi_dmul>
 80043fe:	2200      	movs	r2, #0
 8004400:	2300      	movs	r3, #0
 8004402:	4680      	mov	r8, r0
 8004404:	4689      	mov	r9, r1
 8004406:	f7fc facf 	bl	80009a8 <__aeabi_dcmpeq>
 800440a:	2800      	cmp	r0, #0
 800440c:	d09b      	beq.n	8004346 <_dtoa_r+0x64e>
 800440e:	e7cd      	b.n	80043ac <_dtoa_r+0x6b4>
 8004410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004412:	2a00      	cmp	r2, #0
 8004414:	f000 80c4 	beq.w	80045a0 <_dtoa_r+0x8a8>
 8004418:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800441a:	2a01      	cmp	r2, #1
 800441c:	f300 80a8 	bgt.w	8004570 <_dtoa_r+0x878>
 8004420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004422:	2a00      	cmp	r2, #0
 8004424:	f000 80a0 	beq.w	8004568 <_dtoa_r+0x870>
 8004428:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800442c:	464f      	mov	r7, r9
 800442e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004432:	2101      	movs	r1, #1
 8004434:	441a      	add	r2, r3
 8004436:	4628      	mov	r0, r5
 8004438:	4499      	add	r9, r3
 800443a:	9209      	str	r2, [sp, #36]	; 0x24
 800443c:	f000 fc32 	bl	8004ca4 <__i2b>
 8004440:	4606      	mov	r6, r0
 8004442:	b15f      	cbz	r7, 800445c <_dtoa_r+0x764>
 8004444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd08      	ble.n	800445c <_dtoa_r+0x764>
 800444a:	42bb      	cmp	r3, r7
 800444c:	bfa8      	it	ge
 800444e:	463b      	movge	r3, r7
 8004450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004452:	eba9 0903 	sub.w	r9, r9, r3
 8004456:	1aff      	subs	r7, r7, r3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	9309      	str	r3, [sp, #36]	; 0x24
 800445c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800445e:	b1f3      	cbz	r3, 800449e <_dtoa_r+0x7a6>
 8004460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80a0 	beq.w	80045a8 <_dtoa_r+0x8b0>
 8004468:	2c00      	cmp	r4, #0
 800446a:	dd10      	ble.n	800448e <_dtoa_r+0x796>
 800446c:	4631      	mov	r1, r6
 800446e:	4622      	mov	r2, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f000 fcd5 	bl	8004e20 <__pow5mult>
 8004476:	4652      	mov	r2, sl
 8004478:	4601      	mov	r1, r0
 800447a:	4606      	mov	r6, r0
 800447c:	4628      	mov	r0, r5
 800447e:	f000 fc27 	bl	8004cd0 <__multiply>
 8004482:	4680      	mov	r8, r0
 8004484:	4651      	mov	r1, sl
 8004486:	4628      	mov	r0, r5
 8004488:	f000 fb56 	bl	8004b38 <_Bfree>
 800448c:	46c2      	mov	sl, r8
 800448e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004490:	1b1a      	subs	r2, r3, r4
 8004492:	d004      	beq.n	800449e <_dtoa_r+0x7a6>
 8004494:	4651      	mov	r1, sl
 8004496:	4628      	mov	r0, r5
 8004498:	f000 fcc2 	bl	8004e20 <__pow5mult>
 800449c:	4682      	mov	sl, r0
 800449e:	2101      	movs	r1, #1
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 fbff 	bl	8004ca4 <__i2b>
 80044a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a8:	4604      	mov	r4, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f340 8082 	ble.w	80045b4 <_dtoa_r+0x8bc>
 80044b0:	461a      	mov	r2, r3
 80044b2:	4601      	mov	r1, r0
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 fcb3 	bl	8004e20 <__pow5mult>
 80044ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044bc:	4604      	mov	r4, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	dd7b      	ble.n	80045ba <_dtoa_r+0x8c2>
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044cc:	6918      	ldr	r0, [r3, #16]
 80044ce:	f000 fb9b 	bl	8004c08 <__hi0bits>
 80044d2:	f1c0 0020 	rsb	r0, r0, #32
 80044d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d8:	4418      	add	r0, r3
 80044da:	f010 001f 	ands.w	r0, r0, #31
 80044de:	f000 8092 	beq.w	8004606 <_dtoa_r+0x90e>
 80044e2:	f1c0 0320 	rsb	r3, r0, #32
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	f340 8085 	ble.w	80045f6 <_dtoa_r+0x8fe>
 80044ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ee:	f1c0 001c 	rsb	r0, r0, #28
 80044f2:	4403      	add	r3, r0
 80044f4:	4481      	add	r9, r0
 80044f6:	4407      	add	r7, r0
 80044f8:	9309      	str	r3, [sp, #36]	; 0x24
 80044fa:	f1b9 0f00 	cmp.w	r9, #0
 80044fe:	dd05      	ble.n	800450c <_dtoa_r+0x814>
 8004500:	4651      	mov	r1, sl
 8004502:	464a      	mov	r2, r9
 8004504:	4628      	mov	r0, r5
 8004506:	f000 fce5 	bl	8004ed4 <__lshift>
 800450a:	4682      	mov	sl, r0
 800450c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450e:	2b00      	cmp	r3, #0
 8004510:	dd05      	ble.n	800451e <_dtoa_r+0x826>
 8004512:	4621      	mov	r1, r4
 8004514:	461a      	mov	r2, r3
 8004516:	4628      	mov	r0, r5
 8004518:	f000 fcdc 	bl	8004ed4 <__lshift>
 800451c:	4604      	mov	r4, r0
 800451e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d072      	beq.n	800460a <_dtoa_r+0x912>
 8004524:	4621      	mov	r1, r4
 8004526:	4650      	mov	r0, sl
 8004528:	f000 fd40 	bl	8004fac <__mcmp>
 800452c:	2800      	cmp	r0, #0
 800452e:	da6c      	bge.n	800460a <_dtoa_r+0x912>
 8004530:	2300      	movs	r3, #0
 8004532:	4651      	mov	r1, sl
 8004534:	220a      	movs	r2, #10
 8004536:	4628      	mov	r0, r5
 8004538:	f000 fb20 	bl	8004b7c <__multadd>
 800453c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453e:	4682      	mov	sl, r0
 8004540:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 81ac 	beq.w	80048a2 <_dtoa_r+0xbaa>
 800454a:	2300      	movs	r3, #0
 800454c:	4631      	mov	r1, r6
 800454e:	220a      	movs	r2, #10
 8004550:	4628      	mov	r0, r5
 8004552:	f000 fb13 	bl	8004b7c <__multadd>
 8004556:	9b06      	ldr	r3, [sp, #24]
 8004558:	4606      	mov	r6, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	f300 8093 	bgt.w	8004686 <_dtoa_r+0x98e>
 8004560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004562:	2b02      	cmp	r3, #2
 8004564:	dc59      	bgt.n	800461a <_dtoa_r+0x922>
 8004566:	e08e      	b.n	8004686 <_dtoa_r+0x98e>
 8004568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800456a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800456e:	e75d      	b.n	800442c <_dtoa_r+0x734>
 8004570:	9b08      	ldr	r3, [sp, #32]
 8004572:	1e5c      	subs	r4, r3, #1
 8004574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004576:	42a3      	cmp	r3, r4
 8004578:	bfbf      	itttt	lt
 800457a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800457c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800457e:	1ae3      	sublt	r3, r4, r3
 8004580:	18d2      	addlt	r2, r2, r3
 8004582:	bfa8      	it	ge
 8004584:	1b1c      	subge	r4, r3, r4
 8004586:	9b08      	ldr	r3, [sp, #32]
 8004588:	bfbe      	ittt	lt
 800458a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800458c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800458e:	2400      	movlt	r4, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	bfb5      	itete	lt
 8004594:	eba9 0703 	sublt.w	r7, r9, r3
 8004598:	464f      	movge	r7, r9
 800459a:	2300      	movlt	r3, #0
 800459c:	9b08      	ldrge	r3, [sp, #32]
 800459e:	e747      	b.n	8004430 <_dtoa_r+0x738>
 80045a0:	464f      	mov	r7, r9
 80045a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80045a6:	e74c      	b.n	8004442 <_dtoa_r+0x74a>
 80045a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045aa:	e773      	b.n	8004494 <_dtoa_r+0x79c>
 80045ac:	3fe00000 	.word	0x3fe00000
 80045b0:	40240000 	.word	0x40240000
 80045b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	dc18      	bgt.n	80045ec <_dtoa_r+0x8f4>
 80045ba:	9b04      	ldr	r3, [sp, #16]
 80045bc:	b9b3      	cbnz	r3, 80045ec <_dtoa_r+0x8f4>
 80045be:	9b05      	ldr	r3, [sp, #20]
 80045c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c4:	b993      	cbnz	r3, 80045ec <_dtoa_r+0x8f4>
 80045c6:	9b05      	ldr	r3, [sp, #20]
 80045c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045cc:	0d1b      	lsrs	r3, r3, #20
 80045ce:	051b      	lsls	r3, r3, #20
 80045d0:	b17b      	cbz	r3, 80045f2 <_dtoa_r+0x8fa>
 80045d2:	f04f 0801 	mov.w	r8, #1
 80045d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d8:	f109 0901 	add.w	r9, r9, #1
 80045dc:	3301      	adds	r3, #1
 80045de:	9309      	str	r3, [sp, #36]	; 0x24
 80045e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f47f af6f 	bne.w	80044c6 <_dtoa_r+0x7ce>
 80045e8:	2001      	movs	r0, #1
 80045ea:	e774      	b.n	80044d6 <_dtoa_r+0x7de>
 80045ec:	f04f 0800 	mov.w	r8, #0
 80045f0:	e7f6      	b.n	80045e0 <_dtoa_r+0x8e8>
 80045f2:	4698      	mov	r8, r3
 80045f4:	e7f4      	b.n	80045e0 <_dtoa_r+0x8e8>
 80045f6:	d080      	beq.n	80044fa <_dtoa_r+0x802>
 80045f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fa:	331c      	adds	r3, #28
 80045fc:	441a      	add	r2, r3
 80045fe:	4499      	add	r9, r3
 8004600:	441f      	add	r7, r3
 8004602:	9209      	str	r2, [sp, #36]	; 0x24
 8004604:	e779      	b.n	80044fa <_dtoa_r+0x802>
 8004606:	4603      	mov	r3, r0
 8004608:	e7f6      	b.n	80045f8 <_dtoa_r+0x900>
 800460a:	9b08      	ldr	r3, [sp, #32]
 800460c:	2b00      	cmp	r3, #0
 800460e:	dc34      	bgt.n	800467a <_dtoa_r+0x982>
 8004610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004612:	2b02      	cmp	r3, #2
 8004614:	dd31      	ble.n	800467a <_dtoa_r+0x982>
 8004616:	9b08      	ldr	r3, [sp, #32]
 8004618:	9306      	str	r3, [sp, #24]
 800461a:	9b06      	ldr	r3, [sp, #24]
 800461c:	b963      	cbnz	r3, 8004638 <_dtoa_r+0x940>
 800461e:	4621      	mov	r1, r4
 8004620:	2205      	movs	r2, #5
 8004622:	4628      	mov	r0, r5
 8004624:	f000 faaa 	bl	8004b7c <__multadd>
 8004628:	4601      	mov	r1, r0
 800462a:	4604      	mov	r4, r0
 800462c:	4650      	mov	r0, sl
 800462e:	f000 fcbd 	bl	8004fac <__mcmp>
 8004632:	2800      	cmp	r0, #0
 8004634:	f73f adbf 	bgt.w	80041b6 <_dtoa_r+0x4be>
 8004638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800463a:	9f03      	ldr	r7, [sp, #12]
 800463c:	ea6f 0b03 	mvn.w	fp, r3
 8004640:	f04f 0800 	mov.w	r8, #0
 8004644:	4621      	mov	r1, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fa76 	bl	8004b38 <_Bfree>
 800464c:	2e00      	cmp	r6, #0
 800464e:	f43f aead 	beq.w	80043ac <_dtoa_r+0x6b4>
 8004652:	f1b8 0f00 	cmp.w	r8, #0
 8004656:	d005      	beq.n	8004664 <_dtoa_r+0x96c>
 8004658:	45b0      	cmp	r8, r6
 800465a:	d003      	beq.n	8004664 <_dtoa_r+0x96c>
 800465c:	4641      	mov	r1, r8
 800465e:	4628      	mov	r0, r5
 8004660:	f000 fa6a 	bl	8004b38 <_Bfree>
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	f000 fa66 	bl	8004b38 <_Bfree>
 800466c:	e69e      	b.n	80043ac <_dtoa_r+0x6b4>
 800466e:	2400      	movs	r4, #0
 8004670:	4626      	mov	r6, r4
 8004672:	e7e1      	b.n	8004638 <_dtoa_r+0x940>
 8004674:	46c3      	mov	fp, r8
 8004676:	4626      	mov	r6, r4
 8004678:	e59d      	b.n	80041b6 <_dtoa_r+0x4be>
 800467a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80c8 	beq.w	8004812 <_dtoa_r+0xb1a>
 8004682:	9b08      	ldr	r3, [sp, #32]
 8004684:	9306      	str	r3, [sp, #24]
 8004686:	2f00      	cmp	r7, #0
 8004688:	dd05      	ble.n	8004696 <_dtoa_r+0x99e>
 800468a:	4631      	mov	r1, r6
 800468c:	463a      	mov	r2, r7
 800468e:	4628      	mov	r0, r5
 8004690:	f000 fc20 	bl	8004ed4 <__lshift>
 8004694:	4606      	mov	r6, r0
 8004696:	f1b8 0f00 	cmp.w	r8, #0
 800469a:	d05b      	beq.n	8004754 <_dtoa_r+0xa5c>
 800469c:	4628      	mov	r0, r5
 800469e:	6871      	ldr	r1, [r6, #4]
 80046a0:	f000 fa0a 	bl	8004ab8 <_Balloc>
 80046a4:	4607      	mov	r7, r0
 80046a6:	b928      	cbnz	r0, 80046b4 <_dtoa_r+0x9bc>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80046ae:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <_dtoa_r+0xbbc>)
 80046b0:	f7ff bb36 	b.w	8003d20 <_dtoa_r+0x28>
 80046b4:	6932      	ldr	r2, [r6, #16]
 80046b6:	f106 010c 	add.w	r1, r6, #12
 80046ba:	3202      	adds	r2, #2
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	300c      	adds	r0, #12
 80046c0:	f000 ff9e 	bl	8005600 <memcpy>
 80046c4:	2201      	movs	r2, #1
 80046c6:	4639      	mov	r1, r7
 80046c8:	4628      	mov	r0, r5
 80046ca:	f000 fc03 	bl	8004ed4 <__lshift>
 80046ce:	46b0      	mov	r8, r6
 80046d0:	4606      	mov	r6, r0
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	9a03      	ldr	r2, [sp, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	9308      	str	r3, [sp, #32]
 80046da:	9b06      	ldr	r3, [sp, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	930b      	str	r3, [sp, #44]	; 0x2c
 80046e0:	9b04      	ldr	r3, [sp, #16]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	930a      	str	r3, [sp, #40]	; 0x28
 80046e8:	9b08      	ldr	r3, [sp, #32]
 80046ea:	4621      	mov	r1, r4
 80046ec:	3b01      	subs	r3, #1
 80046ee:	4650      	mov	r0, sl
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	f7ff fa76 	bl	8003be2 <quorem>
 80046f6:	4641      	mov	r1, r8
 80046f8:	9006      	str	r0, [sp, #24]
 80046fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80046fe:	4650      	mov	r0, sl
 8004700:	f000 fc54 	bl	8004fac <__mcmp>
 8004704:	4632      	mov	r2, r6
 8004706:	9009      	str	r0, [sp, #36]	; 0x24
 8004708:	4621      	mov	r1, r4
 800470a:	4628      	mov	r0, r5
 800470c:	f000 fc6a 	bl	8004fe4 <__mdiff>
 8004710:	68c2      	ldr	r2, [r0, #12]
 8004712:	4607      	mov	r7, r0
 8004714:	bb02      	cbnz	r2, 8004758 <_dtoa_r+0xa60>
 8004716:	4601      	mov	r1, r0
 8004718:	4650      	mov	r0, sl
 800471a:	f000 fc47 	bl	8004fac <__mcmp>
 800471e:	4602      	mov	r2, r0
 8004720:	4639      	mov	r1, r7
 8004722:	4628      	mov	r0, r5
 8004724:	920c      	str	r2, [sp, #48]	; 0x30
 8004726:	f000 fa07 	bl	8004b38 <_Bfree>
 800472a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800472c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800472e:	9f08      	ldr	r7, [sp, #32]
 8004730:	ea43 0102 	orr.w	r1, r3, r2
 8004734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004736:	4319      	orrs	r1, r3
 8004738:	d110      	bne.n	800475c <_dtoa_r+0xa64>
 800473a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800473e:	d029      	beq.n	8004794 <_dtoa_r+0xa9c>
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	dd02      	ble.n	800474c <_dtoa_r+0xa54>
 8004746:	9b06      	ldr	r3, [sp, #24]
 8004748:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800474c:	9b04      	ldr	r3, [sp, #16]
 800474e:	f883 9000 	strb.w	r9, [r3]
 8004752:	e777      	b.n	8004644 <_dtoa_r+0x94c>
 8004754:	4630      	mov	r0, r6
 8004756:	e7ba      	b.n	80046ce <_dtoa_r+0x9d6>
 8004758:	2201      	movs	r2, #1
 800475a:	e7e1      	b.n	8004720 <_dtoa_r+0xa28>
 800475c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	db04      	blt.n	800476c <_dtoa_r+0xa74>
 8004762:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004764:	430b      	orrs	r3, r1
 8004766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004768:	430b      	orrs	r3, r1
 800476a:	d120      	bne.n	80047ae <_dtoa_r+0xab6>
 800476c:	2a00      	cmp	r2, #0
 800476e:	dded      	ble.n	800474c <_dtoa_r+0xa54>
 8004770:	4651      	mov	r1, sl
 8004772:	2201      	movs	r2, #1
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fbad 	bl	8004ed4 <__lshift>
 800477a:	4621      	mov	r1, r4
 800477c:	4682      	mov	sl, r0
 800477e:	f000 fc15 	bl	8004fac <__mcmp>
 8004782:	2800      	cmp	r0, #0
 8004784:	dc03      	bgt.n	800478e <_dtoa_r+0xa96>
 8004786:	d1e1      	bne.n	800474c <_dtoa_r+0xa54>
 8004788:	f019 0f01 	tst.w	r9, #1
 800478c:	d0de      	beq.n	800474c <_dtoa_r+0xa54>
 800478e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004792:	d1d8      	bne.n	8004746 <_dtoa_r+0xa4e>
 8004794:	2339      	movs	r3, #57	; 0x39
 8004796:	9a04      	ldr	r2, [sp, #16]
 8004798:	7013      	strb	r3, [r2, #0]
 800479a:	463b      	mov	r3, r7
 800479c:	461f      	mov	r7, r3
 800479e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	2a39      	cmp	r2, #57	; 0x39
 80047a6:	d06b      	beq.n	8004880 <_dtoa_r+0xb88>
 80047a8:	3201      	adds	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e74a      	b.n	8004644 <_dtoa_r+0x94c>
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	dd07      	ble.n	80047c2 <_dtoa_r+0xaca>
 80047b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80047b6:	d0ed      	beq.n	8004794 <_dtoa_r+0xa9c>
 80047b8:	9a04      	ldr	r2, [sp, #16]
 80047ba:	f109 0301 	add.w	r3, r9, #1
 80047be:	7013      	strb	r3, [r2, #0]
 80047c0:	e740      	b.n	8004644 <_dtoa_r+0x94c>
 80047c2:	9b08      	ldr	r3, [sp, #32]
 80047c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d042      	beq.n	8004854 <_dtoa_r+0xb5c>
 80047ce:	4651      	mov	r1, sl
 80047d0:	2300      	movs	r3, #0
 80047d2:	220a      	movs	r2, #10
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f9d1 	bl	8004b7c <__multadd>
 80047da:	45b0      	cmp	r8, r6
 80047dc:	4682      	mov	sl, r0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f04f 020a 	mov.w	r2, #10
 80047e6:	4641      	mov	r1, r8
 80047e8:	4628      	mov	r0, r5
 80047ea:	d107      	bne.n	80047fc <_dtoa_r+0xb04>
 80047ec:	f000 f9c6 	bl	8004b7c <__multadd>
 80047f0:	4680      	mov	r8, r0
 80047f2:	4606      	mov	r6, r0
 80047f4:	9b08      	ldr	r3, [sp, #32]
 80047f6:	3301      	adds	r3, #1
 80047f8:	9308      	str	r3, [sp, #32]
 80047fa:	e775      	b.n	80046e8 <_dtoa_r+0x9f0>
 80047fc:	f000 f9be 	bl	8004b7c <__multadd>
 8004800:	4631      	mov	r1, r6
 8004802:	4680      	mov	r8, r0
 8004804:	2300      	movs	r3, #0
 8004806:	220a      	movs	r2, #10
 8004808:	4628      	mov	r0, r5
 800480a:	f000 f9b7 	bl	8004b7c <__multadd>
 800480e:	4606      	mov	r6, r0
 8004810:	e7f0      	b.n	80047f4 <_dtoa_r+0xafc>
 8004812:	9b08      	ldr	r3, [sp, #32]
 8004814:	9306      	str	r3, [sp, #24]
 8004816:	9f03      	ldr	r7, [sp, #12]
 8004818:	4621      	mov	r1, r4
 800481a:	4650      	mov	r0, sl
 800481c:	f7ff f9e1 	bl	8003be2 <quorem>
 8004820:	9b03      	ldr	r3, [sp, #12]
 8004822:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004826:	f807 9b01 	strb.w	r9, [r7], #1
 800482a:	1afa      	subs	r2, r7, r3
 800482c:	9b06      	ldr	r3, [sp, #24]
 800482e:	4293      	cmp	r3, r2
 8004830:	dd07      	ble.n	8004842 <_dtoa_r+0xb4a>
 8004832:	4651      	mov	r1, sl
 8004834:	2300      	movs	r3, #0
 8004836:	220a      	movs	r2, #10
 8004838:	4628      	mov	r0, r5
 800483a:	f000 f99f 	bl	8004b7c <__multadd>
 800483e:	4682      	mov	sl, r0
 8004840:	e7ea      	b.n	8004818 <_dtoa_r+0xb20>
 8004842:	9b06      	ldr	r3, [sp, #24]
 8004844:	f04f 0800 	mov.w	r8, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	bfcc      	ite	gt
 800484c:	461f      	movgt	r7, r3
 800484e:	2701      	movle	r7, #1
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	441f      	add	r7, r3
 8004854:	4651      	mov	r1, sl
 8004856:	2201      	movs	r2, #1
 8004858:	4628      	mov	r0, r5
 800485a:	f000 fb3b 	bl	8004ed4 <__lshift>
 800485e:	4621      	mov	r1, r4
 8004860:	4682      	mov	sl, r0
 8004862:	f000 fba3 	bl	8004fac <__mcmp>
 8004866:	2800      	cmp	r0, #0
 8004868:	dc97      	bgt.n	800479a <_dtoa_r+0xaa2>
 800486a:	d102      	bne.n	8004872 <_dtoa_r+0xb7a>
 800486c:	f019 0f01 	tst.w	r9, #1
 8004870:	d193      	bne.n	800479a <_dtoa_r+0xaa2>
 8004872:	463b      	mov	r3, r7
 8004874:	461f      	mov	r7, r3
 8004876:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800487a:	2a30      	cmp	r2, #48	; 0x30
 800487c:	d0fa      	beq.n	8004874 <_dtoa_r+0xb7c>
 800487e:	e6e1      	b.n	8004644 <_dtoa_r+0x94c>
 8004880:	9a03      	ldr	r2, [sp, #12]
 8004882:	429a      	cmp	r2, r3
 8004884:	d18a      	bne.n	800479c <_dtoa_r+0xaa4>
 8004886:	2331      	movs	r3, #49	; 0x31
 8004888:	f10b 0b01 	add.w	fp, fp, #1
 800488c:	e797      	b.n	80047be <_dtoa_r+0xac6>
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <_dtoa_r+0xbc0>)
 8004890:	f7ff ba9f 	b.w	8003dd2 <_dtoa_r+0xda>
 8004894:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004896:	2b00      	cmp	r3, #0
 8004898:	f47f aa77 	bne.w	8003d8a <_dtoa_r+0x92>
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <_dtoa_r+0xbc4>)
 800489e:	f7ff ba98 	b.w	8003dd2 <_dtoa_r+0xda>
 80048a2:	9b06      	ldr	r3, [sp, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	dcb6      	bgt.n	8004816 <_dtoa_r+0xb1e>
 80048a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	f73f aeb5 	bgt.w	800461a <_dtoa_r+0x922>
 80048b0:	e7b1      	b.n	8004816 <_dtoa_r+0xb1e>
 80048b2:	bf00      	nop
 80048b4:	08005dba 	.word	0x08005dba
 80048b8:	08005d1a 	.word	0x08005d1a
 80048bc:	08005d3e 	.word	0x08005d3e

080048c0 <_free_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4605      	mov	r5, r0
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d040      	beq.n	800494a <_free_r+0x8a>
 80048c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048cc:	1f0c      	subs	r4, r1, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bfb8      	it	lt
 80048d2:	18e4      	addlt	r4, r4, r3
 80048d4:	f000 f8e4 	bl	8004aa0 <__malloc_lock>
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <_free_r+0x8c>)
 80048da:	6813      	ldr	r3, [r2, #0]
 80048dc:	b933      	cbnz	r3, 80048ec <_free_r+0x2c>
 80048de:	6063      	str	r3, [r4, #4]
 80048e0:	6014      	str	r4, [r2, #0]
 80048e2:	4628      	mov	r0, r5
 80048e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e8:	f000 b8e0 	b.w	8004aac <__malloc_unlock>
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	d908      	bls.n	8004902 <_free_r+0x42>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	1821      	adds	r1, r4, r0
 80048f4:	428b      	cmp	r3, r1
 80048f6:	bf01      	itttt	eq
 80048f8:	6819      	ldreq	r1, [r3, #0]
 80048fa:	685b      	ldreq	r3, [r3, #4]
 80048fc:	1809      	addeq	r1, r1, r0
 80048fe:	6021      	streq	r1, [r4, #0]
 8004900:	e7ed      	b.n	80048de <_free_r+0x1e>
 8004902:	461a      	mov	r2, r3
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b10b      	cbz	r3, 800490c <_free_r+0x4c>
 8004908:	42a3      	cmp	r3, r4
 800490a:	d9fa      	bls.n	8004902 <_free_r+0x42>
 800490c:	6811      	ldr	r1, [r2, #0]
 800490e:	1850      	adds	r0, r2, r1
 8004910:	42a0      	cmp	r0, r4
 8004912:	d10b      	bne.n	800492c <_free_r+0x6c>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	4401      	add	r1, r0
 8004918:	1850      	adds	r0, r2, r1
 800491a:	4283      	cmp	r3, r0
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	d1e0      	bne.n	80048e2 <_free_r+0x22>
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4408      	add	r0, r1
 8004926:	6010      	str	r0, [r2, #0]
 8004928:	6053      	str	r3, [r2, #4]
 800492a:	e7da      	b.n	80048e2 <_free_r+0x22>
 800492c:	d902      	bls.n	8004934 <_free_r+0x74>
 800492e:	230c      	movs	r3, #12
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	e7d6      	b.n	80048e2 <_free_r+0x22>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428b      	cmp	r3, r1
 800493a:	bf01      	itttt	eq
 800493c:	6819      	ldreq	r1, [r3, #0]
 800493e:	685b      	ldreq	r3, [r3, #4]
 8004940:	1809      	addeq	r1, r1, r0
 8004942:	6021      	streq	r1, [r4, #0]
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6054      	str	r4, [r2, #4]
 8004948:	e7cb      	b.n	80048e2 <_free_r+0x22>
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000464 	.word	0x20000464

08004950 <malloc>:
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <malloc+0xc>)
 8004952:	4601      	mov	r1, r0
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f000 b823 	b.w	80049a0 <_malloc_r>
 800495a:	bf00      	nop
 800495c:	2000006c 	.word	0x2000006c

08004960 <sbrk_aligned>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4e0e      	ldr	r6, [pc, #56]	; (800499c <sbrk_aligned+0x3c>)
 8004964:	460c      	mov	r4, r1
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	4605      	mov	r5, r0
 800496a:	b911      	cbnz	r1, 8004972 <sbrk_aligned+0x12>
 800496c:	f000 fe38 	bl	80055e0 <_sbrk_r>
 8004970:	6030      	str	r0, [r6, #0]
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 fe33 	bl	80055e0 <_sbrk_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	d00a      	beq.n	8004994 <sbrk_aligned+0x34>
 800497e:	1cc4      	adds	r4, r0, #3
 8004980:	f024 0403 	bic.w	r4, r4, #3
 8004984:	42a0      	cmp	r0, r4
 8004986:	d007      	beq.n	8004998 <sbrk_aligned+0x38>
 8004988:	1a21      	subs	r1, r4, r0
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fe28 	bl	80055e0 <_sbrk_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d101      	bne.n	8004998 <sbrk_aligned+0x38>
 8004994:	f04f 34ff 	mov.w	r4, #4294967295
 8004998:	4620      	mov	r0, r4
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	20000468 	.word	0x20000468

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4607      	mov	r7, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d905      	bls.n	80049c8 <_malloc_r+0x28>
 80049bc:	230c      	movs	r3, #12
 80049be:	2600      	movs	r6, #0
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4630      	mov	r0, r6
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a9c <_malloc_r+0xfc>
 80049cc:	f000 f868 	bl	8004aa0 <__malloc_lock>
 80049d0:	f8d8 3000 	ldr.w	r3, [r8]
 80049d4:	461c      	mov	r4, r3
 80049d6:	bb5c      	cbnz	r4, 8004a30 <_malloc_r+0x90>
 80049d8:	4629      	mov	r1, r5
 80049da:	4638      	mov	r0, r7
 80049dc:	f7ff ffc0 	bl	8004960 <sbrk_aligned>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	4604      	mov	r4, r0
 80049e4:	d155      	bne.n	8004a92 <_malloc_r+0xf2>
 80049e6:	f8d8 4000 	ldr.w	r4, [r8]
 80049ea:	4626      	mov	r6, r4
 80049ec:	2e00      	cmp	r6, #0
 80049ee:	d145      	bne.n	8004a7c <_malloc_r+0xdc>
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d048      	beq.n	8004a86 <_malloc_r+0xe6>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	4631      	mov	r1, r6
 80049f8:	4638      	mov	r0, r7
 80049fa:	eb04 0903 	add.w	r9, r4, r3
 80049fe:	f000 fdef 	bl	80055e0 <_sbrk_r>
 8004a02:	4581      	cmp	r9, r0
 8004a04:	d13f      	bne.n	8004a86 <_malloc_r+0xe6>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	4638      	mov	r0, r7
 8004a0a:	1a6d      	subs	r5, r5, r1
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7ff ffa7 	bl	8004960 <sbrk_aligned>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d037      	beq.n	8004a86 <_malloc_r+0xe6>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	442b      	add	r3, r5
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d038      	beq.n	8004a96 <_malloc_r+0xf6>
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	d12b      	bne.n	8004a82 <_malloc_r+0xe2>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	e00f      	b.n	8004a50 <_malloc_r+0xb0>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	d41f      	bmi.n	8004a76 <_malloc_r+0xd6>
 8004a36:	2a0b      	cmp	r2, #11
 8004a38:	d917      	bls.n	8004a6a <_malloc_r+0xca>
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	6059      	strne	r1, [r3, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	bf08      	it	eq
 8004a48:	f8c8 1000 	streq.w	r1, [r8]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4638      	mov	r0, r7
 8004a52:	f104 060b 	add.w	r6, r4, #11
 8004a56:	f000 f829 	bl	8004aac <__malloc_unlock>
 8004a5a:	f026 0607 	bic.w	r6, r6, #7
 8004a5e:	1d23      	adds	r3, r4, #4
 8004a60:	1af2      	subs	r2, r6, r3
 8004a62:	d0ae      	beq.n	80049c2 <_malloc_r+0x22>
 8004a64:	1b9b      	subs	r3, r3, r6
 8004a66:	50a3      	str	r3, [r4, r2]
 8004a68:	e7ab      	b.n	80049c2 <_malloc_r+0x22>
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	6862      	ldr	r2, [r4, #4]
 8004a6e:	d1dd      	bne.n	8004a2c <_malloc_r+0x8c>
 8004a70:	f8c8 2000 	str.w	r2, [r8]
 8004a74:	e7ec      	b.n	8004a50 <_malloc_r+0xb0>
 8004a76:	4623      	mov	r3, r4
 8004a78:	6864      	ldr	r4, [r4, #4]
 8004a7a:	e7ac      	b.n	80049d6 <_malloc_r+0x36>
 8004a7c:	4634      	mov	r4, r6
 8004a7e:	6876      	ldr	r6, [r6, #4]
 8004a80:	e7b4      	b.n	80049ec <_malloc_r+0x4c>
 8004a82:	4613      	mov	r3, r2
 8004a84:	e7cc      	b.n	8004a20 <_malloc_r+0x80>
 8004a86:	230c      	movs	r3, #12
 8004a88:	4638      	mov	r0, r7
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	f000 f80e 	bl	8004aac <__malloc_unlock>
 8004a90:	e797      	b.n	80049c2 <_malloc_r+0x22>
 8004a92:	6025      	str	r5, [r4, #0]
 8004a94:	e7dc      	b.n	8004a50 <_malloc_r+0xb0>
 8004a96:	605b      	str	r3, [r3, #4]
 8004a98:	deff      	udf	#255	; 0xff
 8004a9a:	bf00      	nop
 8004a9c:	20000464 	.word	0x20000464

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff b88e 	b.w	8003bc2 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20000460 	.word	0x20000460

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff b889 	b.w	8003bc4 <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000460 	.word	0x20000460

08004ab8 <_Balloc>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	69c6      	ldr	r6, [r0, #28]
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	b976      	cbnz	r6, 8004ae0 <_Balloc+0x28>
 8004ac2:	2010      	movs	r0, #16
 8004ac4:	f7ff ff44 	bl	8004950 <malloc>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	61e0      	str	r0, [r4, #28]
 8004acc:	b920      	cbnz	r0, 8004ad8 <_Balloc+0x20>
 8004ace:	216b      	movs	r1, #107	; 0x6b
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <_Balloc+0x78>)
 8004ad2:	4818      	ldr	r0, [pc, #96]	; (8004b34 <_Balloc+0x7c>)
 8004ad4:	f000 fda2 	bl	800561c <__assert_func>
 8004ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004adc:	6006      	str	r6, [r0, #0]
 8004ade:	60c6      	str	r6, [r0, #12]
 8004ae0:	69e6      	ldr	r6, [r4, #28]
 8004ae2:	68f3      	ldr	r3, [r6, #12]
 8004ae4:	b183      	cbz	r3, 8004b08 <_Balloc+0x50>
 8004ae6:	69e3      	ldr	r3, [r4, #28]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004aee:	b9b8      	cbnz	r0, 8004b20 <_Balloc+0x68>
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f605 	lsl.w	r6, r1, r5
 8004af6:	1d72      	adds	r2, r6, #5
 8004af8:	4620      	mov	r0, r4
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	f000 fdac 	bl	8005658 <_calloc_r>
 8004b00:	b160      	cbz	r0, 8004b1c <_Balloc+0x64>
 8004b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b06:	e00e      	b.n	8004b26 <_Balloc+0x6e>
 8004b08:	2221      	movs	r2, #33	; 0x21
 8004b0a:	2104      	movs	r1, #4
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 fda3 	bl	8005658 <_calloc_r>
 8004b12:	69e3      	ldr	r3, [r4, #28]
 8004b14:	60f0      	str	r0, [r6, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e4      	bne.n	8004ae6 <_Balloc+0x2e>
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	6802      	ldr	r2, [r0, #0]
 8004b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b26:	2300      	movs	r3, #0
 8004b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b2c:	e7f7      	b.n	8004b1e <_Balloc+0x66>
 8004b2e:	bf00      	nop
 8004b30:	08005d4b 	.word	0x08005d4b
 8004b34:	08005dcb 	.word	0x08005dcb

08004b38 <_Bfree>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	69c6      	ldr	r6, [r0, #28]
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	b976      	cbnz	r6, 8004b60 <_Bfree+0x28>
 8004b42:	2010      	movs	r0, #16
 8004b44:	f7ff ff04 	bl	8004950 <malloc>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	61e8      	str	r0, [r5, #28]
 8004b4c:	b920      	cbnz	r0, 8004b58 <_Bfree+0x20>
 8004b4e:	218f      	movs	r1, #143	; 0x8f
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <_Bfree+0x3c>)
 8004b52:	4809      	ldr	r0, [pc, #36]	; (8004b78 <_Bfree+0x40>)
 8004b54:	f000 fd62 	bl	800561c <__assert_func>
 8004b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b5c:	6006      	str	r6, [r0, #0]
 8004b5e:	60c6      	str	r6, [r0, #12]
 8004b60:	b13c      	cbz	r4, 8004b72 <_Bfree+0x3a>
 8004b62:	69eb      	ldr	r3, [r5, #28]
 8004b64:	6862      	ldr	r2, [r4, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b6c:	6021      	str	r1, [r4, #0]
 8004b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	08005d4b 	.word	0x08005d4b
 8004b78:	08005dcb 	.word	0x08005dcb

08004b7c <__multadd>:
 8004b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b80:	4607      	mov	r7, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	461e      	mov	r6, r3
 8004b86:	2000      	movs	r0, #0
 8004b88:	690d      	ldr	r5, [r1, #16]
 8004b8a:	f101 0c14 	add.w	ip, r1, #20
 8004b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8004b92:	3001      	adds	r0, #1
 8004b94:	b299      	uxth	r1, r3
 8004b96:	fb02 6101 	mla	r1, r2, r1, r6
 8004b9a:	0c1e      	lsrs	r6, r3, #16
 8004b9c:	0c0b      	lsrs	r3, r1, #16
 8004b9e:	fb02 3306 	mla	r3, r2, r6, r3
 8004ba2:	b289      	uxth	r1, r1
 8004ba4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ba8:	4285      	cmp	r5, r0
 8004baa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004bae:	f84c 1b04 	str.w	r1, [ip], #4
 8004bb2:	dcec      	bgt.n	8004b8e <__multadd+0x12>
 8004bb4:	b30e      	cbz	r6, 8004bfa <__multadd+0x7e>
 8004bb6:	68a3      	ldr	r3, [r4, #8]
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc19      	bgt.n	8004bf0 <__multadd+0x74>
 8004bbc:	6861      	ldr	r1, [r4, #4]
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	3101      	adds	r1, #1
 8004bc2:	f7ff ff79 	bl	8004ab8 <_Balloc>
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	b928      	cbnz	r0, 8004bd6 <__multadd+0x5a>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	21ba      	movs	r1, #186	; 0xba
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <__multadd+0x84>)
 8004bd0:	480c      	ldr	r0, [pc, #48]	; (8004c04 <__multadd+0x88>)
 8004bd2:	f000 fd23 	bl	800561c <__assert_func>
 8004bd6:	6922      	ldr	r2, [r4, #16]
 8004bd8:	f104 010c 	add.w	r1, r4, #12
 8004bdc:	3202      	adds	r2, #2
 8004bde:	0092      	lsls	r2, r2, #2
 8004be0:	300c      	adds	r0, #12
 8004be2:	f000 fd0d 	bl	8005600 <memcpy>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4638      	mov	r0, r7
 8004bea:	f7ff ffa5 	bl	8004b38 <_Bfree>
 8004bee:	4644      	mov	r4, r8
 8004bf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	615e      	str	r6, [r3, #20]
 8004bf8:	6125      	str	r5, [r4, #16]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c00:	08005dba 	.word	0x08005dba
 8004c04:	08005dcb 	.word	0x08005dcb

08004c08 <__hi0bits>:
 8004c08:	0c02      	lsrs	r2, r0, #16
 8004c0a:	0412      	lsls	r2, r2, #16
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b9ca      	cbnz	r2, 8004c44 <__hi0bits+0x3c>
 8004c10:	0403      	lsls	r3, r0, #16
 8004c12:	2010      	movs	r0, #16
 8004c14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c18:	bf04      	itt	eq
 8004c1a:	021b      	lsleq	r3, r3, #8
 8004c1c:	3008      	addeq	r0, #8
 8004c1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004c22:	bf04      	itt	eq
 8004c24:	011b      	lsleq	r3, r3, #4
 8004c26:	3004      	addeq	r0, #4
 8004c28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004c2c:	bf04      	itt	eq
 8004c2e:	009b      	lsleq	r3, r3, #2
 8004c30:	3002      	addeq	r0, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db05      	blt.n	8004c42 <__hi0bits+0x3a>
 8004c36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004c3a:	f100 0001 	add.w	r0, r0, #1
 8004c3e:	bf08      	it	eq
 8004c40:	2020      	moveq	r0, #32
 8004c42:	4770      	bx	lr
 8004c44:	2000      	movs	r0, #0
 8004c46:	e7e5      	b.n	8004c14 <__hi0bits+0xc>

08004c48 <__lo0bits>:
 8004c48:	6803      	ldr	r3, [r0, #0]
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	f013 0007 	ands.w	r0, r3, #7
 8004c50:	d00b      	beq.n	8004c6a <__lo0bits+0x22>
 8004c52:	07d9      	lsls	r1, r3, #31
 8004c54:	d421      	bmi.n	8004c9a <__lo0bits+0x52>
 8004c56:	0798      	lsls	r0, r3, #30
 8004c58:	bf49      	itett	mi
 8004c5a:	085b      	lsrmi	r3, r3, #1
 8004c5c:	089b      	lsrpl	r3, r3, #2
 8004c5e:	2001      	movmi	r0, #1
 8004c60:	6013      	strmi	r3, [r2, #0]
 8004c62:	bf5c      	itt	pl
 8004c64:	2002      	movpl	r0, #2
 8004c66:	6013      	strpl	r3, [r2, #0]
 8004c68:	4770      	bx	lr
 8004c6a:	b299      	uxth	r1, r3
 8004c6c:	b909      	cbnz	r1, 8004c72 <__lo0bits+0x2a>
 8004c6e:	2010      	movs	r0, #16
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	b2d9      	uxtb	r1, r3
 8004c74:	b909      	cbnz	r1, 8004c7a <__lo0bits+0x32>
 8004c76:	3008      	adds	r0, #8
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	0719      	lsls	r1, r3, #28
 8004c7c:	bf04      	itt	eq
 8004c7e:	091b      	lsreq	r3, r3, #4
 8004c80:	3004      	addeq	r0, #4
 8004c82:	0799      	lsls	r1, r3, #30
 8004c84:	bf04      	itt	eq
 8004c86:	089b      	lsreq	r3, r3, #2
 8004c88:	3002      	addeq	r0, #2
 8004c8a:	07d9      	lsls	r1, r3, #31
 8004c8c:	d403      	bmi.n	8004c96 <__lo0bits+0x4e>
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	f100 0001 	add.w	r0, r0, #1
 8004c94:	d003      	beq.n	8004c9e <__lo0bits+0x56>
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4770      	bx	lr
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	4770      	bx	lr
 8004c9e:	2020      	movs	r0, #32
 8004ca0:	4770      	bx	lr
	...

08004ca4 <__i2b>:
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	2101      	movs	r1, #1
 8004caa:	f7ff ff05 	bl	8004ab8 <_Balloc>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	b928      	cbnz	r0, 8004cbe <__i2b+0x1a>
 8004cb2:	f240 1145 	movw	r1, #325	; 0x145
 8004cb6:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <__i2b+0x24>)
 8004cb8:	4804      	ldr	r0, [pc, #16]	; (8004ccc <__i2b+0x28>)
 8004cba:	f000 fcaf 	bl	800561c <__assert_func>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	6144      	str	r4, [r0, #20]
 8004cc2:	6103      	str	r3, [r0, #16]
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	bf00      	nop
 8004cc8:	08005dba 	.word	0x08005dba
 8004ccc:	08005dcb 	.word	0x08005dcb

08004cd0 <__multiply>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	4691      	mov	r9, r2
 8004cd6:	690a      	ldr	r2, [r1, #16]
 8004cd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004cdc:	460c      	mov	r4, r1
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	bfbe      	ittt	lt
 8004ce2:	460b      	movlt	r3, r1
 8004ce4:	464c      	movlt	r4, r9
 8004ce6:	4699      	movlt	r9, r3
 8004ce8:	6927      	ldr	r7, [r4, #16]
 8004cea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	eb07 060a 	add.w	r6, r7, sl
 8004cf6:	42b3      	cmp	r3, r6
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	bfb8      	it	lt
 8004cfc:	3101      	addlt	r1, #1
 8004cfe:	f7ff fedb 	bl	8004ab8 <_Balloc>
 8004d02:	b930      	cbnz	r0, 8004d12 <__multiply+0x42>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004d0a:	4b43      	ldr	r3, [pc, #268]	; (8004e18 <__multiply+0x148>)
 8004d0c:	4843      	ldr	r0, [pc, #268]	; (8004e1c <__multiply+0x14c>)
 8004d0e:	f000 fc85 	bl	800561c <__assert_func>
 8004d12:	f100 0514 	add.w	r5, r0, #20
 8004d16:	462b      	mov	r3, r5
 8004d18:	2200      	movs	r2, #0
 8004d1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d1e:	4543      	cmp	r3, r8
 8004d20:	d321      	bcc.n	8004d66 <__multiply+0x96>
 8004d22:	f104 0314 	add.w	r3, r4, #20
 8004d26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004d2a:	f109 0314 	add.w	r3, r9, #20
 8004d2e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004d32:	9202      	str	r2, [sp, #8]
 8004d34:	1b3a      	subs	r2, r7, r4
 8004d36:	3a15      	subs	r2, #21
 8004d38:	f022 0203 	bic.w	r2, r2, #3
 8004d3c:	3204      	adds	r2, #4
 8004d3e:	f104 0115 	add.w	r1, r4, #21
 8004d42:	428f      	cmp	r7, r1
 8004d44:	bf38      	it	cc
 8004d46:	2204      	movcc	r2, #4
 8004d48:	9201      	str	r2, [sp, #4]
 8004d4a:	9a02      	ldr	r2, [sp, #8]
 8004d4c:	9303      	str	r3, [sp, #12]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d80c      	bhi.n	8004d6c <__multiply+0x9c>
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	dd03      	ble.n	8004d5e <__multiply+0x8e>
 8004d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d05a      	beq.n	8004e14 <__multiply+0x144>
 8004d5e:	6106      	str	r6, [r0, #16]
 8004d60:	b005      	add	sp, #20
 8004d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d66:	f843 2b04 	str.w	r2, [r3], #4
 8004d6a:	e7d8      	b.n	8004d1e <__multiply+0x4e>
 8004d6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d70:	f1ba 0f00 	cmp.w	sl, #0
 8004d74:	d023      	beq.n	8004dbe <__multiply+0xee>
 8004d76:	46a9      	mov	r9, r5
 8004d78:	f04f 0c00 	mov.w	ip, #0
 8004d7c:	f104 0e14 	add.w	lr, r4, #20
 8004d80:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d84:	f8d9 1000 	ldr.w	r1, [r9]
 8004d88:	fa1f fb82 	uxth.w	fp, r2
 8004d8c:	b289      	uxth	r1, r1
 8004d8e:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d92:	4461      	add	r1, ip
 8004d94:	f8d9 c000 	ldr.w	ip, [r9]
 8004d98:	0c12      	lsrs	r2, r2, #16
 8004d9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d9e:	fb0a c202 	mla	r2, sl, r2, ip
 8004da2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004da6:	b289      	uxth	r1, r1
 8004da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004dac:	4577      	cmp	r7, lr
 8004dae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004db2:	f849 1b04 	str.w	r1, [r9], #4
 8004db6:	d8e3      	bhi.n	8004d80 <__multiply+0xb0>
 8004db8:	9a01      	ldr	r2, [sp, #4]
 8004dba:	f845 c002 	str.w	ip, [r5, r2]
 8004dbe:	9a03      	ldr	r2, [sp, #12]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004dc6:	f1b9 0f00 	cmp.w	r9, #0
 8004dca:	d021      	beq.n	8004e10 <__multiply+0x140>
 8004dcc:	46ae      	mov	lr, r5
 8004dce:	f04f 0a00 	mov.w	sl, #0
 8004dd2:	6829      	ldr	r1, [r5, #0]
 8004dd4:	f104 0c14 	add.w	ip, r4, #20
 8004dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8004ddc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004de0:	b289      	uxth	r1, r1
 8004de2:	fb09 220b 	mla	r2, r9, fp, r2
 8004de6:	4452      	add	r2, sl
 8004de8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004dec:	f84e 1b04 	str.w	r1, [lr], #4
 8004df0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004df8:	f8be 1000 	ldrh.w	r1, [lr]
 8004dfc:	4567      	cmp	r7, ip
 8004dfe:	fb09 110a 	mla	r1, r9, sl, r1
 8004e02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004e06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e0a:	d8e5      	bhi.n	8004dd8 <__multiply+0x108>
 8004e0c:	9a01      	ldr	r2, [sp, #4]
 8004e0e:	50a9      	str	r1, [r5, r2]
 8004e10:	3504      	adds	r5, #4
 8004e12:	e79a      	b.n	8004d4a <__multiply+0x7a>
 8004e14:	3e01      	subs	r6, #1
 8004e16:	e79c      	b.n	8004d52 <__multiply+0x82>
 8004e18:	08005dba 	.word	0x08005dba
 8004e1c:	08005dcb 	.word	0x08005dcb

08004e20 <__pow5mult>:
 8004e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e24:	4615      	mov	r5, r2
 8004e26:	f012 0203 	ands.w	r2, r2, #3
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	d007      	beq.n	8004e40 <__pow5mult+0x20>
 8004e30:	4c25      	ldr	r4, [pc, #148]	; (8004ec8 <__pow5mult+0xa8>)
 8004e32:	3a01      	subs	r2, #1
 8004e34:	2300      	movs	r3, #0
 8004e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e3a:	f7ff fe9f 	bl	8004b7c <__multadd>
 8004e3e:	4607      	mov	r7, r0
 8004e40:	10ad      	asrs	r5, r5, #2
 8004e42:	d03d      	beq.n	8004ec0 <__pow5mult+0xa0>
 8004e44:	69f4      	ldr	r4, [r6, #28]
 8004e46:	b97c      	cbnz	r4, 8004e68 <__pow5mult+0x48>
 8004e48:	2010      	movs	r0, #16
 8004e4a:	f7ff fd81 	bl	8004950 <malloc>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	61f0      	str	r0, [r6, #28]
 8004e52:	b928      	cbnz	r0, 8004e60 <__pow5mult+0x40>
 8004e54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004e58:	4b1c      	ldr	r3, [pc, #112]	; (8004ecc <__pow5mult+0xac>)
 8004e5a:	481d      	ldr	r0, [pc, #116]	; (8004ed0 <__pow5mult+0xb0>)
 8004e5c:	f000 fbde 	bl	800561c <__assert_func>
 8004e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e64:	6004      	str	r4, [r0, #0]
 8004e66:	60c4      	str	r4, [r0, #12]
 8004e68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e70:	b94c      	cbnz	r4, 8004e86 <__pow5mult+0x66>
 8004e72:	f240 2171 	movw	r1, #625	; 0x271
 8004e76:	4630      	mov	r0, r6
 8004e78:	f7ff ff14 	bl	8004ca4 <__i2b>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e84:	6003      	str	r3, [r0, #0]
 8004e86:	f04f 0900 	mov.w	r9, #0
 8004e8a:	07eb      	lsls	r3, r5, #31
 8004e8c:	d50a      	bpl.n	8004ea4 <__pow5mult+0x84>
 8004e8e:	4639      	mov	r1, r7
 8004e90:	4622      	mov	r2, r4
 8004e92:	4630      	mov	r0, r6
 8004e94:	f7ff ff1c 	bl	8004cd0 <__multiply>
 8004e98:	4680      	mov	r8, r0
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f7ff fe4b 	bl	8004b38 <_Bfree>
 8004ea2:	4647      	mov	r7, r8
 8004ea4:	106d      	asrs	r5, r5, #1
 8004ea6:	d00b      	beq.n	8004ec0 <__pow5mult+0xa0>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	b938      	cbnz	r0, 8004ebc <__pow5mult+0x9c>
 8004eac:	4622      	mov	r2, r4
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7ff ff0d 	bl	8004cd0 <__multiply>
 8004eb6:	6020      	str	r0, [r4, #0]
 8004eb8:	f8c0 9000 	str.w	r9, [r0]
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	e7e4      	b.n	8004e8a <__pow5mult+0x6a>
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08005f18 	.word	0x08005f18
 8004ecc:	08005d4b 	.word	0x08005d4b
 8004ed0:	08005dcb 	.word	0x08005dcb

08004ed4 <__lshift>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	460c      	mov	r4, r1
 8004eda:	4607      	mov	r7, r0
 8004edc:	4691      	mov	r9, r2
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	6849      	ldr	r1, [r1, #4]
 8004ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004eec:	f108 0601 	add.w	r6, r8, #1
 8004ef0:	42b3      	cmp	r3, r6
 8004ef2:	db0b      	blt.n	8004f0c <__lshift+0x38>
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	f7ff fddf 	bl	8004ab8 <_Balloc>
 8004efa:	4605      	mov	r5, r0
 8004efc:	b948      	cbnz	r0, 8004f12 <__lshift+0x3e>
 8004efe:	4602      	mov	r2, r0
 8004f00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004f04:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <__lshift+0xd0>)
 8004f06:	4828      	ldr	r0, [pc, #160]	; (8004fa8 <__lshift+0xd4>)
 8004f08:	f000 fb88 	bl	800561c <__assert_func>
 8004f0c:	3101      	adds	r1, #1
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	e7ee      	b.n	8004ef0 <__lshift+0x1c>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f100 0114 	add.w	r1, r0, #20
 8004f18:	f100 0210 	add.w	r2, r0, #16
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	4553      	cmp	r3, sl
 8004f20:	db33      	blt.n	8004f8a <__lshift+0xb6>
 8004f22:	6920      	ldr	r0, [r4, #16]
 8004f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f28:	f104 0314 	add.w	r3, r4, #20
 8004f2c:	f019 091f 	ands.w	r9, r9, #31
 8004f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f38:	d02b      	beq.n	8004f92 <__lshift+0xbe>
 8004f3a:	468a      	mov	sl, r1
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	fa00 f009 	lsl.w	r0, r0, r9
 8004f48:	4310      	orrs	r0, r2
 8004f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8004f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f52:	459c      	cmp	ip, r3
 8004f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f58:	d8f3      	bhi.n	8004f42 <__lshift+0x6e>
 8004f5a:	ebac 0304 	sub.w	r3, ip, r4
 8004f5e:	3b15      	subs	r3, #21
 8004f60:	f023 0303 	bic.w	r3, r3, #3
 8004f64:	3304      	adds	r3, #4
 8004f66:	f104 0015 	add.w	r0, r4, #21
 8004f6a:	4584      	cmp	ip, r0
 8004f6c:	bf38      	it	cc
 8004f6e:	2304      	movcc	r3, #4
 8004f70:	50ca      	str	r2, [r1, r3]
 8004f72:	b10a      	cbz	r2, 8004f78 <__lshift+0xa4>
 8004f74:	f108 0602 	add.w	r6, r8, #2
 8004f78:	3e01      	subs	r6, #1
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	612e      	str	r6, [r5, #16]
 8004f80:	f7ff fdda 	bl	8004b38 <_Bfree>
 8004f84:	4628      	mov	r0, r5
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f8e:	3301      	adds	r3, #1
 8004f90:	e7c5      	b.n	8004f1e <__lshift+0x4a>
 8004f92:	3904      	subs	r1, #4
 8004f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f98:	459c      	cmp	ip, r3
 8004f9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f9e:	d8f9      	bhi.n	8004f94 <__lshift+0xc0>
 8004fa0:	e7ea      	b.n	8004f78 <__lshift+0xa4>
 8004fa2:	bf00      	nop
 8004fa4:	08005dba 	.word	0x08005dba
 8004fa8:	08005dcb 	.word	0x08005dcb

08004fac <__mcmp>:
 8004fac:	4603      	mov	r3, r0
 8004fae:	690a      	ldr	r2, [r1, #16]
 8004fb0:	6900      	ldr	r0, [r0, #16]
 8004fb2:	b530      	push	{r4, r5, lr}
 8004fb4:	1a80      	subs	r0, r0, r2
 8004fb6:	d10d      	bne.n	8004fd4 <__mcmp+0x28>
 8004fb8:	3314      	adds	r3, #20
 8004fba:	3114      	adds	r1, #20
 8004fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fcc:	4295      	cmp	r5, r2
 8004fce:	d002      	beq.n	8004fd6 <__mcmp+0x2a>
 8004fd0:	d304      	bcc.n	8004fdc <__mcmp+0x30>
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	bd30      	pop	{r4, r5, pc}
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	d3f4      	bcc.n	8004fc4 <__mcmp+0x18>
 8004fda:	e7fb      	b.n	8004fd4 <__mcmp+0x28>
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	e7f8      	b.n	8004fd4 <__mcmp+0x28>
	...

08004fe4 <__mdiff>:
 8004fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	460d      	mov	r5, r1
 8004fea:	4607      	mov	r7, r0
 8004fec:	4611      	mov	r1, r2
 8004fee:	4628      	mov	r0, r5
 8004ff0:	4614      	mov	r4, r2
 8004ff2:	f7ff ffdb 	bl	8004fac <__mcmp>
 8004ff6:	1e06      	subs	r6, r0, #0
 8004ff8:	d111      	bne.n	800501e <__mdiff+0x3a>
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7ff fd5b 	bl	8004ab8 <_Balloc>
 8005002:	4602      	mov	r2, r0
 8005004:	b928      	cbnz	r0, 8005012 <__mdiff+0x2e>
 8005006:	f240 2137 	movw	r1, #567	; 0x237
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <__mdiff+0x110>)
 800500c:	483a      	ldr	r0, [pc, #232]	; (80050f8 <__mdiff+0x114>)
 800500e:	f000 fb05 	bl	800561c <__assert_func>
 8005012:	2301      	movs	r3, #1
 8005014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005018:	4610      	mov	r0, r2
 800501a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	bfa4      	itt	ge
 8005020:	4623      	movge	r3, r4
 8005022:	462c      	movge	r4, r5
 8005024:	4638      	mov	r0, r7
 8005026:	6861      	ldr	r1, [r4, #4]
 8005028:	bfa6      	itte	ge
 800502a:	461d      	movge	r5, r3
 800502c:	2600      	movge	r6, #0
 800502e:	2601      	movlt	r6, #1
 8005030:	f7ff fd42 	bl	8004ab8 <_Balloc>
 8005034:	4602      	mov	r2, r0
 8005036:	b918      	cbnz	r0, 8005040 <__mdiff+0x5c>
 8005038:	f240 2145 	movw	r1, #581	; 0x245
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <__mdiff+0x110>)
 800503e:	e7e5      	b.n	800500c <__mdiff+0x28>
 8005040:	f102 0814 	add.w	r8, r2, #20
 8005044:	46c2      	mov	sl, r8
 8005046:	f04f 0c00 	mov.w	ip, #0
 800504a:	6927      	ldr	r7, [r4, #16]
 800504c:	60c6      	str	r6, [r0, #12]
 800504e:	692e      	ldr	r6, [r5, #16]
 8005050:	f104 0014 	add.w	r0, r4, #20
 8005054:	f105 0914 	add.w	r9, r5, #20
 8005058:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800505c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005060:	3410      	adds	r4, #16
 8005062:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005066:	f859 3b04 	ldr.w	r3, [r9], #4
 800506a:	fa1f f18b 	uxth.w	r1, fp
 800506e:	4461      	add	r1, ip
 8005070:	fa1f fc83 	uxth.w	ip, r3
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	eba1 010c 	sub.w	r1, r1, ip
 800507a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800507e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005082:	b289      	uxth	r1, r1
 8005084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005088:	454e      	cmp	r6, r9
 800508a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800508e:	f84a 1b04 	str.w	r1, [sl], #4
 8005092:	d8e6      	bhi.n	8005062 <__mdiff+0x7e>
 8005094:	1b73      	subs	r3, r6, r5
 8005096:	3b15      	subs	r3, #21
 8005098:	f023 0303 	bic.w	r3, r3, #3
 800509c:	3515      	adds	r5, #21
 800509e:	3304      	adds	r3, #4
 80050a0:	42ae      	cmp	r6, r5
 80050a2:	bf38      	it	cc
 80050a4:	2304      	movcc	r3, #4
 80050a6:	4418      	add	r0, r3
 80050a8:	4443      	add	r3, r8
 80050aa:	461e      	mov	r6, r3
 80050ac:	4605      	mov	r5, r0
 80050ae:	4575      	cmp	r5, lr
 80050b0:	d30e      	bcc.n	80050d0 <__mdiff+0xec>
 80050b2:	f10e 0103 	add.w	r1, lr, #3
 80050b6:	1a09      	subs	r1, r1, r0
 80050b8:	f021 0103 	bic.w	r1, r1, #3
 80050bc:	3803      	subs	r0, #3
 80050be:	4586      	cmp	lr, r0
 80050c0:	bf38      	it	cc
 80050c2:	2100      	movcc	r1, #0
 80050c4:	440b      	add	r3, r1
 80050c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050ca:	b189      	cbz	r1, 80050f0 <__mdiff+0x10c>
 80050cc:	6117      	str	r7, [r2, #16]
 80050ce:	e7a3      	b.n	8005018 <__mdiff+0x34>
 80050d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80050d4:	fa1f f188 	uxth.w	r1, r8
 80050d8:	4461      	add	r1, ip
 80050da:	140c      	asrs	r4, r1, #16
 80050dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80050e0:	b289      	uxth	r1, r1
 80050e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80050e6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80050ea:	f846 1b04 	str.w	r1, [r6], #4
 80050ee:	e7de      	b.n	80050ae <__mdiff+0xca>
 80050f0:	3f01      	subs	r7, #1
 80050f2:	e7e8      	b.n	80050c6 <__mdiff+0xe2>
 80050f4:	08005dba 	.word	0x08005dba
 80050f8:	08005dcb 	.word	0x08005dcb

080050fc <__d2b>:
 80050fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fe:	2101      	movs	r1, #1
 8005100:	4617      	mov	r7, r2
 8005102:	461c      	mov	r4, r3
 8005104:	9e08      	ldr	r6, [sp, #32]
 8005106:	f7ff fcd7 	bl	8004ab8 <_Balloc>
 800510a:	4605      	mov	r5, r0
 800510c:	b930      	cbnz	r0, 800511c <__d2b+0x20>
 800510e:	4602      	mov	r2, r0
 8005110:	f240 310f 	movw	r1, #783	; 0x30f
 8005114:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <__d2b+0xa4>)
 8005116:	4823      	ldr	r0, [pc, #140]	; (80051a4 <__d2b+0xa8>)
 8005118:	f000 fa80 	bl	800561c <__assert_func>
 800511c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005120:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005124:	bb24      	cbnz	r4, 8005170 <__d2b+0x74>
 8005126:	2f00      	cmp	r7, #0
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	d026      	beq.n	800517a <__d2b+0x7e>
 800512c:	4668      	mov	r0, sp
 800512e:	9700      	str	r7, [sp, #0]
 8005130:	f7ff fd8a 	bl	8004c48 <__lo0bits>
 8005134:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005138:	b1e8      	cbz	r0, 8005176 <__d2b+0x7a>
 800513a:	f1c0 0320 	rsb	r3, r0, #32
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	430b      	orrs	r3, r1
 8005144:	40c2      	lsrs	r2, r0
 8005146:	616b      	str	r3, [r5, #20]
 8005148:	9201      	str	r2, [sp, #4]
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf14      	ite	ne
 8005150:	2102      	movne	r1, #2
 8005152:	2101      	moveq	r1, #1
 8005154:	61ab      	str	r3, [r5, #24]
 8005156:	6129      	str	r1, [r5, #16]
 8005158:	b1bc      	cbz	r4, 800518a <__d2b+0x8e>
 800515a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800515e:	4404      	add	r4, r0
 8005160:	6034      	str	r4, [r6, #0]
 8005162:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005168:	6018      	str	r0, [r3, #0]
 800516a:	4628      	mov	r0, r5
 800516c:	b003      	add	sp, #12
 800516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005174:	e7d7      	b.n	8005126 <__d2b+0x2a>
 8005176:	6169      	str	r1, [r5, #20]
 8005178:	e7e7      	b.n	800514a <__d2b+0x4e>
 800517a:	a801      	add	r0, sp, #4
 800517c:	f7ff fd64 	bl	8004c48 <__lo0bits>
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	2101      	movs	r1, #1
 8005184:	616b      	str	r3, [r5, #20]
 8005186:	3020      	adds	r0, #32
 8005188:	e7e5      	b.n	8005156 <__d2b+0x5a>
 800518a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800518e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005192:	6030      	str	r0, [r6, #0]
 8005194:	6918      	ldr	r0, [r3, #16]
 8005196:	f7ff fd37 	bl	8004c08 <__hi0bits>
 800519a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800519e:	e7e2      	b.n	8005166 <__d2b+0x6a>
 80051a0:	08005dba 	.word	0x08005dba
 80051a4:	08005dcb 	.word	0x08005dcb

080051a8 <__ssputs_r>:
 80051a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	461f      	mov	r7, r3
 80051ae:	688e      	ldr	r6, [r1, #8]
 80051b0:	4682      	mov	sl, r0
 80051b2:	42be      	cmp	r6, r7
 80051b4:	460c      	mov	r4, r1
 80051b6:	4690      	mov	r8, r2
 80051b8:	680b      	ldr	r3, [r1, #0]
 80051ba:	d82c      	bhi.n	8005216 <__ssputs_r+0x6e>
 80051bc:	898a      	ldrh	r2, [r1, #12]
 80051be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051c2:	d026      	beq.n	8005212 <__ssputs_r+0x6a>
 80051c4:	6965      	ldr	r5, [r4, #20]
 80051c6:	6909      	ldr	r1, [r1, #16]
 80051c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051cc:	eba3 0901 	sub.w	r9, r3, r1
 80051d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051d4:	1c7b      	adds	r3, r7, #1
 80051d6:	444b      	add	r3, r9
 80051d8:	106d      	asrs	r5, r5, #1
 80051da:	429d      	cmp	r5, r3
 80051dc:	bf38      	it	cc
 80051de:	461d      	movcc	r5, r3
 80051e0:	0553      	lsls	r3, r2, #21
 80051e2:	d527      	bpl.n	8005234 <__ssputs_r+0x8c>
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7ff fbdb 	bl	80049a0 <_malloc_r>
 80051ea:	4606      	mov	r6, r0
 80051ec:	b360      	cbz	r0, 8005248 <__ssputs_r+0xa0>
 80051ee:	464a      	mov	r2, r9
 80051f0:	6921      	ldr	r1, [r4, #16]
 80051f2:	f000 fa05 	bl	8005600 <memcpy>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	6126      	str	r6, [r4, #16]
 8005204:	444e      	add	r6, r9
 8005206:	6026      	str	r6, [r4, #0]
 8005208:	463e      	mov	r6, r7
 800520a:	6165      	str	r5, [r4, #20]
 800520c:	eba5 0509 	sub.w	r5, r5, r9
 8005210:	60a5      	str	r5, [r4, #8]
 8005212:	42be      	cmp	r6, r7
 8005214:	d900      	bls.n	8005218 <__ssputs_r+0x70>
 8005216:	463e      	mov	r6, r7
 8005218:	4632      	mov	r2, r6
 800521a:	4641      	mov	r1, r8
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	f000 f9c5 	bl	80055ac <memmove>
 8005222:	2000      	movs	r0, #0
 8005224:	68a3      	ldr	r3, [r4, #8]
 8005226:	1b9b      	subs	r3, r3, r6
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	4433      	add	r3, r6
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005234:	462a      	mov	r2, r5
 8005236:	f000 fa35 	bl	80056a4 <_realloc_r>
 800523a:	4606      	mov	r6, r0
 800523c:	2800      	cmp	r0, #0
 800523e:	d1e0      	bne.n	8005202 <__ssputs_r+0x5a>
 8005240:	4650      	mov	r0, sl
 8005242:	6921      	ldr	r1, [r4, #16]
 8005244:	f7ff fb3c 	bl	80048c0 <_free_r>
 8005248:	230c      	movs	r3, #12
 800524a:	f8ca 3000 	str.w	r3, [sl]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	e7e9      	b.n	8005230 <__ssputs_r+0x88>

0800525c <_svfiprintf_r>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	4698      	mov	r8, r3
 8005262:	898b      	ldrh	r3, [r1, #12]
 8005264:	4607      	mov	r7, r0
 8005266:	061b      	lsls	r3, r3, #24
 8005268:	460d      	mov	r5, r1
 800526a:	4614      	mov	r4, r2
 800526c:	b09d      	sub	sp, #116	; 0x74
 800526e:	d50e      	bpl.n	800528e <_svfiprintf_r+0x32>
 8005270:	690b      	ldr	r3, [r1, #16]
 8005272:	b963      	cbnz	r3, 800528e <_svfiprintf_r+0x32>
 8005274:	2140      	movs	r1, #64	; 0x40
 8005276:	f7ff fb93 	bl	80049a0 <_malloc_r>
 800527a:	6028      	str	r0, [r5, #0]
 800527c:	6128      	str	r0, [r5, #16]
 800527e:	b920      	cbnz	r0, 800528a <_svfiprintf_r+0x2e>
 8005280:	230c      	movs	r3, #12
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	e0d0      	b.n	800542c <_svfiprintf_r+0x1d0>
 800528a:	2340      	movs	r3, #64	; 0x40
 800528c:	616b      	str	r3, [r5, #20]
 800528e:	2300      	movs	r3, #0
 8005290:	9309      	str	r3, [sp, #36]	; 0x24
 8005292:	2320      	movs	r3, #32
 8005294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005298:	2330      	movs	r3, #48	; 0x30
 800529a:	f04f 0901 	mov.w	r9, #1
 800529e:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005444 <_svfiprintf_r+0x1e8>
 80052a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052aa:	4623      	mov	r3, r4
 80052ac:	469a      	mov	sl, r3
 80052ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052b2:	b10a      	cbz	r2, 80052b8 <_svfiprintf_r+0x5c>
 80052b4:	2a25      	cmp	r2, #37	; 0x25
 80052b6:	d1f9      	bne.n	80052ac <_svfiprintf_r+0x50>
 80052b8:	ebba 0b04 	subs.w	fp, sl, r4
 80052bc:	d00b      	beq.n	80052d6 <_svfiprintf_r+0x7a>
 80052be:	465b      	mov	r3, fp
 80052c0:	4622      	mov	r2, r4
 80052c2:	4629      	mov	r1, r5
 80052c4:	4638      	mov	r0, r7
 80052c6:	f7ff ff6f 	bl	80051a8 <__ssputs_r>
 80052ca:	3001      	adds	r0, #1
 80052cc:	f000 80a9 	beq.w	8005422 <_svfiprintf_r+0x1c6>
 80052d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d2:	445a      	add	r2, fp
 80052d4:	9209      	str	r2, [sp, #36]	; 0x24
 80052d6:	f89a 3000 	ldrb.w	r3, [sl]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80a1 	beq.w	8005422 <_svfiprintf_r+0x1c6>
 80052e0:	2300      	movs	r3, #0
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295
 80052e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ea:	f10a 0a01 	add.w	sl, sl, #1
 80052ee:	9304      	str	r3, [sp, #16]
 80052f0:	9307      	str	r3, [sp, #28]
 80052f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052f6:	931a      	str	r3, [sp, #104]	; 0x68
 80052f8:	4654      	mov	r4, sl
 80052fa:	2205      	movs	r2, #5
 80052fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005300:	4850      	ldr	r0, [pc, #320]	; (8005444 <_svfiprintf_r+0x1e8>)
 8005302:	f7fe fc60 	bl	8003bc6 <memchr>
 8005306:	9a04      	ldr	r2, [sp, #16]
 8005308:	b9d8      	cbnz	r0, 8005342 <_svfiprintf_r+0xe6>
 800530a:	06d0      	lsls	r0, r2, #27
 800530c:	bf44      	itt	mi
 800530e:	2320      	movmi	r3, #32
 8005310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005314:	0711      	lsls	r1, r2, #28
 8005316:	bf44      	itt	mi
 8005318:	232b      	movmi	r3, #43	; 0x2b
 800531a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531e:	f89a 3000 	ldrb.w	r3, [sl]
 8005322:	2b2a      	cmp	r3, #42	; 0x2a
 8005324:	d015      	beq.n	8005352 <_svfiprintf_r+0xf6>
 8005326:	4654      	mov	r4, sl
 8005328:	2000      	movs	r0, #0
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	4621      	mov	r1, r4
 8005332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005336:	3b30      	subs	r3, #48	; 0x30
 8005338:	2b09      	cmp	r3, #9
 800533a:	d94d      	bls.n	80053d8 <_svfiprintf_r+0x17c>
 800533c:	b1b0      	cbz	r0, 800536c <_svfiprintf_r+0x110>
 800533e:	9207      	str	r2, [sp, #28]
 8005340:	e014      	b.n	800536c <_svfiprintf_r+0x110>
 8005342:	eba0 0308 	sub.w	r3, r0, r8
 8005346:	fa09 f303 	lsl.w	r3, r9, r3
 800534a:	4313      	orrs	r3, r2
 800534c:	46a2      	mov	sl, r4
 800534e:	9304      	str	r3, [sp, #16]
 8005350:	e7d2      	b.n	80052f8 <_svfiprintf_r+0x9c>
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	9103      	str	r1, [sp, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfbb      	ittet	lt
 800535e:	425b      	neglt	r3, r3
 8005360:	f042 0202 	orrlt.w	r2, r2, #2
 8005364:	9307      	strge	r3, [sp, #28]
 8005366:	9307      	strlt	r3, [sp, #28]
 8005368:	bfb8      	it	lt
 800536a:	9204      	strlt	r2, [sp, #16]
 800536c:	7823      	ldrb	r3, [r4, #0]
 800536e:	2b2e      	cmp	r3, #46	; 0x2e
 8005370:	d10c      	bne.n	800538c <_svfiprintf_r+0x130>
 8005372:	7863      	ldrb	r3, [r4, #1]
 8005374:	2b2a      	cmp	r3, #42	; 0x2a
 8005376:	d134      	bne.n	80053e2 <_svfiprintf_r+0x186>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	3402      	adds	r4, #2
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	9203      	str	r2, [sp, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	bfb8      	it	lt
 8005386:	f04f 33ff 	movlt.w	r3, #4294967295
 800538a:	9305      	str	r3, [sp, #20]
 800538c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005448 <_svfiprintf_r+0x1ec>
 8005390:	2203      	movs	r2, #3
 8005392:	4650      	mov	r0, sl
 8005394:	7821      	ldrb	r1, [r4, #0]
 8005396:	f7fe fc16 	bl	8003bc6 <memchr>
 800539a:	b138      	cbz	r0, 80053ac <_svfiprintf_r+0x150>
 800539c:	2240      	movs	r2, #64	; 0x40
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	eba0 000a 	sub.w	r0, r0, sl
 80053a4:	4082      	lsls	r2, r0
 80053a6:	4313      	orrs	r3, r2
 80053a8:	3401      	adds	r4, #1
 80053aa:	9304      	str	r3, [sp, #16]
 80053ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b0:	2206      	movs	r2, #6
 80053b2:	4826      	ldr	r0, [pc, #152]	; (800544c <_svfiprintf_r+0x1f0>)
 80053b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053b8:	f7fe fc05 	bl	8003bc6 <memchr>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d038      	beq.n	8005432 <_svfiprintf_r+0x1d6>
 80053c0:	4b23      	ldr	r3, [pc, #140]	; (8005450 <_svfiprintf_r+0x1f4>)
 80053c2:	bb1b      	cbnz	r3, 800540c <_svfiprintf_r+0x1b0>
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	3307      	adds	r3, #7
 80053c8:	f023 0307 	bic.w	r3, r3, #7
 80053cc:	3308      	adds	r3, #8
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d2:	4433      	add	r3, r6
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	e768      	b.n	80052aa <_svfiprintf_r+0x4e>
 80053d8:	460c      	mov	r4, r1
 80053da:	2001      	movs	r0, #1
 80053dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e0:	e7a6      	b.n	8005330 <_svfiprintf_r+0xd4>
 80053e2:	2300      	movs	r3, #0
 80053e4:	f04f 0c0a 	mov.w	ip, #10
 80053e8:	4619      	mov	r1, r3
 80053ea:	3401      	adds	r4, #1
 80053ec:	9305      	str	r3, [sp, #20]
 80053ee:	4620      	mov	r0, r4
 80053f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053f4:	3a30      	subs	r2, #48	; 0x30
 80053f6:	2a09      	cmp	r2, #9
 80053f8:	d903      	bls.n	8005402 <_svfiprintf_r+0x1a6>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0c6      	beq.n	800538c <_svfiprintf_r+0x130>
 80053fe:	9105      	str	r1, [sp, #20]
 8005400:	e7c4      	b.n	800538c <_svfiprintf_r+0x130>
 8005402:	4604      	mov	r4, r0
 8005404:	2301      	movs	r3, #1
 8005406:	fb0c 2101 	mla	r1, ip, r1, r2
 800540a:	e7f0      	b.n	80053ee <_svfiprintf_r+0x192>
 800540c:	ab03      	add	r3, sp, #12
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	462a      	mov	r2, r5
 8005412:	4638      	mov	r0, r7
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <_svfiprintf_r+0x1f8>)
 8005416:	a904      	add	r1, sp, #16
 8005418:	f7fd fe6e 	bl	80030f8 <_printf_float>
 800541c:	1c42      	adds	r2, r0, #1
 800541e:	4606      	mov	r6, r0
 8005420:	d1d6      	bne.n	80053d0 <_svfiprintf_r+0x174>
 8005422:	89ab      	ldrh	r3, [r5, #12]
 8005424:	065b      	lsls	r3, r3, #25
 8005426:	f53f af2d 	bmi.w	8005284 <_svfiprintf_r+0x28>
 800542a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800542c:	b01d      	add	sp, #116	; 0x74
 800542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005432:	ab03      	add	r3, sp, #12
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	462a      	mov	r2, r5
 8005438:	4638      	mov	r0, r7
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <_svfiprintf_r+0x1f8>)
 800543c:	a904      	add	r1, sp, #16
 800543e:	f7fe f8fb 	bl	8003638 <_printf_i>
 8005442:	e7eb      	b.n	800541c <_svfiprintf_r+0x1c0>
 8005444:	08005f24 	.word	0x08005f24
 8005448:	08005f2a 	.word	0x08005f2a
 800544c:	08005f2e 	.word	0x08005f2e
 8005450:	080030f9 	.word	0x080030f9
 8005454:	080051a9 	.word	0x080051a9

08005458 <__sflush_r>:
 8005458:	898a      	ldrh	r2, [r1, #12]
 800545a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545c:	4605      	mov	r5, r0
 800545e:	0710      	lsls	r0, r2, #28
 8005460:	460c      	mov	r4, r1
 8005462:	d457      	bmi.n	8005514 <__sflush_r+0xbc>
 8005464:	684b      	ldr	r3, [r1, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	dc04      	bgt.n	8005474 <__sflush_r+0x1c>
 800546a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	dc01      	bgt.n	8005474 <__sflush_r+0x1c>
 8005470:	2000      	movs	r0, #0
 8005472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005476:	2e00      	cmp	r6, #0
 8005478:	d0fa      	beq.n	8005470 <__sflush_r+0x18>
 800547a:	2300      	movs	r3, #0
 800547c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005480:	682f      	ldr	r7, [r5, #0]
 8005482:	6a21      	ldr	r1, [r4, #32]
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	d032      	beq.n	80054ee <__sflush_r+0x96>
 8005488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	075a      	lsls	r2, r3, #29
 800548e:	d505      	bpl.n	800549c <__sflush_r+0x44>
 8005490:	6863      	ldr	r3, [r4, #4]
 8005492:	1ac0      	subs	r0, r0, r3
 8005494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005496:	b10b      	cbz	r3, 800549c <__sflush_r+0x44>
 8005498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800549a:	1ac0      	subs	r0, r0, r3
 800549c:	2300      	movs	r3, #0
 800549e:	4602      	mov	r2, r0
 80054a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a2:	4628      	mov	r0, r5
 80054a4:	6a21      	ldr	r1, [r4, #32]
 80054a6:	47b0      	blx	r6
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	d106      	bne.n	80054bc <__sflush_r+0x64>
 80054ae:	6829      	ldr	r1, [r5, #0]
 80054b0:	291d      	cmp	r1, #29
 80054b2:	d82b      	bhi.n	800550c <__sflush_r+0xb4>
 80054b4:	4a28      	ldr	r2, [pc, #160]	; (8005558 <__sflush_r+0x100>)
 80054b6:	410a      	asrs	r2, r1
 80054b8:	07d6      	lsls	r6, r2, #31
 80054ba:	d427      	bmi.n	800550c <__sflush_r+0xb4>
 80054bc:	2200      	movs	r2, #0
 80054be:	6062      	str	r2, [r4, #4]
 80054c0:	6922      	ldr	r2, [r4, #16]
 80054c2:	04d9      	lsls	r1, r3, #19
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	d504      	bpl.n	80054d2 <__sflush_r+0x7a>
 80054c8:	1c42      	adds	r2, r0, #1
 80054ca:	d101      	bne.n	80054d0 <__sflush_r+0x78>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b903      	cbnz	r3, 80054d2 <__sflush_r+0x7a>
 80054d0:	6560      	str	r0, [r4, #84]	; 0x54
 80054d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d4:	602f      	str	r7, [r5, #0]
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d0ca      	beq.n	8005470 <__sflush_r+0x18>
 80054da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054de:	4299      	cmp	r1, r3
 80054e0:	d002      	beq.n	80054e8 <__sflush_r+0x90>
 80054e2:	4628      	mov	r0, r5
 80054e4:	f7ff f9ec 	bl	80048c0 <_free_r>
 80054e8:	2000      	movs	r0, #0
 80054ea:	6360      	str	r0, [r4, #52]	; 0x34
 80054ec:	e7c1      	b.n	8005472 <__sflush_r+0x1a>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b0      	blx	r6
 80054f4:	1c41      	adds	r1, r0, #1
 80054f6:	d1c8      	bne.n	800548a <__sflush_r+0x32>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0c5      	beq.n	800548a <__sflush_r+0x32>
 80054fe:	2b1d      	cmp	r3, #29
 8005500:	d001      	beq.n	8005506 <__sflush_r+0xae>
 8005502:	2b16      	cmp	r3, #22
 8005504:	d101      	bne.n	800550a <__sflush_r+0xb2>
 8005506:	602f      	str	r7, [r5, #0]
 8005508:	e7b2      	b.n	8005470 <__sflush_r+0x18>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e7ae      	b.n	8005472 <__sflush_r+0x1a>
 8005514:	690f      	ldr	r7, [r1, #16]
 8005516:	2f00      	cmp	r7, #0
 8005518:	d0aa      	beq.n	8005470 <__sflush_r+0x18>
 800551a:	0793      	lsls	r3, r2, #30
 800551c:	bf18      	it	ne
 800551e:	2300      	movne	r3, #0
 8005520:	680e      	ldr	r6, [r1, #0]
 8005522:	bf08      	it	eq
 8005524:	694b      	ldreq	r3, [r1, #20]
 8005526:	1bf6      	subs	r6, r6, r7
 8005528:	600f      	str	r7, [r1, #0]
 800552a:	608b      	str	r3, [r1, #8]
 800552c:	2e00      	cmp	r6, #0
 800552e:	dd9f      	ble.n	8005470 <__sflush_r+0x18>
 8005530:	4633      	mov	r3, r6
 8005532:	463a      	mov	r2, r7
 8005534:	4628      	mov	r0, r5
 8005536:	6a21      	ldr	r1, [r4, #32]
 8005538:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800553c:	47e0      	blx	ip
 800553e:	2800      	cmp	r0, #0
 8005540:	dc06      	bgt.n	8005550 <__sflush_r+0xf8>
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554c:	81a3      	strh	r3, [r4, #12]
 800554e:	e790      	b.n	8005472 <__sflush_r+0x1a>
 8005550:	4407      	add	r7, r0
 8005552:	1a36      	subs	r6, r6, r0
 8005554:	e7ea      	b.n	800552c <__sflush_r+0xd4>
 8005556:	bf00      	nop
 8005558:	dfbffffe 	.word	0xdfbffffe

0800555c <_fflush_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	690b      	ldr	r3, [r1, #16]
 8005560:	4605      	mov	r5, r0
 8005562:	460c      	mov	r4, r1
 8005564:	b913      	cbnz	r3, 800556c <_fflush_r+0x10>
 8005566:	2500      	movs	r5, #0
 8005568:	4628      	mov	r0, r5
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	b118      	cbz	r0, 8005576 <_fflush_r+0x1a>
 800556e:	6a03      	ldr	r3, [r0, #32]
 8005570:	b90b      	cbnz	r3, 8005576 <_fflush_r+0x1a>
 8005572:	f7fe fa0f 	bl	8003994 <__sinit>
 8005576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f3      	beq.n	8005566 <_fflush_r+0xa>
 800557e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005580:	07d0      	lsls	r0, r2, #31
 8005582:	d404      	bmi.n	800558e <_fflush_r+0x32>
 8005584:	0599      	lsls	r1, r3, #22
 8005586:	d402      	bmi.n	800558e <_fflush_r+0x32>
 8005588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558a:	f7fe fb1a 	bl	8003bc2 <__retarget_lock_acquire_recursive>
 800558e:	4628      	mov	r0, r5
 8005590:	4621      	mov	r1, r4
 8005592:	f7ff ff61 	bl	8005458 <__sflush_r>
 8005596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005598:	4605      	mov	r5, r0
 800559a:	07da      	lsls	r2, r3, #31
 800559c:	d4e4      	bmi.n	8005568 <_fflush_r+0xc>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	059b      	lsls	r3, r3, #22
 80055a2:	d4e1      	bmi.n	8005568 <_fflush_r+0xc>
 80055a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055a6:	f7fe fb0d 	bl	8003bc4 <__retarget_lock_release_recursive>
 80055aa:	e7dd      	b.n	8005568 <_fflush_r+0xc>

080055ac <memmove>:
 80055ac:	4288      	cmp	r0, r1
 80055ae:	b510      	push	{r4, lr}
 80055b0:	eb01 0402 	add.w	r4, r1, r2
 80055b4:	d902      	bls.n	80055bc <memmove+0x10>
 80055b6:	4284      	cmp	r4, r0
 80055b8:	4623      	mov	r3, r4
 80055ba:	d807      	bhi.n	80055cc <memmove+0x20>
 80055bc:	1e43      	subs	r3, r0, #1
 80055be:	42a1      	cmp	r1, r4
 80055c0:	d008      	beq.n	80055d4 <memmove+0x28>
 80055c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ca:	e7f8      	b.n	80055be <memmove+0x12>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4402      	add	r2, r0
 80055d0:	428a      	cmp	r2, r1
 80055d2:	d100      	bne.n	80055d6 <memmove+0x2a>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055de:	e7f7      	b.n	80055d0 <memmove+0x24>

080055e0 <_sbrk_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	2300      	movs	r3, #0
 80055e4:	4d05      	ldr	r5, [pc, #20]	; (80055fc <_sbrk_r+0x1c>)
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fb fd4e 	bl	800108c <_sbrk>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_sbrk_r+0x1a>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_sbrk_r+0x1a>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	2000045c 	.word	0x2000045c

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	4291      	cmp	r1, r2
 8005614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <__assert_func>:
 800561c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800561e:	4614      	mov	r4, r2
 8005620:	461a      	mov	r2, r3
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <__assert_func+0x2c>)
 8005624:	4605      	mov	r5, r0
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68d8      	ldr	r0, [r3, #12]
 800562a:	b14c      	cbz	r4, 8005640 <__assert_func+0x24>
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <__assert_func+0x30>)
 800562e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005632:	9100      	str	r1, [sp, #0]
 8005634:	462b      	mov	r3, r5
 8005636:	4906      	ldr	r1, [pc, #24]	; (8005650 <__assert_func+0x34>)
 8005638:	f000 f870 	bl	800571c <fiprintf>
 800563c:	f000 f880 	bl	8005740 <abort>
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <__assert_func+0x38>)
 8005642:	461c      	mov	r4, r3
 8005644:	e7f3      	b.n	800562e <__assert_func+0x12>
 8005646:	bf00      	nop
 8005648:	2000006c 	.word	0x2000006c
 800564c:	08005f3f 	.word	0x08005f3f
 8005650:	08005f4c 	.word	0x08005f4c
 8005654:	08005f7a 	.word	0x08005f7a

08005658 <_calloc_r>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	fba1 5402 	umull	r5, r4, r1, r2
 800565e:	b934      	cbnz	r4, 800566e <_calloc_r+0x16>
 8005660:	4629      	mov	r1, r5
 8005662:	f7ff f99d 	bl	80049a0 <_malloc_r>
 8005666:	4606      	mov	r6, r0
 8005668:	b928      	cbnz	r0, 8005676 <_calloc_r+0x1e>
 800566a:	4630      	mov	r0, r6
 800566c:	bd70      	pop	{r4, r5, r6, pc}
 800566e:	220c      	movs	r2, #12
 8005670:	2600      	movs	r6, #0
 8005672:	6002      	str	r2, [r0, #0]
 8005674:	e7f9      	b.n	800566a <_calloc_r+0x12>
 8005676:	462a      	mov	r2, r5
 8005678:	4621      	mov	r1, r4
 800567a:	f7fe fa24 	bl	8003ac6 <memset>
 800567e:	e7f4      	b.n	800566a <_calloc_r+0x12>

08005680 <__ascii_mbtowc>:
 8005680:	b082      	sub	sp, #8
 8005682:	b901      	cbnz	r1, 8005686 <__ascii_mbtowc+0x6>
 8005684:	a901      	add	r1, sp, #4
 8005686:	b142      	cbz	r2, 800569a <__ascii_mbtowc+0x1a>
 8005688:	b14b      	cbz	r3, 800569e <__ascii_mbtowc+0x1e>
 800568a:	7813      	ldrb	r3, [r2, #0]
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	1e10      	subs	r0, r2, #0
 8005692:	bf18      	it	ne
 8005694:	2001      	movne	r0, #1
 8005696:	b002      	add	sp, #8
 8005698:	4770      	bx	lr
 800569a:	4610      	mov	r0, r2
 800569c:	e7fb      	b.n	8005696 <__ascii_mbtowc+0x16>
 800569e:	f06f 0001 	mvn.w	r0, #1
 80056a2:	e7f8      	b.n	8005696 <__ascii_mbtowc+0x16>

080056a4 <_realloc_r>:
 80056a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	4680      	mov	r8, r0
 80056aa:	4614      	mov	r4, r2
 80056ac:	460e      	mov	r6, r1
 80056ae:	b921      	cbnz	r1, 80056ba <_realloc_r+0x16>
 80056b0:	4611      	mov	r1, r2
 80056b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	f7ff b973 	b.w	80049a0 <_malloc_r>
 80056ba:	b92a      	cbnz	r2, 80056c8 <_realloc_r+0x24>
 80056bc:	f7ff f900 	bl	80048c0 <_free_r>
 80056c0:	4625      	mov	r5, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c8:	f000 f841 	bl	800574e <_malloc_usable_size_r>
 80056cc:	4284      	cmp	r4, r0
 80056ce:	4607      	mov	r7, r0
 80056d0:	d802      	bhi.n	80056d8 <_realloc_r+0x34>
 80056d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056d6:	d812      	bhi.n	80056fe <_realloc_r+0x5a>
 80056d8:	4621      	mov	r1, r4
 80056da:	4640      	mov	r0, r8
 80056dc:	f7ff f960 	bl	80049a0 <_malloc_r>
 80056e0:	4605      	mov	r5, r0
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0ed      	beq.n	80056c2 <_realloc_r+0x1e>
 80056e6:	42bc      	cmp	r4, r7
 80056e8:	4622      	mov	r2, r4
 80056ea:	4631      	mov	r1, r6
 80056ec:	bf28      	it	cs
 80056ee:	463a      	movcs	r2, r7
 80056f0:	f7ff ff86 	bl	8005600 <memcpy>
 80056f4:	4631      	mov	r1, r6
 80056f6:	4640      	mov	r0, r8
 80056f8:	f7ff f8e2 	bl	80048c0 <_free_r>
 80056fc:	e7e1      	b.n	80056c2 <_realloc_r+0x1e>
 80056fe:	4635      	mov	r5, r6
 8005700:	e7df      	b.n	80056c2 <_realloc_r+0x1e>

08005702 <__ascii_wctomb>:
 8005702:	4603      	mov	r3, r0
 8005704:	4608      	mov	r0, r1
 8005706:	b141      	cbz	r1, 800571a <__ascii_wctomb+0x18>
 8005708:	2aff      	cmp	r2, #255	; 0xff
 800570a:	d904      	bls.n	8005716 <__ascii_wctomb+0x14>
 800570c:	228a      	movs	r2, #138	; 0x8a
 800570e:	f04f 30ff 	mov.w	r0, #4294967295
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	4770      	bx	lr
 8005716:	2001      	movs	r0, #1
 8005718:	700a      	strb	r2, [r1, #0]
 800571a:	4770      	bx	lr

0800571c <fiprintf>:
 800571c:	b40e      	push	{r1, r2, r3}
 800571e:	b503      	push	{r0, r1, lr}
 8005720:	4601      	mov	r1, r0
 8005722:	ab03      	add	r3, sp, #12
 8005724:	4805      	ldr	r0, [pc, #20]	; (800573c <fiprintf+0x20>)
 8005726:	f853 2b04 	ldr.w	r2, [r3], #4
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	f000 f83d 	bl	80057ac <_vfiprintf_r>
 8005732:	b002      	add	sp, #8
 8005734:	f85d eb04 	ldr.w	lr, [sp], #4
 8005738:	b003      	add	sp, #12
 800573a:	4770      	bx	lr
 800573c:	2000006c 	.word	0x2000006c

08005740 <abort>:
 8005740:	2006      	movs	r0, #6
 8005742:	b508      	push	{r3, lr}
 8005744:	f000 fa0a 	bl	8005b5c <raise>
 8005748:	2001      	movs	r0, #1
 800574a:	f7fb fc2c 	bl	8000fa6 <_exit>

0800574e <_malloc_usable_size_r>:
 800574e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005752:	1f18      	subs	r0, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfbc      	itt	lt
 8005758:	580b      	ldrlt	r3, [r1, r0]
 800575a:	18c0      	addlt	r0, r0, r3
 800575c:	4770      	bx	lr

0800575e <__sfputc_r>:
 800575e:	6893      	ldr	r3, [r2, #8]
 8005760:	b410      	push	{r4}
 8005762:	3b01      	subs	r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	6093      	str	r3, [r2, #8]
 8005768:	da07      	bge.n	800577a <__sfputc_r+0x1c>
 800576a:	6994      	ldr	r4, [r2, #24]
 800576c:	42a3      	cmp	r3, r4
 800576e:	db01      	blt.n	8005774 <__sfputc_r+0x16>
 8005770:	290a      	cmp	r1, #10
 8005772:	d102      	bne.n	800577a <__sfputc_r+0x1c>
 8005774:	bc10      	pop	{r4}
 8005776:	f000 b933 	b.w	80059e0 <__swbuf_r>
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	1c58      	adds	r0, r3, #1
 800577e:	6010      	str	r0, [r2, #0]
 8005780:	7019      	strb	r1, [r3, #0]
 8005782:	4608      	mov	r0, r1
 8005784:	bc10      	pop	{r4}
 8005786:	4770      	bx	lr

08005788 <__sfputs_r>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	4606      	mov	r6, r0
 800578c:	460f      	mov	r7, r1
 800578e:	4614      	mov	r4, r2
 8005790:	18d5      	adds	r5, r2, r3
 8005792:	42ac      	cmp	r4, r5
 8005794:	d101      	bne.n	800579a <__sfputs_r+0x12>
 8005796:	2000      	movs	r0, #0
 8005798:	e007      	b.n	80057aa <__sfputs_r+0x22>
 800579a:	463a      	mov	r2, r7
 800579c:	4630      	mov	r0, r6
 800579e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a2:	f7ff ffdc 	bl	800575e <__sfputc_r>
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	d1f3      	bne.n	8005792 <__sfputs_r+0xa>
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057ac <_vfiprintf_r>:
 80057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	460d      	mov	r5, r1
 80057b2:	4614      	mov	r4, r2
 80057b4:	4698      	mov	r8, r3
 80057b6:	4606      	mov	r6, r0
 80057b8:	b09d      	sub	sp, #116	; 0x74
 80057ba:	b118      	cbz	r0, 80057c4 <_vfiprintf_r+0x18>
 80057bc:	6a03      	ldr	r3, [r0, #32]
 80057be:	b90b      	cbnz	r3, 80057c4 <_vfiprintf_r+0x18>
 80057c0:	f7fe f8e8 	bl	8003994 <__sinit>
 80057c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c6:	07d9      	lsls	r1, r3, #31
 80057c8:	d405      	bmi.n	80057d6 <_vfiprintf_r+0x2a>
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	059a      	lsls	r2, r3, #22
 80057ce:	d402      	bmi.n	80057d6 <_vfiprintf_r+0x2a>
 80057d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d2:	f7fe f9f6 	bl	8003bc2 <__retarget_lock_acquire_recursive>
 80057d6:	89ab      	ldrh	r3, [r5, #12]
 80057d8:	071b      	lsls	r3, r3, #28
 80057da:	d501      	bpl.n	80057e0 <_vfiprintf_r+0x34>
 80057dc:	692b      	ldr	r3, [r5, #16]
 80057de:	b99b      	cbnz	r3, 8005808 <_vfiprintf_r+0x5c>
 80057e0:	4629      	mov	r1, r5
 80057e2:	4630      	mov	r0, r6
 80057e4:	f000 f93a 	bl	8005a5c <__swsetup_r>
 80057e8:	b170      	cbz	r0, 8005808 <_vfiprintf_r+0x5c>
 80057ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ec:	07dc      	lsls	r4, r3, #31
 80057ee:	d504      	bpl.n	80057fa <_vfiprintf_r+0x4e>
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	b01d      	add	sp, #116	; 0x74
 80057f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fa:	89ab      	ldrh	r3, [r5, #12]
 80057fc:	0598      	lsls	r0, r3, #22
 80057fe:	d4f7      	bmi.n	80057f0 <_vfiprintf_r+0x44>
 8005800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005802:	f7fe f9df 	bl	8003bc4 <__retarget_lock_release_recursive>
 8005806:	e7f3      	b.n	80057f0 <_vfiprintf_r+0x44>
 8005808:	2300      	movs	r3, #0
 800580a:	9309      	str	r3, [sp, #36]	; 0x24
 800580c:	2320      	movs	r3, #32
 800580e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005812:	2330      	movs	r3, #48	; 0x30
 8005814:	f04f 0901 	mov.w	r9, #1
 8005818:	f8cd 800c 	str.w	r8, [sp, #12]
 800581c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80059cc <_vfiprintf_r+0x220>
 8005820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005824:	4623      	mov	r3, r4
 8005826:	469a      	mov	sl, r3
 8005828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582c:	b10a      	cbz	r2, 8005832 <_vfiprintf_r+0x86>
 800582e:	2a25      	cmp	r2, #37	; 0x25
 8005830:	d1f9      	bne.n	8005826 <_vfiprintf_r+0x7a>
 8005832:	ebba 0b04 	subs.w	fp, sl, r4
 8005836:	d00b      	beq.n	8005850 <_vfiprintf_r+0xa4>
 8005838:	465b      	mov	r3, fp
 800583a:	4622      	mov	r2, r4
 800583c:	4629      	mov	r1, r5
 800583e:	4630      	mov	r0, r6
 8005840:	f7ff ffa2 	bl	8005788 <__sfputs_r>
 8005844:	3001      	adds	r0, #1
 8005846:	f000 80a9 	beq.w	800599c <_vfiprintf_r+0x1f0>
 800584a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584c:	445a      	add	r2, fp
 800584e:	9209      	str	r2, [sp, #36]	; 0x24
 8005850:	f89a 3000 	ldrb.w	r3, [sl]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80a1 	beq.w	800599c <_vfiprintf_r+0x1f0>
 800585a:	2300      	movs	r3, #0
 800585c:	f04f 32ff 	mov.w	r2, #4294967295
 8005860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005864:	f10a 0a01 	add.w	sl, sl, #1
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	9307      	str	r3, [sp, #28]
 800586c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005870:	931a      	str	r3, [sp, #104]	; 0x68
 8005872:	4654      	mov	r4, sl
 8005874:	2205      	movs	r2, #5
 8005876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587a:	4854      	ldr	r0, [pc, #336]	; (80059cc <_vfiprintf_r+0x220>)
 800587c:	f7fe f9a3 	bl	8003bc6 <memchr>
 8005880:	9a04      	ldr	r2, [sp, #16]
 8005882:	b9d8      	cbnz	r0, 80058bc <_vfiprintf_r+0x110>
 8005884:	06d1      	lsls	r1, r2, #27
 8005886:	bf44      	itt	mi
 8005888:	2320      	movmi	r3, #32
 800588a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588e:	0713      	lsls	r3, r2, #28
 8005890:	bf44      	itt	mi
 8005892:	232b      	movmi	r3, #43	; 0x2b
 8005894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005898:	f89a 3000 	ldrb.w	r3, [sl]
 800589c:	2b2a      	cmp	r3, #42	; 0x2a
 800589e:	d015      	beq.n	80058cc <_vfiprintf_r+0x120>
 80058a0:	4654      	mov	r4, sl
 80058a2:	2000      	movs	r0, #0
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	9a07      	ldr	r2, [sp, #28]
 80058aa:	4621      	mov	r1, r4
 80058ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b0:	3b30      	subs	r3, #48	; 0x30
 80058b2:	2b09      	cmp	r3, #9
 80058b4:	d94d      	bls.n	8005952 <_vfiprintf_r+0x1a6>
 80058b6:	b1b0      	cbz	r0, 80058e6 <_vfiprintf_r+0x13a>
 80058b8:	9207      	str	r2, [sp, #28]
 80058ba:	e014      	b.n	80058e6 <_vfiprintf_r+0x13a>
 80058bc:	eba0 0308 	sub.w	r3, r0, r8
 80058c0:	fa09 f303 	lsl.w	r3, r9, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	46a2      	mov	sl, r4
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	e7d2      	b.n	8005872 <_vfiprintf_r+0xc6>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	1d19      	adds	r1, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	9103      	str	r1, [sp, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bfbb      	ittet	lt
 80058d8:	425b      	neglt	r3, r3
 80058da:	f042 0202 	orrlt.w	r2, r2, #2
 80058de:	9307      	strge	r3, [sp, #28]
 80058e0:	9307      	strlt	r3, [sp, #28]
 80058e2:	bfb8      	it	lt
 80058e4:	9204      	strlt	r2, [sp, #16]
 80058e6:	7823      	ldrb	r3, [r4, #0]
 80058e8:	2b2e      	cmp	r3, #46	; 0x2e
 80058ea:	d10c      	bne.n	8005906 <_vfiprintf_r+0x15a>
 80058ec:	7863      	ldrb	r3, [r4, #1]
 80058ee:	2b2a      	cmp	r3, #42	; 0x2a
 80058f0:	d134      	bne.n	800595c <_vfiprintf_r+0x1b0>
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	3402      	adds	r4, #2
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	9203      	str	r2, [sp, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bfb8      	it	lt
 8005900:	f04f 33ff 	movlt.w	r3, #4294967295
 8005904:	9305      	str	r3, [sp, #20]
 8005906:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059d0 <_vfiprintf_r+0x224>
 800590a:	2203      	movs	r2, #3
 800590c:	4650      	mov	r0, sl
 800590e:	7821      	ldrb	r1, [r4, #0]
 8005910:	f7fe f959 	bl	8003bc6 <memchr>
 8005914:	b138      	cbz	r0, 8005926 <_vfiprintf_r+0x17a>
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	9b04      	ldr	r3, [sp, #16]
 800591a:	eba0 000a 	sub.w	r0, r0, sl
 800591e:	4082      	lsls	r2, r0
 8005920:	4313      	orrs	r3, r2
 8005922:	3401      	adds	r4, #1
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592a:	2206      	movs	r2, #6
 800592c:	4829      	ldr	r0, [pc, #164]	; (80059d4 <_vfiprintf_r+0x228>)
 800592e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005932:	f7fe f948 	bl	8003bc6 <memchr>
 8005936:	2800      	cmp	r0, #0
 8005938:	d03f      	beq.n	80059ba <_vfiprintf_r+0x20e>
 800593a:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <_vfiprintf_r+0x22c>)
 800593c:	bb1b      	cbnz	r3, 8005986 <_vfiprintf_r+0x1da>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	3307      	adds	r3, #7
 8005942:	f023 0307 	bic.w	r3, r3, #7
 8005946:	3308      	adds	r3, #8
 8005948:	9303      	str	r3, [sp, #12]
 800594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594c:	443b      	add	r3, r7
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	e768      	b.n	8005824 <_vfiprintf_r+0x78>
 8005952:	460c      	mov	r4, r1
 8005954:	2001      	movs	r0, #1
 8005956:	fb0c 3202 	mla	r2, ip, r2, r3
 800595a:	e7a6      	b.n	80058aa <_vfiprintf_r+0xfe>
 800595c:	2300      	movs	r3, #0
 800595e:	f04f 0c0a 	mov.w	ip, #10
 8005962:	4619      	mov	r1, r3
 8005964:	3401      	adds	r4, #1
 8005966:	9305      	str	r3, [sp, #20]
 8005968:	4620      	mov	r0, r4
 800596a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800596e:	3a30      	subs	r2, #48	; 0x30
 8005970:	2a09      	cmp	r2, #9
 8005972:	d903      	bls.n	800597c <_vfiprintf_r+0x1d0>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0c6      	beq.n	8005906 <_vfiprintf_r+0x15a>
 8005978:	9105      	str	r1, [sp, #20]
 800597a:	e7c4      	b.n	8005906 <_vfiprintf_r+0x15a>
 800597c:	4604      	mov	r4, r0
 800597e:	2301      	movs	r3, #1
 8005980:	fb0c 2101 	mla	r1, ip, r1, r2
 8005984:	e7f0      	b.n	8005968 <_vfiprintf_r+0x1bc>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4630      	mov	r0, r6
 800598e:	4b13      	ldr	r3, [pc, #76]	; (80059dc <_vfiprintf_r+0x230>)
 8005990:	a904      	add	r1, sp, #16
 8005992:	f7fd fbb1 	bl	80030f8 <_printf_float>
 8005996:	4607      	mov	r7, r0
 8005998:	1c78      	adds	r0, r7, #1
 800599a:	d1d6      	bne.n	800594a <_vfiprintf_r+0x19e>
 800599c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800599e:	07d9      	lsls	r1, r3, #31
 80059a0:	d405      	bmi.n	80059ae <_vfiprintf_r+0x202>
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	059a      	lsls	r2, r3, #22
 80059a6:	d402      	bmi.n	80059ae <_vfiprintf_r+0x202>
 80059a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059aa:	f7fe f90b 	bl	8003bc4 <__retarget_lock_release_recursive>
 80059ae:	89ab      	ldrh	r3, [r5, #12]
 80059b0:	065b      	lsls	r3, r3, #25
 80059b2:	f53f af1d 	bmi.w	80057f0 <_vfiprintf_r+0x44>
 80059b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059b8:	e71c      	b.n	80057f4 <_vfiprintf_r+0x48>
 80059ba:	ab03      	add	r3, sp, #12
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	462a      	mov	r2, r5
 80059c0:	4630      	mov	r0, r6
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <_vfiprintf_r+0x230>)
 80059c4:	a904      	add	r1, sp, #16
 80059c6:	f7fd fe37 	bl	8003638 <_printf_i>
 80059ca:	e7e4      	b.n	8005996 <_vfiprintf_r+0x1ea>
 80059cc:	08005f24 	.word	0x08005f24
 80059d0:	08005f2a 	.word	0x08005f2a
 80059d4:	08005f2e 	.word	0x08005f2e
 80059d8:	080030f9 	.word	0x080030f9
 80059dc:	08005789 	.word	0x08005789

080059e0 <__swbuf_r>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	460e      	mov	r6, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	4605      	mov	r5, r0
 80059e8:	b118      	cbz	r0, 80059f2 <__swbuf_r+0x12>
 80059ea:	6a03      	ldr	r3, [r0, #32]
 80059ec:	b90b      	cbnz	r3, 80059f2 <__swbuf_r+0x12>
 80059ee:	f7fd ffd1 	bl	8003994 <__sinit>
 80059f2:	69a3      	ldr	r3, [r4, #24]
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	071a      	lsls	r2, r3, #28
 80059fa:	d525      	bpl.n	8005a48 <__swbuf_r+0x68>
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	b31b      	cbz	r3, 8005a48 <__swbuf_r+0x68>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	6922      	ldr	r2, [r4, #16]
 8005a04:	b2f6      	uxtb	r6, r6
 8005a06:	1a98      	subs	r0, r3, r2
 8005a08:	6963      	ldr	r3, [r4, #20]
 8005a0a:	4637      	mov	r7, r6
 8005a0c:	4283      	cmp	r3, r0
 8005a0e:	dc04      	bgt.n	8005a1a <__swbuf_r+0x3a>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7ff fda2 	bl	800555c <_fflush_r>
 8005a18:	b9e0      	cbnz	r0, 8005a54 <__swbuf_r+0x74>
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	701e      	strb	r6, [r3, #0]
 8005a28:	6962      	ldr	r2, [r4, #20]
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d004      	beq.n	8005a3a <__swbuf_r+0x5a>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	07db      	lsls	r3, r3, #31
 8005a34:	d506      	bpl.n	8005a44 <__swbuf_r+0x64>
 8005a36:	2e0a      	cmp	r6, #10
 8005a38:	d104      	bne.n	8005a44 <__swbuf_r+0x64>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f7ff fd8d 	bl	800555c <_fflush_r>
 8005a42:	b938      	cbnz	r0, 8005a54 <__swbuf_r+0x74>
 8005a44:	4638      	mov	r0, r7
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 f806 	bl	8005a5c <__swsetup_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d0d5      	beq.n	8005a00 <__swbuf_r+0x20>
 8005a54:	f04f 37ff 	mov.w	r7, #4294967295
 8005a58:	e7f4      	b.n	8005a44 <__swbuf_r+0x64>
	...

08005a5c <__swsetup_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <__swsetup_r+0xac>)
 8005a60:	4605      	mov	r5, r0
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	460c      	mov	r4, r1
 8005a66:	b118      	cbz	r0, 8005a70 <__swsetup_r+0x14>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <__swsetup_r+0x14>
 8005a6c:	f7fd ff92 	bl	8003994 <__sinit>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a76:	0718      	lsls	r0, r3, #28
 8005a78:	d422      	bmi.n	8005ac0 <__swsetup_r+0x64>
 8005a7a:	06d9      	lsls	r1, r3, #27
 8005a7c:	d407      	bmi.n	8005a8e <__swsetup_r+0x32>
 8005a7e:	2309      	movs	r3, #9
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	81a3      	strh	r3, [r4, #12]
 8005a8c:	e034      	b.n	8005af8 <__swsetup_r+0x9c>
 8005a8e:	0758      	lsls	r0, r3, #29
 8005a90:	d512      	bpl.n	8005ab8 <__swsetup_r+0x5c>
 8005a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a94:	b141      	cbz	r1, 8005aa8 <__swsetup_r+0x4c>
 8005a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a9a:	4299      	cmp	r1, r3
 8005a9c:	d002      	beq.n	8005aa4 <__swsetup_r+0x48>
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f7fe ff0e 	bl	80048c0 <_free_r>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6363      	str	r3, [r4, #52]	; 0x34
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0308 	orr.w	r3, r3, #8
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	b94b      	cbnz	r3, 8005ad8 <__swsetup_r+0x7c>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d003      	beq.n	8005ad8 <__swsetup_r+0x7c>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 f883 	bl	8005bde <__smakebuf_r>
 8005ad8:	89a0      	ldrh	r0, [r4, #12]
 8005ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ade:	f010 0301 	ands.w	r3, r0, #1
 8005ae2:	d00a      	beq.n	8005afa <__swsetup_r+0x9e>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	425b      	negs	r3, r3
 8005aec:	61a3      	str	r3, [r4, #24]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b943      	cbnz	r3, 8005b04 <__swsetup_r+0xa8>
 8005af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005af6:	d1c4      	bne.n	8005a82 <__swsetup_r+0x26>
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	0781      	lsls	r1, r0, #30
 8005afc:	bf58      	it	pl
 8005afe:	6963      	ldrpl	r3, [r4, #20]
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	e7f4      	b.n	8005aee <__swsetup_r+0x92>
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7f7      	b.n	8005af8 <__swsetup_r+0x9c>
 8005b08:	2000006c 	.word	0x2000006c

08005b0c <_raise_r>:
 8005b0c:	291f      	cmp	r1, #31
 8005b0e:	b538      	push	{r3, r4, r5, lr}
 8005b10:	4604      	mov	r4, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	d904      	bls.n	8005b20 <_raise_r+0x14>
 8005b16:	2316      	movs	r3, #22
 8005b18:	6003      	str	r3, [r0, #0]
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005b22:	b112      	cbz	r2, 8005b2a <_raise_r+0x1e>
 8005b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b28:	b94b      	cbnz	r3, 8005b3e <_raise_r+0x32>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f830 	bl	8005b90 <_getpid_r>
 8005b30:	462a      	mov	r2, r5
 8005b32:	4601      	mov	r1, r0
 8005b34:	4620      	mov	r0, r4
 8005b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b3a:	f000 b817 	b.w	8005b6c <_kill_r>
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d00a      	beq.n	8005b58 <_raise_r+0x4c>
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	d103      	bne.n	8005b4e <_raise_r+0x42>
 8005b46:	2316      	movs	r3, #22
 8005b48:	6003      	str	r3, [r0, #0]
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	e7e7      	b.n	8005b1e <_raise_r+0x12>
 8005b4e:	2400      	movs	r4, #0
 8005b50:	4628      	mov	r0, r5
 8005b52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b56:	4798      	blx	r3
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e7e0      	b.n	8005b1e <_raise_r+0x12>

08005b5c <raise>:
 8005b5c:	4b02      	ldr	r3, [pc, #8]	; (8005b68 <raise+0xc>)
 8005b5e:	4601      	mov	r1, r0
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f7ff bfd3 	b.w	8005b0c <_raise_r>
 8005b66:	bf00      	nop
 8005b68:	2000006c 	.word	0x2000006c

08005b6c <_kill_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4d06      	ldr	r5, [pc, #24]	; (8005b8c <_kill_r+0x20>)
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	f7fb fa04 	bl	8000f86 <_kill>
 8005b7e:	1c43      	adds	r3, r0, #1
 8005b80:	d102      	bne.n	8005b88 <_kill_r+0x1c>
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	b103      	cbz	r3, 8005b88 <_kill_r+0x1c>
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	2000045c 	.word	0x2000045c

08005b90 <_getpid_r>:
 8005b90:	f7fb b9f2 	b.w	8000f78 <_getpid>

08005b94 <__swhatbuf_r>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	461e      	mov	r6, r3
 8005ba2:	b096      	sub	sp, #88	; 0x58
 8005ba4:	da0c      	bge.n	8005bc0 <__swhatbuf_r+0x2c>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bae:	bf0c      	ite	eq
 8005bb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005bb4:	2340      	movne	r3, #64	; 0x40
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	6031      	str	r1, [r6, #0]
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	b016      	add	sp, #88	; 0x58
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	466a      	mov	r2, sp
 8005bc2:	f000 f849 	bl	8005c58 <_fstat_r>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	dbed      	blt.n	8005ba6 <__swhatbuf_r+0x12>
 8005bca:	9901      	ldr	r1, [sp, #4]
 8005bcc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005bd0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005bd4:	4259      	negs	r1, r3
 8005bd6:	4159      	adcs	r1, r3
 8005bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bdc:	e7eb      	b.n	8005bb6 <__swhatbuf_r+0x22>

08005bde <__smakebuf_r>:
 8005bde:	898b      	ldrh	r3, [r1, #12]
 8005be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005be2:	079d      	lsls	r5, r3, #30
 8005be4:	4606      	mov	r6, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	d507      	bpl.n	8005bfa <__smakebuf_r+0x1c>
 8005bea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bee:	6023      	str	r3, [r4, #0]
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	6163      	str	r3, [r4, #20]
 8005bf6:	b002      	add	sp, #8
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	466a      	mov	r2, sp
 8005bfc:	ab01      	add	r3, sp, #4
 8005bfe:	f7ff ffc9 	bl	8005b94 <__swhatbuf_r>
 8005c02:	9900      	ldr	r1, [sp, #0]
 8005c04:	4605      	mov	r5, r0
 8005c06:	4630      	mov	r0, r6
 8005c08:	f7fe feca 	bl	80049a0 <_malloc_r>
 8005c0c:	b948      	cbnz	r0, 8005c22 <__smakebuf_r+0x44>
 8005c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c12:	059a      	lsls	r2, r3, #22
 8005c14:	d4ef      	bmi.n	8005bf6 <__smakebuf_r+0x18>
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	f043 0302 	orr.w	r3, r3, #2
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	e7e3      	b.n	8005bea <__smakebuf_r+0xc>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	6020      	str	r0, [r4, #0]
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	9b00      	ldr	r3, [sp, #0]
 8005c2e:	6120      	str	r0, [r4, #16]
 8005c30:	6163      	str	r3, [r4, #20]
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	b15b      	cbz	r3, 8005c4e <__smakebuf_r+0x70>
 8005c36:	4630      	mov	r0, r6
 8005c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3c:	f000 f81e 	bl	8005c7c <_isatty_r>
 8005c40:	b128      	cbz	r0, 8005c4e <__smakebuf_r+0x70>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	431d      	orrs	r5, r3
 8005c52:	81a5      	strh	r5, [r4, #12]
 8005c54:	e7cf      	b.n	8005bf6 <__smakebuf_r+0x18>
	...

08005c58 <_fstat_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4d06      	ldr	r5, [pc, #24]	; (8005c78 <_fstat_r+0x20>)
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	f7fb f9ec 	bl	8001042 <_fstat>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d102      	bne.n	8005c74 <_fstat_r+0x1c>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	b103      	cbz	r3, 8005c74 <_fstat_r+0x1c>
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	bd38      	pop	{r3, r4, r5, pc}
 8005c76:	bf00      	nop
 8005c78:	2000045c 	.word	0x2000045c

08005c7c <_isatty_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4d05      	ldr	r5, [pc, #20]	; (8005c98 <_isatty_r+0x1c>)
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	f7fb f9ea 	bl	8001060 <_isatty>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_isatty_r+0x1a>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_isatty_r+0x1a>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	2000045c 	.word	0x2000045c

08005c9c <_init>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr

08005ca8 <_fini>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr
