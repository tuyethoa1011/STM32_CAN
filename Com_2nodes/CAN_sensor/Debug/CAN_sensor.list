
CAN_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005d90  08005d90  00015d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800616c  0800616c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800616c  0800616c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001dc  08006350  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08006350  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c0f  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f3  00000000  00000000  00028e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000622  00000000  00000000  0002af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ded  00000000  00000000  0002b58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a01e  00000000  00000000  00043377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008657d  00000000  00000000  0004d395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003178  00000000  00000000  000d3914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d6a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d74 	.word	0x08005d74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005d74 	.word	0x08005d74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 ff0d 	bl	80018b6 <HAL_CAN_GetRxMessage>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
	{
		Error_Handler();
 8000aa2:	f000 f99d 	bl	8000de0 <Error_Handler>
	}
	else
	{
		flag_RcvBack = 1;
	}
}
 8000aa6:	e002      	b.n	8000aae <HAL_CAN_RxFifo1MsgPendingCallback+0x26>
		flag_RcvBack = 1;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002a0 	.word	0x200002a0
 8000abc:	20000280 	.word	0x20000280
 8000ac0:	200002df 	.word	0x200002df

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fb97 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f893 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 f939 	bl	8000d48 <MX_GPIO_Init>
  MX_CAN_Init();
 8000ad6:	f000 f8d5 	bl	8000c84 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000ada:	f000 f90b 	bl	8000cf4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan);
 8000ade:	483b      	ldr	r0, [pc, #236]	; (8000bcc <main+0x108>)
 8000ae0:	f000 f9ce 	bl	8000e80 <HAL_CAN_MspInit>

  HAL_CAN_Init(&hcan);
 8000ae4:	4839      	ldr	r0, [pc, #228]	; (8000bcc <main+0x108>)
 8000ae6:	f000 fc0f 	bl	8001308 <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000aea:	2110      	movs	r1, #16
 8000aec:	4837      	ldr	r0, [pc, #220]	; (8000bcc <main+0x108>)
 8000aee:	f001 f803 	bl	8001af8 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x2AA << 5;
 8000afe:	f245 5340 	movw	r3, #21824	; 0x5540
 8000b02:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x2AA << 5;
 8000b08:	f245 5340 	movw	r3, #21824	; 0x5540
 8000b0c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
  //canfilterconfig.SlaveStartFilterBank = 14;

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482b      	ldr	r0, [pc, #172]	; (8000bcc <main+0x108>)
 8000b20:	f000 fced 	bl	80014fe <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000b24:	4829      	ldr	r0, [pc, #164]	; (8000bcc <main+0x108>)
 8000b26:	f000 fdb3 	bl	8001690 <HAL_CAN_Start>

  //Config CAN Tx header
  TxHeader.DLC = 8;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <main+0x10c>)
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <main+0x10c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <main+0x10c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <main+0x10c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x555;
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <main+0x10c>)
 8000b44:	f240 5255 	movw	r2, #1365	; 0x555
 8000b48:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <main+0x10c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b54:	f000 fbb4 	bl	80012c0 <HAL_Delay>
	  //support maximum 3 mailbox

	  if(flag_RcvBack == 1 && flag_Transmit == 1)
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <main+0x110>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d120      	bne.n	8000ba2 <main+0xde>
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <main+0x114>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d11c      	bne.n	8000ba2 <main+0xde>
	  {
			//print oled debugger
		  	memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000b68:	2237      	movs	r2, #55	; 0x37
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	481b      	ldr	r0, [pc, #108]	; (8000bdc <main+0x118>)
 8000b6e:	f003 f818 	bl	8003ba2 <memset>
			sprintf((char*)Tx_Buffer,"\nSENSOR NODE\nTxID:%lu\nTx:%s\nRxID:%lu\nRx:%s",TxHeader.StdId,TxData,RxHeader.StdId,RxData);
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <main+0x10c>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <main+0x11c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	491a      	ldr	r1, [pc, #104]	; (8000be4 <main+0x120>)
 8000b7c:	9101      	str	r1, [sp, #4]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <main+0x124>)
 8000b82:	491a      	ldr	r1, [pc, #104]	; (8000bec <main+0x128>)
 8000b84:	4815      	ldr	r0, [pc, #84]	; (8000bdc <main+0x118>)
 8000b86:	f002 ffa9 	bl	8003adc <siprintf>
			HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	2237      	movs	r2, #55	; 0x37
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <main+0x118>)
 8000b90:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <main+0x12c>)
 8000b92:	f002 f903 	bl	8002d9c <HAL_UART_Transmit>

			flag_RcvBack = 0;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <main+0x110>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
			flag_Transmit = 0;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <main+0x114>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	  }

	  if (flag_Transmit == 0){
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <main+0x114>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1d2      	bne.n	8000b50 <main+0x8c>
		  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <main+0x130>)
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <main+0x124>)
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <main+0x10c>)
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <main+0x108>)
 8000bb2:	f000 fdb1 	bl	8001718 <HAL_CAN_AddTxMessage>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <main+0xfe>
		  {
			  Error_Handler();
 8000bbc:	f000 f910 	bl	8000de0 <Error_Handler>
 8000bc0:	e7c6      	b.n	8000b50 <main+0x8c>
		  } else //Transmit oke
		  {
			  flag_Transmit = 1;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <main+0x114>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000bc8:	e7c2      	b.n	8000b50 <main+0x8c>
 8000bca:	bf00      	nop
 8000bcc:	200001f8 	.word	0x200001f8
 8000bd0:	20000268 	.word	0x20000268
 8000bd4:	200002df 	.word	0x200002df
 8000bd8:	200002e0 	.word	0x200002e0
 8000bdc:	200002a8 	.word	0x200002a8
 8000be0:	20000280 	.word	0x20000280
 8000be4:	200002a0 	.word	0x200002a0
 8000be8:	20000000 	.word	0x20000000
 8000bec:	08005d90 	.word	0x08005d90
 8000bf0:	20000220 	.word	0x20000220
 8000bf4:	2000029c 	.word	0x2000029c

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	; 0x40
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 ffcb 	bl	8003ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0318 	add.w	r3, r7, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fc4b 	bl	80024dc <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f8c8 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 feb8 	bl	80029e0 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c76:	f000 f8b3 	bl	8000de0 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3740      	adds	r7, #64	; 0x40
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_CAN_Init+0x68>)
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <MX_CAN_Init+0x6c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_CAN_Init+0x68>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_CAN_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_CAN_Init+0x68>)
 8000c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ca0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_CAN_Init+0x68>)
 8000ca4:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000ca8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_CAN_Init+0x68>)
 8000cac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cb0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_CAN_Init+0x68>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_CAN_Init+0x68>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_CAN_Init+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_CAN_Init+0x68>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_CAN_Init+0x68>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_CAN_Init+0x68>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_CAN_Init+0x68>)
 8000cd8:	f000 fb16 	bl	8001308 <HAL_CAN_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000ce2:	f000 f87d 	bl	8000de0 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001f8 	.word	0x200001f8
 8000cf0:	40006400 	.word	0x40006400

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f001 ffe6 	bl	8002cfc <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f853 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000220 	.word	0x20000220
 8000d44:	40013800 	.word	0x40013800

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_GPIO_Init+0x94>)
 8000dac:	f001 fb7e 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_GPIO_Init+0x94>)
 8000dca:	f001 f9eb 	bl	80021a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000de8:	2237      	movs	r2, #55	; 0x37
 8000dea:	2100      	movs	r1, #0
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <Error_Handler+0x30>)
 8000dee:	f002 fed8 	bl	8003ba2 <memset>
	  sprintf((char*)Tx_Buffer,"CAN sensor node ERROR\n");
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <Error_Handler+0x34>)
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <Error_Handler+0x30>)
 8000df6:	f002 fe71 	bl	8003adc <siprintf>
	  HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	2237      	movs	r2, #55	; 0x37
 8000dfe:	4904      	ldr	r1, [pc, #16]	; (8000e10 <Error_Handler+0x30>)
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <Error_Handler+0x38>)
 8000e02:	f001 ffcb 	bl	8002d9c <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000e06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0a:	f000 fa59 	bl	80012c0 <HAL_Delay>
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000e0e:	e7eb      	b.n	8000de8 <Error_Handler+0x8>
 8000e10:	200002a8 	.word	0x200002a8
 8000e14:	08005dbc 	.word	0x08005dbc
 8000e18:	20000220 	.word	0x20000220

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_MspInit+0x60>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_MspInit+0x60>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000

08000e80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <HAL_CAN_MspInit+0x9c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d139      	bne.n	8000f14 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_CAN_MspInit+0xa0>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_CAN_MspInit+0xa0>)
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	61d3      	str	r3, [r2, #28]
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_CAN_MspInit+0xa0>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_CAN_MspInit+0xa0>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_CAN_MspInit+0xa0>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_CAN_MspInit+0xa0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480f      	ldr	r0, [pc, #60]	; (8000f24 <HAL_CAN_MspInit+0xa4>)
 8000ee6:	f001 f95d 	bl	80021a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_CAN_MspInit+0xa4>)
 8000f00:	f001 f950 	bl	80021a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2015      	movs	r0, #21
 8000f0a:	f001 f914 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f0e:	2015      	movs	r0, #21
 8000f10:	f001 f92d 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40006400 	.word	0x40006400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010800 	.word	0x40010800

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d131      	bne.n	8000fac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_UART_MspInit+0x94>)
 8000f8e:	f001 f909 	bl	80021a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0x94>)
 8000fa8:	f001 f8fc 	bl	80021a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f93f 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <CAN1_RX1_IRQHandler+0x10>)
 8001016:	f000 fd94 	bl	8001b42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001f8 	.word	0x200001f8

08001024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <_kill>:

int _kill(int pid, int sig)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103c:	f002 fe04 	bl	8003c48 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	2216      	movs	r2, #22
 8001044:	601a      	str	r2, [r3, #0]
  return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_exit>:

void _exit (int status)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800105a:	f04f 31ff 	mov.w	r1, #4294967295
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffe7 	bl	8001032 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001064:	e7fe      	b.n	8001064 <_exit+0x12>

08001066 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e00a      	b.n	800108e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001078:	f3af 8000 	nop.w
 800107c:	4601      	mov	r1, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60ba      	str	r2, [r7, #8]
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	dbf0      	blt.n	8001078 <_read+0x12>
  }

  return len;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e009      	b.n	80010c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	60ba      	str	r2, [r7, #8]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbf1      	blt.n	80010b2 <_write+0x12>
  }
  return len;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_close>:

int _close(int file)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_isatty>:

int _isatty(int file)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f002 fd6e 	bl	8003c48 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20005000 	.word	0x20005000
 8001198:	00000400 	.word	0x00000400
 800119c:	200002e4 	.word	0x200002e4
 80011a0:	20000438 	.word	0x20000438

080011a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff fff8 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011cc:	4c09      	ldr	r4, [pc, #36]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f002 fd3b 	bl	8003c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff fc71 	bl	8000ac4 <main>
  bx lr
 80011e2:	4770      	bx	lr
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80011ec:	08006174 	.word	0x08006174
  ldr r2, =_sbss
 80011f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80011f4:	20000438 	.word	0x20000438

080011f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 ff87 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fe00 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 ff9f 	bl	800218a <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 ff67 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000008 	.word	0x20000008
 8001280:	20000010 	.word	0x20000010
 8001284:	2000000c 	.word	0x2000000c

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <HAL_IncTick+0x20>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000010 	.word	0x20000010
 80012a8:	200002e8 	.word	0x200002e8

080012ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200002e8 	.word	0x200002e8

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff fff0 	bl	80012ac <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffe0 	bl	80012ac <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000010 	.word	0x20000010

08001308 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0ed      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fdaa 	bl	8000e80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133c:	f7ff ffb6 	bl	80012ac <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001342:	e012      	b.n	800136a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001344:	f7ff ffb2 	bl	80012ac <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d90b      	bls.n	800136a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0c5      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0e5      	beq.n	8001344 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0202 	bic.w	r2, r2, #2
 8001386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff ff90 	bl	80012ac <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138e:	e012      	b.n	80013b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001390:	f7ff ff8c 	bl	80012ac <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d90b      	bls.n	80013b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2205      	movs	r2, #5
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e09f      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e5      	bne.n	8001390 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e007      	b.n	80013ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e5b      	ldrb	r3, [r3, #25]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e007      	b.n	8001418 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001416:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e9b      	ldrb	r3, [r3, #26]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0220 	orr.w	r2, r2, #32
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0220 	bic.w	r2, r2, #32
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7edb      	ldrb	r3, [r3, #27]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0210 	bic.w	r2, r2, #16
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e007      	b.n	800146c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0210 	orr.w	r2, r2, #16
 800146a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7f1b      	ldrb	r3, [r3, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e007      	b.n	8001496 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7f5b      	ldrb	r3, [r3, #29]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e007      	b.n	80014c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	ea42 0103 	orr.w	r1, r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014fe:	b480      	push	{r7}
 8001500:	b087      	sub	sp, #28
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d003      	beq.n	8001524 <HAL_CAN_ConfigFilter+0x26>
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b02      	cmp	r3, #2
 8001520:	f040 80aa 	bne.w	8001678 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2201      	movs	r2, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d123      	bne.n	80015a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001580:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3248      	adds	r2, #72	; 0x48
 8001586:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800159a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159c:	6979      	ldr	r1, [r7, #20]
 800159e:	3348      	adds	r3, #72	; 0x48
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d122      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3248      	adds	r2, #72	; 0x48
 80015d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ea:	6979      	ldr	r1, [r7, #20]
 80015ec:	3348      	adds	r3, #72	; 0x48
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800160e:	e007      	b.n	8001620 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800163a:	e007      	b.n	800164c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800166a:	f023 0201 	bic.w	r2, r3, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e006      	b.n	8001686 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
  }
}
 8001686:	4618      	mov	r0, r3
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d12e      	bne.n	8001702 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff fdf6 	bl	80012ac <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c2:	e012      	b.n	80016ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c4:	f7ff fdf2 	bl	80012ac <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d90b      	bls.n	80016ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2205      	movs	r2, #5
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e012      	b.n	8001710 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e5      	bne.n	80016c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e006      	b.n	8001710 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d003      	beq.n	8001744 <HAL_CAN_AddTxMessage+0x2c>
 800173c:	7ffb      	ldrb	r3, [r7, #31]
 800173e:	2b02      	cmp	r3, #2
 8001740:	f040 80ad 	bne.w	800189e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8095 	beq.w	800188e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	0e1b      	lsrs	r3, r3, #24
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	6809      	ldr	r1, [r1, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3318      	adds	r3, #24
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	440b      	add	r3, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00f      	b.n	80017bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3318      	adds	r3, #24
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	440b      	add	r3, r1
 80017ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3318      	adds	r3, #24
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	440b      	add	r3, r1
 80017cc:	3304      	adds	r3, #4
 80017ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	7d1b      	ldrb	r3, [r3, #20]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d111      	bne.n	80017fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3318      	adds	r3, #24
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	6811      	ldr	r1, [r2, #0]
 80017ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3318      	adds	r3, #24
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	3304      	adds	r3, #4
 80017fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3307      	adds	r3, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	061a      	lsls	r2, r3, #24
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3306      	adds	r3, #6
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3305      	adds	r3, #5
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4313      	orrs	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	3204      	adds	r2, #4
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4610      	mov	r0, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	ea43 0200 	orr.w	r2, r3, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001832:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3303      	adds	r3, #3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	061a      	lsls	r2, r3, #24
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3302      	adds	r3, #2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	4313      	orrs	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	4610      	mov	r0, r2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	ea43 0200 	orr.w	r2, r3, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001868:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3318      	adds	r3, #24
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3318      	adds	r3, #24
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e00e      	b.n	80018ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e006      	b.n	80018ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3724      	adds	r7, #36	; 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d003      	beq.n	80018da <HAL_CAN_GetRxMessage+0x24>
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f040 8103 	bne.w	8001ae0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0f7      	b.n	8001aee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0e8      	b.n	8001aee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	331b      	adds	r3, #27
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0204 	and.w	r2, r3, #4
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	331b      	adds	r3, #27
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0d5b      	lsrs	r3, r3, #21
 800194a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e00b      	b.n	800196c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	331b      	adds	r3, #27
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	08db      	lsrs	r3, r3, #3
 8001964:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	331b      	adds	r3, #27
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0202 	and.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	331b      	adds	r3, #27
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	3304      	adds	r3, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2208      	movs	r2, #8
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	e00b      	b.n	80019ba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	331b      	adds	r3, #27
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 020f 	and.w	r2, r3, #15
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	331b      	adds	r3, #27
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	3304      	adds	r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	331b      	adds	r3, #27
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0a1a      	lsrs	r2, r3, #8
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0c1a      	lsrs	r2, r3, #16
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3302      	adds	r3, #2
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e1a      	lsrs	r2, r3, #24
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3304      	adds	r3, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0a1a      	lsrs	r2, r3, #8
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3305      	adds	r3, #5
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0c1a      	lsrs	r2, r3, #16
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3306      	adds	r3, #6
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0e1a      	lsrs	r2, r3, #24
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3307      	adds	r3, #7
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0220 	orr.w	r2, r2, #32
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	e007      	b.n	8001adc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e006      	b.n	8001aee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b08:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d002      	beq.n	8001b16 <HAL_CAN_ActivateNotification+0x1e>
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d109      	bne.n	8001b2a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6959      	ldr	r1, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e006      	b.n	8001b38 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b08a      	sub	sp, #40	; 0x28
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d07c      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d023      	beq.n	8001bda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f983 	bl	8001eb0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001baa:	e016      	b.n	8001bda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e00c      	b.n	8001bda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	e002      	b.n	8001bda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f986 	bl	8001ee6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d024      	beq.n	8001c2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f962 	bl	8001ec2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001bfe:	e016      	b.n	8001c2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e00c      	b.n	8001c2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e002      	b.n	8001c2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f965 	bl	8001ef8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d024      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f941 	bl	8001ed4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c52:	e016      	b.n	8001c82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e00c      	b.n	8001c82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	e002      	b.n	8001c82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f944 	bl	8001f0a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00c      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f933 	bl	8001f2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f91b 	bl	8001f1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2210      	movs	r2, #16
 8001d08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2208      	movs	r2, #8
 8001d24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f90a 	bl	8001f40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7fe fe9f 	bl	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8f3 	bl	8001f52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8eb 	bl	8001f64 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07b      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d072      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d043      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d03e      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e10:	2b60      	cmp	r3, #96	; 0x60
 8001e12:	d02b      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x32a>
 8001e14:	2b60      	cmp	r3, #96	; 0x60
 8001e16:	d82e      	bhi.n	8001e76 <HAL_CAN_IRQHandler+0x334>
 8001e18:	2b50      	cmp	r3, #80	; 0x50
 8001e1a:	d022      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x320>
 8001e1c:	2b50      	cmp	r3, #80	; 0x50
 8001e1e:	d82a      	bhi.n	8001e76 <HAL_CAN_IRQHandler+0x334>
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d019      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x316>
 8001e24:	2b40      	cmp	r3, #64	; 0x40
 8001e26:	d826      	bhi.n	8001e76 <HAL_CAN_IRQHandler+0x334>
 8001e28:	2b30      	cmp	r3, #48	; 0x30
 8001e2a:	d010      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x30c>
 8001e2c:	2b30      	cmp	r3, #48	; 0x30
 8001e2e:	d822      	bhi.n	8001e76 <HAL_CAN_IRQHandler+0x334>
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d002      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x2f8>
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d005      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e38:	e01d      	b.n	8001e76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e42:	e019      	b.n	8001e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e4c:	e014      	b.n	8001e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f043 0320 	orr.w	r3, r3, #32
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e56:	e00f      	b.n	8001e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e60:	e00a      	b.n	8001e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e6a:	e005      	b.n	8001e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e74:	e000      	b.n	8001e78 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f867 	bl	8001f76 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4906      	ldr	r1, [pc, #24]	; (8002020 <__NVIC_EnableIRQ+0x34>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff90 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff2d 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff42 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff90 	bl	8002078 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5f 	bl	8002024 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff35 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b08b      	sub	sp, #44	; 0x2c
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e169      	b.n	800248c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b8:	2201      	movs	r2, #1
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8158 	bne.w	8002486 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a9a      	ldr	r2, [pc, #616]	; (8002444 <HAL_GPIO_Init+0x2a0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d05e      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021e0:	4a98      	ldr	r2, [pc, #608]	; (8002444 <HAL_GPIO_Init+0x2a0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d875      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021e6:	4a98      	ldr	r2, [pc, #608]	; (8002448 <HAL_GPIO_Init+0x2a4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d058      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021ec:	4a96      	ldr	r2, [pc, #600]	; (8002448 <HAL_GPIO_Init+0x2a4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d86f      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021f2:	4a96      	ldr	r2, [pc, #600]	; (800244c <HAL_GPIO_Init+0x2a8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d052      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021f8:	4a94      	ldr	r2, [pc, #592]	; (800244c <HAL_GPIO_Init+0x2a8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d869      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021fe:	4a94      	ldr	r2, [pc, #592]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04c      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002204:	4a92      	ldr	r2, [pc, #584]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d863      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800220a:	4a92      	ldr	r2, [pc, #584]	; (8002454 <HAL_GPIO_Init+0x2b0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d046      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002210:	4a90      	ldr	r2, [pc, #576]	; (8002454 <HAL_GPIO_Init+0x2b0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d85d      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 8002216:	2b12      	cmp	r3, #18
 8002218:	d82a      	bhi.n	8002270 <HAL_GPIO_Init+0xcc>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d859      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <HAL_GPIO_Init+0x80>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	0800229f 	.word	0x0800229f
 8002228:	08002279 	.word	0x08002279
 800222c:	0800228b 	.word	0x0800228b
 8002230:	080022cd 	.word	0x080022cd
 8002234:	080022d3 	.word	0x080022d3
 8002238:	080022d3 	.word	0x080022d3
 800223c:	080022d3 	.word	0x080022d3
 8002240:	080022d3 	.word	0x080022d3
 8002244:	080022d3 	.word	0x080022d3
 8002248:	080022d3 	.word	0x080022d3
 800224c:	080022d3 	.word	0x080022d3
 8002250:	080022d3 	.word	0x080022d3
 8002254:	080022d3 	.word	0x080022d3
 8002258:	080022d3 	.word	0x080022d3
 800225c:	080022d3 	.word	0x080022d3
 8002260:	080022d3 	.word	0x080022d3
 8002264:	080022d3 	.word	0x080022d3
 8002268:	08002281 	.word	0x08002281
 800226c:	08002295 	.word	0x08002295
 8002270:	4a79      	ldr	r2, [pc, #484]	; (8002458 <HAL_GPIO_Init+0x2b4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002276:	e02c      	b.n	80022d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e029      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	3304      	adds	r3, #4
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e024      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	3308      	adds	r3, #8
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e01f      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	330c      	adds	r3, #12
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e01a      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a6:	2304      	movs	r3, #4
 80022a8:	623b      	str	r3, [r7, #32]
          break;
 80022aa:	e013      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	611a      	str	r2, [r3, #16]
          break;
 80022be:	e009      	b.n	80022d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c0:	2308      	movs	r3, #8
 80022c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	615a      	str	r2, [r3, #20]
          break;
 80022ca:	e003      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          break;
 80022d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d801      	bhi.n	80022de <HAL_GPIO_Init+0x13a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_Init+0x13e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d802      	bhi.n	80022f0 <HAL_GPIO_Init+0x14c>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x152>
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3b08      	subs	r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	210f      	movs	r1, #15
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80b1 	beq.w	8002486 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002324:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_GPIO_Init+0x2b8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a4c      	ldr	r2, [pc, #304]	; (800245c <HAL_GPIO_Init+0x2b8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_GPIO_Init+0x2b8>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_GPIO_Init+0x2bc>)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a40      	ldr	r2, [pc, #256]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_GPIO_Init+0x1ec>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <HAL_GPIO_Init+0x2c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_GPIO_Init+0x1e8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3e      	ldr	r2, [pc, #248]	; (800246c <HAL_GPIO_Init+0x2c8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_Init+0x1e4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3d      	ldr	r2, [pc, #244]	; (8002470 <HAL_GPIO_Init+0x2cc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_GPIO_Init+0x1e0>
 8002380:	2303      	movs	r3, #3
 8002382:	e006      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 8002384:	2304      	movs	r3, #4
 8002386:	e004      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 8002388:	2302      	movs	r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_GPIO_Init+0x1ee>
 8002390:	2300      	movs	r3, #0
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	f002 0203 	and.w	r2, r2, #3
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	4093      	lsls	r3, r2
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a2:	492f      	ldr	r1, [pc, #188]	; (8002460 <HAL_GPIO_Init+0x2bc>)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	492c      	ldr	r1, [pc, #176]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4928      	ldr	r1, [pc, #160]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4922      	ldr	r1, [pc, #136]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	491e      	ldr	r1, [pc, #120]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4918      	ldr	r1, [pc, #96]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	43db      	mvns	r3, r3
 8002422:	4914      	ldr	r1, [pc, #80]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 8002424:	4013      	ands	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d021      	beq.n	8002478 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <HAL_GPIO_Init+0x2d0>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e021      	b.n	8002486 <HAL_GPIO_Init+0x2e2>
 8002442:	bf00      	nop
 8002444:	10320000 	.word	0x10320000
 8002448:	10310000 	.word	0x10310000
 800244c:	10220000 	.word	0x10220000
 8002450:	10210000 	.word	0x10210000
 8002454:	10120000 	.word	0x10120000
 8002458:	10110000 	.word	0x10110000
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	40010800 	.word	0x40010800
 8002468:	40010c00 	.word	0x40010c00
 800246c:	40011000 	.word	0x40011000
 8002470:	40011400 	.word	0x40011400
 8002474:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_GPIO_Init+0x304>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	43db      	mvns	r3, r3
 8002480:	4909      	ldr	r1, [pc, #36]	; (80024a8 <HAL_GPIO_Init+0x304>)
 8002482:	4013      	ands	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3301      	adds	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	f47f ae8e 	bne.w	80021b8 <HAL_GPIO_Init+0x14>
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	372c      	adds	r7, #44	; 0x2c
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e272      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b92      	ldr	r3, [pc, #584]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002508:	4b8f      	ldr	r3, [pc, #572]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b89      	ldr	r3, [pc, #548]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x12c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e24c      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7f      	ldr	r2, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7a      	ldr	r2, [pc, #488]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b78      	ldr	r3, [pc, #480]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xbc>
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a71      	ldr	r2, [pc, #452]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002598:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a67      	ldr	r2, [pc, #412]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fe78 	bl	80012ac <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fe74 	bl	80012ac <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e200      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe4>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fe64 	bl	80012ac <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fe60 	bl	80012ac <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1ec      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x10c>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c0      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4939      	ldr	r1, [pc, #228]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fe19 	bl	80012ac <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fe15 	bl	80012ac <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a1      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4927      	ldr	r1, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fdf8 	bl	80012ac <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fdf4 	bl	80012ac <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e180      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03a      	beq.n	8002760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fdd8 	bl	80012ac <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fdd4 	bl	80012ac <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e160      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271e:	2001      	movs	r0, #1
 8002720:	f000 face 	bl	8002cc0 <RCC_Delay>
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe fdbe 	bl	80012ac <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe fdba 	bl	80012ac <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e146      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	42420000 	.word	0x42420000
 8002750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e9      	bne.n	8002734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a6 	beq.w	80028ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a87      	ldr	r2, [pc, #540]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b7f      	ldr	r3, [pc, #508]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7e      	ldr	r2, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fd7b 	bl	80012ac <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fd77 	bl	80012ac <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e103      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027e0:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e02d      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x334>
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a69      	ldr	r2, [pc, #420]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x356>
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a60      	ldr	r2, [pc, #384]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a5d      	ldr	r2, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a57      	ldr	r2, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe fd2b 	bl	80012ac <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fd27 	bl	80012ac <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0b1      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x37e>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fd15 	bl	80012ac <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fd11 	bl	80012ac <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e09b      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8087 	beq.w	80029d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d061      	beq.n	8002994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d146      	bne.n	8002966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fce5 	bl	80012ac <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fce1 	bl	80012ac <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e06d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4921      	ldr	r1, [pc, #132]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a19      	ldr	r1, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	430b      	orrs	r3, r1
 8002932:	491b      	ldr	r1, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fcb5 	bl	80012ac <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fcb1 	bl	80012ac <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e03d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
 8002964:	e035      	b.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fc9e 	bl	80012ac <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fc9a 	bl	80012ac <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e026      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x498>
 8002992:	e01e      	b.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e019      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x500>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0d0      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4965      	ldr	r1, [pc, #404]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b8      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	494d      	ldr	r1, [pc, #308]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d040      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d115      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e073      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06b      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4936      	ldr	r1, [pc, #216]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fbec 	bl	80012ac <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe fbe8 	bl	80012ac <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e053      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d210      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4922      	ldr	r1, [pc, #136]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e032      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4916      	ldr	r1, [pc, #88]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6e:	f000 f821 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1cc>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fb4a 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40022000 	.word	0x40022000
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08005dd4 	.word	0x08005dd4
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x36>
 8002be2:	e027      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	613b      	str	r3, [r7, #16]
      break;
 8002be8:	e027      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c5b      	lsrs	r3, r3, #17
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c16:	fb03 f202 	mul.w	r2, r3, r2
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e004      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	613b      	str	r3, [r7, #16]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	613b      	str	r3, [r7, #16]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	693b      	ldr	r3, [r7, #16]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	007a1200 	.word	0x007a1200
 8002c50:	08005dec 	.word	0x08005dec
 8002c54:	08005dfc 	.word	0x08005dfc
 8002c58:	003d0900 	.word	0x003d0900

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000008 	.word	0x20000008

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff2 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08005de4 	.word	0x08005de4

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff ffde 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0adb      	lsrs	r3, r3, #11
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08005de4 	.word	0x08005de4

08002cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <RCC_Delay+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <RCC_Delay+0x38>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cdc:	bf00      	nop
  }
  while (Delay --);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <RCC_Delay+0x1c>
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e042      	b.n	8002d94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe f900 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f91d 	bl	8002f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d16d      	bne.n	8002e98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_UART_Transmit+0x2c>
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e066      	b.n	8002e9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2221      	movs	r2, #33	; 0x21
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dda:	f7fe fa67 	bl	80012ac <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df4:	d108      	bne.n	8002e08 <HAL_UART_Transmit+0x6c>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e003      	b.n	8002e10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e10:	e02a      	b.n	8002e68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f840 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e036      	b.n	8002e9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e007      	b.n	8002e5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1cf      	bne.n	8002e12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f810 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e006      	b.n	8002e9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b090      	sub	sp, #64	; 0x40
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	e050      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d04c      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec2:	f7fe f9f3 	bl	80012ac <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d241      	bcs.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e5      	bne.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	613b      	str	r3, [r7, #16]
   return(result);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f26:	623a      	str	r2, [r7, #32]
 8002f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	69f9      	ldr	r1, [r7, #28]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e5      	bne.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e00f      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d09f      	beq.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3740      	adds	r7, #64	; 0x40
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fba:	f023 030c 	bic.w	r3, r3, #12
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <UART_SetConfig+0x114>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fe8:	f7ff fe56 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	e002      	b.n	8002ff6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7ff fe3e 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	4a22      	ldr	r2, [pc, #136]	; (8003098 <UART_SetConfig+0x118>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	0119      	lsls	r1, r3, #4
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009a      	lsls	r2, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fbb2 f2f3 	udiv	r2, r2, r3
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <UART_SetConfig+0x118>)
 800302e:	fba3 0302 	umull	r0, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2064      	movs	r0, #100	; 0x64
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	3332      	adds	r3, #50	; 0x32
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <UART_SetConfig+0x118>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304c:	4419      	add	r1, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009a      	lsls	r2, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	fbb2 f2f3 	udiv	r2, r2, r3
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <UART_SetConfig+0x118>)
 8003066:	fba3 0302 	umull	r0, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2064      	movs	r0, #100	; 0x64
 800306e:	fb00 f303 	mul.w	r3, r0, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a07      	ldr	r2, [pc, #28]	; (8003098 <UART_SetConfig+0x118>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	440a      	add	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40013800 	.word	0x40013800
 8003098:	51eb851f 	.word	0x51eb851f

0800309c <__cvt>:
 800309c:	2b00      	cmp	r3, #0
 800309e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a2:	461f      	mov	r7, r3
 80030a4:	bfbb      	ittet	lt
 80030a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80030aa:	461f      	movlt	r7, r3
 80030ac:	2300      	movge	r3, #0
 80030ae:	232d      	movlt	r3, #45	; 0x2d
 80030b0:	b088      	sub	sp, #32
 80030b2:	4614      	mov	r4, r2
 80030b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80030b8:	7013      	strb	r3, [r2, #0]
 80030ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80030bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80030c0:	f023 0820 	bic.w	r8, r3, #32
 80030c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030c8:	d005      	beq.n	80030d6 <__cvt+0x3a>
 80030ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80030ce:	d100      	bne.n	80030d2 <__cvt+0x36>
 80030d0:	3501      	adds	r5, #1
 80030d2:	2302      	movs	r3, #2
 80030d4:	e000      	b.n	80030d8 <__cvt+0x3c>
 80030d6:	2303      	movs	r3, #3
 80030d8:	aa07      	add	r2, sp, #28
 80030da:	9204      	str	r2, [sp, #16]
 80030dc:	aa06      	add	r2, sp, #24
 80030de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80030e2:	e9cd 3500 	strd	r3, r5, [sp]
 80030e6:	4622      	mov	r2, r4
 80030e8:	463b      	mov	r3, r7
 80030ea:	f000 fe71 	bl	8003dd0 <_dtoa_r>
 80030ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80030f2:	4606      	mov	r6, r0
 80030f4:	d102      	bne.n	80030fc <__cvt+0x60>
 80030f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030f8:	07db      	lsls	r3, r3, #31
 80030fa:	d522      	bpl.n	8003142 <__cvt+0xa6>
 80030fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003100:	eb06 0905 	add.w	r9, r6, r5
 8003104:	d110      	bne.n	8003128 <__cvt+0x8c>
 8003106:	7833      	ldrb	r3, [r6, #0]
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d10a      	bne.n	8003122 <__cvt+0x86>
 800310c:	2200      	movs	r2, #0
 800310e:	2300      	movs	r3, #0
 8003110:	4620      	mov	r0, r4
 8003112:	4639      	mov	r1, r7
 8003114:	f7fd fc48 	bl	80009a8 <__aeabi_dcmpeq>
 8003118:	b918      	cbnz	r0, 8003122 <__cvt+0x86>
 800311a:	f1c5 0501 	rsb	r5, r5, #1
 800311e:	f8ca 5000 	str.w	r5, [sl]
 8003122:	f8da 3000 	ldr.w	r3, [sl]
 8003126:	4499      	add	r9, r3
 8003128:	2200      	movs	r2, #0
 800312a:	2300      	movs	r3, #0
 800312c:	4620      	mov	r0, r4
 800312e:	4639      	mov	r1, r7
 8003130:	f7fd fc3a 	bl	80009a8 <__aeabi_dcmpeq>
 8003134:	b108      	cbz	r0, 800313a <__cvt+0x9e>
 8003136:	f8cd 901c 	str.w	r9, [sp, #28]
 800313a:	2230      	movs	r2, #48	; 0x30
 800313c:	9b07      	ldr	r3, [sp, #28]
 800313e:	454b      	cmp	r3, r9
 8003140:	d307      	bcc.n	8003152 <__cvt+0xb6>
 8003142:	4630      	mov	r0, r6
 8003144:	9b07      	ldr	r3, [sp, #28]
 8003146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003148:	1b9b      	subs	r3, r3, r6
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	b008      	add	sp, #32
 800314e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	9107      	str	r1, [sp, #28]
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e7f0      	b.n	800313c <__cvt+0xa0>

0800315a <__exponent>:
 800315a:	4603      	mov	r3, r0
 800315c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800315e:	2900      	cmp	r1, #0
 8003160:	f803 2b02 	strb.w	r2, [r3], #2
 8003164:	bfb6      	itet	lt
 8003166:	222d      	movlt	r2, #45	; 0x2d
 8003168:	222b      	movge	r2, #43	; 0x2b
 800316a:	4249      	neglt	r1, r1
 800316c:	2909      	cmp	r1, #9
 800316e:	7042      	strb	r2, [r0, #1]
 8003170:	dd2a      	ble.n	80031c8 <__exponent+0x6e>
 8003172:	f10d 0207 	add.w	r2, sp, #7
 8003176:	4617      	mov	r7, r2
 8003178:	260a      	movs	r6, #10
 800317a:	fb91 f5f6 	sdiv	r5, r1, r6
 800317e:	4694      	mov	ip, r2
 8003180:	fb06 1415 	mls	r4, r6, r5, r1
 8003184:	3430      	adds	r4, #48	; 0x30
 8003186:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800318a:	460c      	mov	r4, r1
 800318c:	2c63      	cmp	r4, #99	; 0x63
 800318e:	4629      	mov	r1, r5
 8003190:	f102 32ff 	add.w	r2, r2, #4294967295
 8003194:	dcf1      	bgt.n	800317a <__exponent+0x20>
 8003196:	3130      	adds	r1, #48	; 0x30
 8003198:	f1ac 0402 	sub.w	r4, ip, #2
 800319c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80031a0:	4622      	mov	r2, r4
 80031a2:	1c41      	adds	r1, r0, #1
 80031a4:	42ba      	cmp	r2, r7
 80031a6:	d30a      	bcc.n	80031be <__exponent+0x64>
 80031a8:	f10d 0209 	add.w	r2, sp, #9
 80031ac:	eba2 020c 	sub.w	r2, r2, ip
 80031b0:	42bc      	cmp	r4, r7
 80031b2:	bf88      	it	hi
 80031b4:	2200      	movhi	r2, #0
 80031b6:	4413      	add	r3, r2
 80031b8:	1a18      	subs	r0, r3, r0
 80031ba:	b003      	add	sp, #12
 80031bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80031c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80031c6:	e7ed      	b.n	80031a4 <__exponent+0x4a>
 80031c8:	2330      	movs	r3, #48	; 0x30
 80031ca:	3130      	adds	r1, #48	; 0x30
 80031cc:	7083      	strb	r3, [r0, #2]
 80031ce:	70c1      	strb	r1, [r0, #3]
 80031d0:	1d03      	adds	r3, r0, #4
 80031d2:	e7f1      	b.n	80031b8 <__exponent+0x5e>

080031d4 <_printf_float>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	b091      	sub	sp, #68	; 0x44
 80031da:	460c      	mov	r4, r1
 80031dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80031e0:	4616      	mov	r6, r2
 80031e2:	461f      	mov	r7, r3
 80031e4:	4605      	mov	r5, r0
 80031e6:	f000 fce5 	bl	8003bb4 <_localeconv_r>
 80031ea:	6803      	ldr	r3, [r0, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	9309      	str	r3, [sp, #36]	; 0x24
 80031f0:	f7fc ffae 	bl	8000150 <strlen>
 80031f4:	2300      	movs	r3, #0
 80031f6:	930e      	str	r3, [sp, #56]	; 0x38
 80031f8:	f8d8 3000 	ldr.w	r3, [r8]
 80031fc:	900a      	str	r0, [sp, #40]	; 0x28
 80031fe:	3307      	adds	r3, #7
 8003200:	f023 0307 	bic.w	r3, r3, #7
 8003204:	f103 0208 	add.w	r2, r3, #8
 8003208:	f894 9018 	ldrb.w	r9, [r4, #24]
 800320c:	f8d4 b000 	ldr.w	fp, [r4]
 8003210:	f8c8 2000 	str.w	r2, [r8]
 8003214:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003218:	4652      	mov	r2, sl
 800321a:	4643      	mov	r3, r8
 800321c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003220:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003224:	930b      	str	r3, [sp, #44]	; 0x2c
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	4650      	mov	r0, sl
 800322c:	4b9c      	ldr	r3, [pc, #624]	; (80034a0 <_printf_float+0x2cc>)
 800322e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003230:	f7fd fbec 	bl	8000a0c <__aeabi_dcmpun>
 8003234:	bb70      	cbnz	r0, 8003294 <_printf_float+0xc0>
 8003236:	f04f 32ff 	mov.w	r2, #4294967295
 800323a:	4650      	mov	r0, sl
 800323c:	4b98      	ldr	r3, [pc, #608]	; (80034a0 <_printf_float+0x2cc>)
 800323e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003240:	f7fd fbc6 	bl	80009d0 <__aeabi_dcmple>
 8003244:	bb30      	cbnz	r0, 8003294 <_printf_float+0xc0>
 8003246:	2200      	movs	r2, #0
 8003248:	2300      	movs	r3, #0
 800324a:	4650      	mov	r0, sl
 800324c:	4641      	mov	r1, r8
 800324e:	f7fd fbb5 	bl	80009bc <__aeabi_dcmplt>
 8003252:	b110      	cbz	r0, 800325a <_printf_float+0x86>
 8003254:	232d      	movs	r3, #45	; 0x2d
 8003256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800325a:	4a92      	ldr	r2, [pc, #584]	; (80034a4 <_printf_float+0x2d0>)
 800325c:	4b92      	ldr	r3, [pc, #584]	; (80034a8 <_printf_float+0x2d4>)
 800325e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003262:	bf94      	ite	ls
 8003264:	4690      	movls	r8, r2
 8003266:	4698      	movhi	r8, r3
 8003268:	2303      	movs	r3, #3
 800326a:	f04f 0a00 	mov.w	sl, #0
 800326e:	6123      	str	r3, [r4, #16]
 8003270:	f02b 0304 	bic.w	r3, fp, #4
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	4633      	mov	r3, r6
 8003278:	4621      	mov	r1, r4
 800327a:	4628      	mov	r0, r5
 800327c:	9700      	str	r7, [sp, #0]
 800327e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003280:	f000 f9d6 	bl	8003630 <_printf_common>
 8003284:	3001      	adds	r0, #1
 8003286:	f040 8090 	bne.w	80033aa <_printf_float+0x1d6>
 800328a:	f04f 30ff 	mov.w	r0, #4294967295
 800328e:	b011      	add	sp, #68	; 0x44
 8003290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003294:	4652      	mov	r2, sl
 8003296:	4643      	mov	r3, r8
 8003298:	4650      	mov	r0, sl
 800329a:	4641      	mov	r1, r8
 800329c:	f7fd fbb6 	bl	8000a0c <__aeabi_dcmpun>
 80032a0:	b148      	cbz	r0, 80032b6 <_printf_float+0xe2>
 80032a2:	f1b8 0f00 	cmp.w	r8, #0
 80032a6:	bfb8      	it	lt
 80032a8:	232d      	movlt	r3, #45	; 0x2d
 80032aa:	4a80      	ldr	r2, [pc, #512]	; (80034ac <_printf_float+0x2d8>)
 80032ac:	bfb8      	it	lt
 80032ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032b2:	4b7f      	ldr	r3, [pc, #508]	; (80034b0 <_printf_float+0x2dc>)
 80032b4:	e7d3      	b.n	800325e <_printf_float+0x8a>
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	d142      	bne.n	8003346 <_printf_float+0x172>
 80032c0:	2306      	movs	r3, #6
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	9206      	str	r2, [sp, #24]
 80032c8:	aa0e      	add	r2, sp, #56	; 0x38
 80032ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80032ce:	aa0d      	add	r2, sp, #52	; 0x34
 80032d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80032d4:	9203      	str	r2, [sp, #12]
 80032d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80032da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	6863      	ldr	r3, [r4, #4]
 80032e2:	4652      	mov	r2, sl
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4628      	mov	r0, r5
 80032e8:	4643      	mov	r3, r8
 80032ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80032ec:	f7ff fed6 	bl	800309c <__cvt>
 80032f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032f2:	4680      	mov	r8, r0
 80032f4:	2947      	cmp	r1, #71	; 0x47
 80032f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032f8:	d108      	bne.n	800330c <_printf_float+0x138>
 80032fa:	1cc8      	adds	r0, r1, #3
 80032fc:	db02      	blt.n	8003304 <_printf_float+0x130>
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	4299      	cmp	r1, r3
 8003302:	dd40      	ble.n	8003386 <_printf_float+0x1b2>
 8003304:	f1a9 0902 	sub.w	r9, r9, #2
 8003308:	fa5f f989 	uxtb.w	r9, r9
 800330c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003310:	d81f      	bhi.n	8003352 <_printf_float+0x17e>
 8003312:	464a      	mov	r2, r9
 8003314:	3901      	subs	r1, #1
 8003316:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800331a:	910d      	str	r1, [sp, #52]	; 0x34
 800331c:	f7ff ff1d 	bl	800315a <__exponent>
 8003320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003322:	4682      	mov	sl, r0
 8003324:	1813      	adds	r3, r2, r0
 8003326:	2a01      	cmp	r2, #1
 8003328:	6123      	str	r3, [r4, #16]
 800332a:	dc02      	bgt.n	8003332 <_printf_float+0x15e>
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	07d2      	lsls	r2, r2, #31
 8003330:	d501      	bpl.n	8003336 <_printf_float+0x162>
 8003332:	3301      	adds	r3, #1
 8003334:	6123      	str	r3, [r4, #16]
 8003336:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800333a:	2b00      	cmp	r3, #0
 800333c:	d09b      	beq.n	8003276 <_printf_float+0xa2>
 800333e:	232d      	movs	r3, #45	; 0x2d
 8003340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003344:	e797      	b.n	8003276 <_printf_float+0xa2>
 8003346:	2947      	cmp	r1, #71	; 0x47
 8003348:	d1bc      	bne.n	80032c4 <_printf_float+0xf0>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ba      	bne.n	80032c4 <_printf_float+0xf0>
 800334e:	2301      	movs	r3, #1
 8003350:	e7b7      	b.n	80032c2 <_printf_float+0xee>
 8003352:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003356:	d118      	bne.n	800338a <_printf_float+0x1b6>
 8003358:	2900      	cmp	r1, #0
 800335a:	6863      	ldr	r3, [r4, #4]
 800335c:	dd0b      	ble.n	8003376 <_printf_float+0x1a2>
 800335e:	6121      	str	r1, [r4, #16]
 8003360:	b913      	cbnz	r3, 8003368 <_printf_float+0x194>
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	07d0      	lsls	r0, r2, #31
 8003366:	d502      	bpl.n	800336e <_printf_float+0x19a>
 8003368:	3301      	adds	r3, #1
 800336a:	440b      	add	r3, r1
 800336c:	6123      	str	r3, [r4, #16]
 800336e:	f04f 0a00 	mov.w	sl, #0
 8003372:	65a1      	str	r1, [r4, #88]	; 0x58
 8003374:	e7df      	b.n	8003336 <_printf_float+0x162>
 8003376:	b913      	cbnz	r3, 800337e <_printf_float+0x1aa>
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	07d2      	lsls	r2, r2, #31
 800337c:	d501      	bpl.n	8003382 <_printf_float+0x1ae>
 800337e:	3302      	adds	r3, #2
 8003380:	e7f4      	b.n	800336c <_printf_float+0x198>
 8003382:	2301      	movs	r3, #1
 8003384:	e7f2      	b.n	800336c <_printf_float+0x198>
 8003386:	f04f 0967 	mov.w	r9, #103	; 0x67
 800338a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800338c:	4299      	cmp	r1, r3
 800338e:	db05      	blt.n	800339c <_printf_float+0x1c8>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	6121      	str	r1, [r4, #16]
 8003394:	07d8      	lsls	r0, r3, #31
 8003396:	d5ea      	bpl.n	800336e <_printf_float+0x19a>
 8003398:	1c4b      	adds	r3, r1, #1
 800339a:	e7e7      	b.n	800336c <_printf_float+0x198>
 800339c:	2900      	cmp	r1, #0
 800339e:	bfcc      	ite	gt
 80033a0:	2201      	movgt	r2, #1
 80033a2:	f1c1 0202 	rsble	r2, r1, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	e7e0      	b.n	800336c <_printf_float+0x198>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	055a      	lsls	r2, r3, #21
 80033ae:	d407      	bmi.n	80033c0 <_printf_float+0x1ec>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	4642      	mov	r2, r8
 80033b4:	4631      	mov	r1, r6
 80033b6:	4628      	mov	r0, r5
 80033b8:	47b8      	blx	r7
 80033ba:	3001      	adds	r0, #1
 80033bc:	d12b      	bne.n	8003416 <_printf_float+0x242>
 80033be:	e764      	b.n	800328a <_printf_float+0xb6>
 80033c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033c4:	f240 80dd 	bls.w	8003582 <_printf_float+0x3ae>
 80033c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033cc:	2200      	movs	r2, #0
 80033ce:	2300      	movs	r3, #0
 80033d0:	f7fd faea 	bl	80009a8 <__aeabi_dcmpeq>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d033      	beq.n	8003440 <_printf_float+0x26c>
 80033d8:	2301      	movs	r3, #1
 80033da:	4631      	mov	r1, r6
 80033dc:	4628      	mov	r0, r5
 80033de:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <_printf_float+0x2e0>)
 80033e0:	47b8      	blx	r7
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f af51 	beq.w	800328a <_printf_float+0xb6>
 80033e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033ec:	429a      	cmp	r2, r3
 80033ee:	db02      	blt.n	80033f6 <_printf_float+0x222>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	07d8      	lsls	r0, r3, #31
 80033f4:	d50f      	bpl.n	8003416 <_printf_float+0x242>
 80033f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033fa:	4631      	mov	r1, r6
 80033fc:	4628      	mov	r0, r5
 80033fe:	47b8      	blx	r7
 8003400:	3001      	adds	r0, #1
 8003402:	f43f af42 	beq.w	800328a <_printf_float+0xb6>
 8003406:	f04f 0800 	mov.w	r8, #0
 800340a:	f104 091a 	add.w	r9, r4, #26
 800340e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003410:	3b01      	subs	r3, #1
 8003412:	4543      	cmp	r3, r8
 8003414:	dc09      	bgt.n	800342a <_printf_float+0x256>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	079b      	lsls	r3, r3, #30
 800341a:	f100 8104 	bmi.w	8003626 <_printf_float+0x452>
 800341e:	68e0      	ldr	r0, [r4, #12]
 8003420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003422:	4298      	cmp	r0, r3
 8003424:	bfb8      	it	lt
 8003426:	4618      	movlt	r0, r3
 8003428:	e731      	b.n	800328e <_printf_float+0xba>
 800342a:	2301      	movs	r3, #1
 800342c:	464a      	mov	r2, r9
 800342e:	4631      	mov	r1, r6
 8003430:	4628      	mov	r0, r5
 8003432:	47b8      	blx	r7
 8003434:	3001      	adds	r0, #1
 8003436:	f43f af28 	beq.w	800328a <_printf_float+0xb6>
 800343a:	f108 0801 	add.w	r8, r8, #1
 800343e:	e7e6      	b.n	800340e <_printf_float+0x23a>
 8003440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	dc38      	bgt.n	80034b8 <_printf_float+0x2e4>
 8003446:	2301      	movs	r3, #1
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <_printf_float+0x2e0>)
 800344e:	47b8      	blx	r7
 8003450:	3001      	adds	r0, #1
 8003452:	f43f af1a 	beq.w	800328a <_printf_float+0xb6>
 8003456:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800345a:	4313      	orrs	r3, r2
 800345c:	d102      	bne.n	8003464 <_printf_float+0x290>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	07d9      	lsls	r1, r3, #31
 8003462:	d5d8      	bpl.n	8003416 <_printf_float+0x242>
 8003464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003468:	4631      	mov	r1, r6
 800346a:	4628      	mov	r0, r5
 800346c:	47b8      	blx	r7
 800346e:	3001      	adds	r0, #1
 8003470:	f43f af0b 	beq.w	800328a <_printf_float+0xb6>
 8003474:	f04f 0900 	mov.w	r9, #0
 8003478:	f104 0a1a 	add.w	sl, r4, #26
 800347c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347e:	425b      	negs	r3, r3
 8003480:	454b      	cmp	r3, r9
 8003482:	dc01      	bgt.n	8003488 <_printf_float+0x2b4>
 8003484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003486:	e794      	b.n	80033b2 <_printf_float+0x1de>
 8003488:	2301      	movs	r3, #1
 800348a:	4652      	mov	r2, sl
 800348c:	4631      	mov	r1, r6
 800348e:	4628      	mov	r0, r5
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	f43f aef9 	beq.w	800328a <_printf_float+0xb6>
 8003498:	f109 0901 	add.w	r9, r9, #1
 800349c:	e7ee      	b.n	800347c <_printf_float+0x2a8>
 800349e:	bf00      	nop
 80034a0:	7fefffff 	.word	0x7fefffff
 80034a4:	08005dfe 	.word	0x08005dfe
 80034a8:	08005e02 	.word	0x08005e02
 80034ac:	08005e06 	.word	0x08005e06
 80034b0:	08005e0a 	.word	0x08005e0a
 80034b4:	08005e0e 	.word	0x08005e0e
 80034b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034bc:	429a      	cmp	r2, r3
 80034be:	bfa8      	it	ge
 80034c0:	461a      	movge	r2, r3
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	4691      	mov	r9, r2
 80034c6:	dc37      	bgt.n	8003538 <_printf_float+0x364>
 80034c8:	f04f 0b00 	mov.w	fp, #0
 80034cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034d0:	f104 021a 	add.w	r2, r4, #26
 80034d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80034d8:	ebaa 0309 	sub.w	r3, sl, r9
 80034dc:	455b      	cmp	r3, fp
 80034de:	dc33      	bgt.n	8003548 <_printf_float+0x374>
 80034e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034e4:	429a      	cmp	r2, r3
 80034e6:	db3b      	blt.n	8003560 <_printf_float+0x38c>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	07da      	lsls	r2, r3, #31
 80034ec:	d438      	bmi.n	8003560 <_printf_float+0x38c>
 80034ee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80034f2:	eba2 0903 	sub.w	r9, r2, r3
 80034f6:	eba2 020a 	sub.w	r2, r2, sl
 80034fa:	4591      	cmp	r9, r2
 80034fc:	bfa8      	it	ge
 80034fe:	4691      	movge	r9, r2
 8003500:	f1b9 0f00 	cmp.w	r9, #0
 8003504:	dc34      	bgt.n	8003570 <_printf_float+0x39c>
 8003506:	f04f 0800 	mov.w	r8, #0
 800350a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800350e:	f104 0a1a 	add.w	sl, r4, #26
 8003512:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	eba3 0309 	sub.w	r3, r3, r9
 800351c:	4543      	cmp	r3, r8
 800351e:	f77f af7a 	ble.w	8003416 <_printf_float+0x242>
 8003522:	2301      	movs	r3, #1
 8003524:	4652      	mov	r2, sl
 8003526:	4631      	mov	r1, r6
 8003528:	4628      	mov	r0, r5
 800352a:	47b8      	blx	r7
 800352c:	3001      	adds	r0, #1
 800352e:	f43f aeac 	beq.w	800328a <_printf_float+0xb6>
 8003532:	f108 0801 	add.w	r8, r8, #1
 8003536:	e7ec      	b.n	8003512 <_printf_float+0x33e>
 8003538:	4613      	mov	r3, r2
 800353a:	4631      	mov	r1, r6
 800353c:	4642      	mov	r2, r8
 800353e:	4628      	mov	r0, r5
 8003540:	47b8      	blx	r7
 8003542:	3001      	adds	r0, #1
 8003544:	d1c0      	bne.n	80034c8 <_printf_float+0x2f4>
 8003546:	e6a0      	b.n	800328a <_printf_float+0xb6>
 8003548:	2301      	movs	r3, #1
 800354a:	4631      	mov	r1, r6
 800354c:	4628      	mov	r0, r5
 800354e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003550:	47b8      	blx	r7
 8003552:	3001      	adds	r0, #1
 8003554:	f43f ae99 	beq.w	800328a <_printf_float+0xb6>
 8003558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800355a:	f10b 0b01 	add.w	fp, fp, #1
 800355e:	e7b9      	b.n	80034d4 <_printf_float+0x300>
 8003560:	4631      	mov	r1, r6
 8003562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003566:	4628      	mov	r0, r5
 8003568:	47b8      	blx	r7
 800356a:	3001      	adds	r0, #1
 800356c:	d1bf      	bne.n	80034ee <_printf_float+0x31a>
 800356e:	e68c      	b.n	800328a <_printf_float+0xb6>
 8003570:	464b      	mov	r3, r9
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	eb08 020a 	add.w	r2, r8, sl
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	d1c2      	bne.n	8003506 <_printf_float+0x332>
 8003580:	e683      	b.n	800328a <_printf_float+0xb6>
 8003582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003584:	2a01      	cmp	r2, #1
 8003586:	dc01      	bgt.n	800358c <_printf_float+0x3b8>
 8003588:	07db      	lsls	r3, r3, #31
 800358a:	d539      	bpl.n	8003600 <_printf_float+0x42c>
 800358c:	2301      	movs	r3, #1
 800358e:	4642      	mov	r2, r8
 8003590:	4631      	mov	r1, r6
 8003592:	4628      	mov	r0, r5
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f ae77 	beq.w	800328a <_printf_float+0xb6>
 800359c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	f43f ae6f 	beq.w	800328a <_printf_float+0xb6>
 80035ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035b0:	2200      	movs	r2, #0
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80035b8:	f7fd f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80035bc:	b9d8      	cbnz	r0, 80035f6 <_printf_float+0x422>
 80035be:	f109 33ff 	add.w	r3, r9, #4294967295
 80035c2:	f108 0201 	add.w	r2, r8, #1
 80035c6:	4631      	mov	r1, r6
 80035c8:	4628      	mov	r0, r5
 80035ca:	47b8      	blx	r7
 80035cc:	3001      	adds	r0, #1
 80035ce:	d10e      	bne.n	80035ee <_printf_float+0x41a>
 80035d0:	e65b      	b.n	800328a <_printf_float+0xb6>
 80035d2:	2301      	movs	r3, #1
 80035d4:	464a      	mov	r2, r9
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f ae54 	beq.w	800328a <_printf_float+0xb6>
 80035e2:	f108 0801 	add.w	r8, r8, #1
 80035e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035e8:	3b01      	subs	r3, #1
 80035ea:	4543      	cmp	r3, r8
 80035ec:	dcf1      	bgt.n	80035d2 <_printf_float+0x3fe>
 80035ee:	4653      	mov	r3, sl
 80035f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035f4:	e6de      	b.n	80033b4 <_printf_float+0x1e0>
 80035f6:	f04f 0800 	mov.w	r8, #0
 80035fa:	f104 091a 	add.w	r9, r4, #26
 80035fe:	e7f2      	b.n	80035e6 <_printf_float+0x412>
 8003600:	2301      	movs	r3, #1
 8003602:	4642      	mov	r2, r8
 8003604:	e7df      	b.n	80035c6 <_printf_float+0x3f2>
 8003606:	2301      	movs	r3, #1
 8003608:	464a      	mov	r2, r9
 800360a:	4631      	mov	r1, r6
 800360c:	4628      	mov	r0, r5
 800360e:	47b8      	blx	r7
 8003610:	3001      	adds	r0, #1
 8003612:	f43f ae3a 	beq.w	800328a <_printf_float+0xb6>
 8003616:	f108 0801 	add.w	r8, r8, #1
 800361a:	68e3      	ldr	r3, [r4, #12]
 800361c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800361e:	1a5b      	subs	r3, r3, r1
 8003620:	4543      	cmp	r3, r8
 8003622:	dcf0      	bgt.n	8003606 <_printf_float+0x432>
 8003624:	e6fb      	b.n	800341e <_printf_float+0x24a>
 8003626:	f04f 0800 	mov.w	r8, #0
 800362a:	f104 0919 	add.w	r9, r4, #25
 800362e:	e7f4      	b.n	800361a <_printf_float+0x446>

08003630 <_printf_common>:
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	4616      	mov	r6, r2
 8003636:	4699      	mov	r9, r3
 8003638:	688a      	ldr	r2, [r1, #8]
 800363a:	690b      	ldr	r3, [r1, #16]
 800363c:	4607      	mov	r7, r0
 800363e:	4293      	cmp	r3, r2
 8003640:	bfb8      	it	lt
 8003642:	4613      	movlt	r3, r2
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800364a:	460c      	mov	r4, r1
 800364c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003650:	b10a      	cbz	r2, 8003656 <_printf_common+0x26>
 8003652:	3301      	adds	r3, #1
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	0699      	lsls	r1, r3, #26
 800365a:	bf42      	ittt	mi
 800365c:	6833      	ldrmi	r3, [r6, #0]
 800365e:	3302      	addmi	r3, #2
 8003660:	6033      	strmi	r3, [r6, #0]
 8003662:	6825      	ldr	r5, [r4, #0]
 8003664:	f015 0506 	ands.w	r5, r5, #6
 8003668:	d106      	bne.n	8003678 <_printf_common+0x48>
 800366a:	f104 0a19 	add.w	sl, r4, #25
 800366e:	68e3      	ldr	r3, [r4, #12]
 8003670:	6832      	ldr	r2, [r6, #0]
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	42ab      	cmp	r3, r5
 8003676:	dc2b      	bgt.n	80036d0 <_printf_common+0xa0>
 8003678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800367c:	1e13      	subs	r3, r2, #0
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	bf18      	it	ne
 8003682:	2301      	movne	r3, #1
 8003684:	0692      	lsls	r2, r2, #26
 8003686:	d430      	bmi.n	80036ea <_printf_common+0xba>
 8003688:	4649      	mov	r1, r9
 800368a:	4638      	mov	r0, r7
 800368c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003690:	47c0      	blx	r8
 8003692:	3001      	adds	r0, #1
 8003694:	d023      	beq.n	80036de <_printf_common+0xae>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	6922      	ldr	r2, [r4, #16]
 800369a:	f003 0306 	and.w	r3, r3, #6
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf14      	ite	ne
 80036a2:	2500      	movne	r5, #0
 80036a4:	6833      	ldreq	r3, [r6, #0]
 80036a6:	f04f 0600 	mov.w	r6, #0
 80036aa:	bf08      	it	eq
 80036ac:	68e5      	ldreq	r5, [r4, #12]
 80036ae:	f104 041a 	add.w	r4, r4, #26
 80036b2:	bf08      	it	eq
 80036b4:	1aed      	subeq	r5, r5, r3
 80036b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036ba:	bf08      	it	eq
 80036bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bfc4      	itt	gt
 80036c4:	1a9b      	subgt	r3, r3, r2
 80036c6:	18ed      	addgt	r5, r5, r3
 80036c8:	42b5      	cmp	r5, r6
 80036ca:	d11a      	bne.n	8003702 <_printf_common+0xd2>
 80036cc:	2000      	movs	r0, #0
 80036ce:	e008      	b.n	80036e2 <_printf_common+0xb2>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4652      	mov	r2, sl
 80036d4:	4649      	mov	r1, r9
 80036d6:	4638      	mov	r0, r7
 80036d8:	47c0      	blx	r8
 80036da:	3001      	adds	r0, #1
 80036dc:	d103      	bne.n	80036e6 <_printf_common+0xb6>
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e6:	3501      	adds	r5, #1
 80036e8:	e7c1      	b.n	800366e <_printf_common+0x3e>
 80036ea:	2030      	movs	r0, #48	; 0x30
 80036ec:	18e1      	adds	r1, r4, r3
 80036ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036f8:	4422      	add	r2, r4
 80036fa:	3302      	adds	r3, #2
 80036fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003700:	e7c2      	b.n	8003688 <_printf_common+0x58>
 8003702:	2301      	movs	r3, #1
 8003704:	4622      	mov	r2, r4
 8003706:	4649      	mov	r1, r9
 8003708:	4638      	mov	r0, r7
 800370a:	47c0      	blx	r8
 800370c:	3001      	adds	r0, #1
 800370e:	d0e6      	beq.n	80036de <_printf_common+0xae>
 8003710:	3601      	adds	r6, #1
 8003712:	e7d9      	b.n	80036c8 <_printf_common+0x98>

08003714 <_printf_i>:
 8003714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003718:	7e0f      	ldrb	r7, [r1, #24]
 800371a:	4691      	mov	r9, r2
 800371c:	2f78      	cmp	r7, #120	; 0x78
 800371e:	4680      	mov	r8, r0
 8003720:	460c      	mov	r4, r1
 8003722:	469a      	mov	sl, r3
 8003724:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800372a:	d807      	bhi.n	800373c <_printf_i+0x28>
 800372c:	2f62      	cmp	r7, #98	; 0x62
 800372e:	d80a      	bhi.n	8003746 <_printf_i+0x32>
 8003730:	2f00      	cmp	r7, #0
 8003732:	f000 80d5 	beq.w	80038e0 <_printf_i+0x1cc>
 8003736:	2f58      	cmp	r7, #88	; 0x58
 8003738:	f000 80c1 	beq.w	80038be <_printf_i+0x1aa>
 800373c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003744:	e03a      	b.n	80037bc <_printf_i+0xa8>
 8003746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800374a:	2b15      	cmp	r3, #21
 800374c:	d8f6      	bhi.n	800373c <_printf_i+0x28>
 800374e:	a101      	add	r1, pc, #4	; (adr r1, 8003754 <_printf_i+0x40>)
 8003750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003754:	080037ad 	.word	0x080037ad
 8003758:	080037c1 	.word	0x080037c1
 800375c:	0800373d 	.word	0x0800373d
 8003760:	0800373d 	.word	0x0800373d
 8003764:	0800373d 	.word	0x0800373d
 8003768:	0800373d 	.word	0x0800373d
 800376c:	080037c1 	.word	0x080037c1
 8003770:	0800373d 	.word	0x0800373d
 8003774:	0800373d 	.word	0x0800373d
 8003778:	0800373d 	.word	0x0800373d
 800377c:	0800373d 	.word	0x0800373d
 8003780:	080038c7 	.word	0x080038c7
 8003784:	080037ed 	.word	0x080037ed
 8003788:	08003881 	.word	0x08003881
 800378c:	0800373d 	.word	0x0800373d
 8003790:	0800373d 	.word	0x0800373d
 8003794:	080038e9 	.word	0x080038e9
 8003798:	0800373d 	.word	0x0800373d
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	0800373d 	.word	0x0800373d
 80037a4:	0800373d 	.word	0x0800373d
 80037a8:	08003889 	.word	0x08003889
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	602a      	str	r2, [r5, #0]
 80037b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037bc:	2301      	movs	r3, #1
 80037be:	e0a0      	b.n	8003902 <_printf_i+0x1ee>
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	0607      	lsls	r7, r0, #24
 80037c6:	f103 0104 	add.w	r1, r3, #4
 80037ca:	6029      	str	r1, [r5, #0]
 80037cc:	d501      	bpl.n	80037d2 <_printf_i+0xbe>
 80037ce:	681e      	ldr	r6, [r3, #0]
 80037d0:	e003      	b.n	80037da <_printf_i+0xc6>
 80037d2:	0646      	lsls	r6, r0, #25
 80037d4:	d5fb      	bpl.n	80037ce <_printf_i+0xba>
 80037d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037da:	2e00      	cmp	r6, #0
 80037dc:	da03      	bge.n	80037e6 <_printf_i+0xd2>
 80037de:	232d      	movs	r3, #45	; 0x2d
 80037e0:	4276      	negs	r6, r6
 80037e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e6:	230a      	movs	r3, #10
 80037e8:	4859      	ldr	r0, [pc, #356]	; (8003950 <_printf_i+0x23c>)
 80037ea:	e012      	b.n	8003812 <_printf_i+0xfe>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	1d19      	adds	r1, r3, #4
 80037f2:	6029      	str	r1, [r5, #0]
 80037f4:	0605      	lsls	r5, r0, #24
 80037f6:	d501      	bpl.n	80037fc <_printf_i+0xe8>
 80037f8:	681e      	ldr	r6, [r3, #0]
 80037fa:	e002      	b.n	8003802 <_printf_i+0xee>
 80037fc:	0641      	lsls	r1, r0, #25
 80037fe:	d5fb      	bpl.n	80037f8 <_printf_i+0xe4>
 8003800:	881e      	ldrh	r6, [r3, #0]
 8003802:	2f6f      	cmp	r7, #111	; 0x6f
 8003804:	bf0c      	ite	eq
 8003806:	2308      	moveq	r3, #8
 8003808:	230a      	movne	r3, #10
 800380a:	4851      	ldr	r0, [pc, #324]	; (8003950 <_printf_i+0x23c>)
 800380c:	2100      	movs	r1, #0
 800380e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003812:	6865      	ldr	r5, [r4, #4]
 8003814:	2d00      	cmp	r5, #0
 8003816:	bfa8      	it	ge
 8003818:	6821      	ldrge	r1, [r4, #0]
 800381a:	60a5      	str	r5, [r4, #8]
 800381c:	bfa4      	itt	ge
 800381e:	f021 0104 	bicge.w	r1, r1, #4
 8003822:	6021      	strge	r1, [r4, #0]
 8003824:	b90e      	cbnz	r6, 800382a <_printf_i+0x116>
 8003826:	2d00      	cmp	r5, #0
 8003828:	d04b      	beq.n	80038c2 <_printf_i+0x1ae>
 800382a:	4615      	mov	r5, r2
 800382c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003830:	fb03 6711 	mls	r7, r3, r1, r6
 8003834:	5dc7      	ldrb	r7, [r0, r7]
 8003836:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800383a:	4637      	mov	r7, r6
 800383c:	42bb      	cmp	r3, r7
 800383e:	460e      	mov	r6, r1
 8003840:	d9f4      	bls.n	800382c <_printf_i+0x118>
 8003842:	2b08      	cmp	r3, #8
 8003844:	d10b      	bne.n	800385e <_printf_i+0x14a>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	07de      	lsls	r6, r3, #31
 800384a:	d508      	bpl.n	800385e <_printf_i+0x14a>
 800384c:	6923      	ldr	r3, [r4, #16]
 800384e:	6861      	ldr	r1, [r4, #4]
 8003850:	4299      	cmp	r1, r3
 8003852:	bfde      	ittt	le
 8003854:	2330      	movle	r3, #48	; 0x30
 8003856:	f805 3c01 	strble.w	r3, [r5, #-1]
 800385a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800385e:	1b52      	subs	r2, r2, r5
 8003860:	6122      	str	r2, [r4, #16]
 8003862:	464b      	mov	r3, r9
 8003864:	4621      	mov	r1, r4
 8003866:	4640      	mov	r0, r8
 8003868:	f8cd a000 	str.w	sl, [sp]
 800386c:	aa03      	add	r2, sp, #12
 800386e:	f7ff fedf 	bl	8003630 <_printf_common>
 8003872:	3001      	adds	r0, #1
 8003874:	d14a      	bne.n	800390c <_printf_i+0x1f8>
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	b004      	add	sp, #16
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	f043 0320 	orr.w	r3, r3, #32
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	2778      	movs	r7, #120	; 0x78
 800388a:	4832      	ldr	r0, [pc, #200]	; (8003954 <_printf_i+0x240>)
 800388c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	6829      	ldr	r1, [r5, #0]
 8003894:	061f      	lsls	r7, r3, #24
 8003896:	f851 6b04 	ldr.w	r6, [r1], #4
 800389a:	d402      	bmi.n	80038a2 <_printf_i+0x18e>
 800389c:	065f      	lsls	r7, r3, #25
 800389e:	bf48      	it	mi
 80038a0:	b2b6      	uxthmi	r6, r6
 80038a2:	07df      	lsls	r7, r3, #31
 80038a4:	bf48      	it	mi
 80038a6:	f043 0320 	orrmi.w	r3, r3, #32
 80038aa:	6029      	str	r1, [r5, #0]
 80038ac:	bf48      	it	mi
 80038ae:	6023      	strmi	r3, [r4, #0]
 80038b0:	b91e      	cbnz	r6, 80038ba <_printf_i+0x1a6>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	f023 0320 	bic.w	r3, r3, #32
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	2310      	movs	r3, #16
 80038bc:	e7a6      	b.n	800380c <_printf_i+0xf8>
 80038be:	4824      	ldr	r0, [pc, #144]	; (8003950 <_printf_i+0x23c>)
 80038c0:	e7e4      	b.n	800388c <_printf_i+0x178>
 80038c2:	4615      	mov	r5, r2
 80038c4:	e7bd      	b.n	8003842 <_printf_i+0x12e>
 80038c6:	682b      	ldr	r3, [r5, #0]
 80038c8:	6826      	ldr	r6, [r4, #0]
 80038ca:	1d18      	adds	r0, r3, #4
 80038cc:	6961      	ldr	r1, [r4, #20]
 80038ce:	6028      	str	r0, [r5, #0]
 80038d0:	0635      	lsls	r5, r6, #24
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	d501      	bpl.n	80038da <_printf_i+0x1c6>
 80038d6:	6019      	str	r1, [r3, #0]
 80038d8:	e002      	b.n	80038e0 <_printf_i+0x1cc>
 80038da:	0670      	lsls	r0, r6, #25
 80038dc:	d5fb      	bpl.n	80038d6 <_printf_i+0x1c2>
 80038de:	8019      	strh	r1, [r3, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	4615      	mov	r5, r2
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	e7bc      	b.n	8003862 <_printf_i+0x14e>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	2100      	movs	r1, #0
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	602a      	str	r2, [r5, #0]
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	6862      	ldr	r2, [r4, #4]
 80038f4:	4628      	mov	r0, r5
 80038f6:	f000 f9d4 	bl	8003ca2 <memchr>
 80038fa:	b108      	cbz	r0, 8003900 <_printf_i+0x1ec>
 80038fc:	1b40      	subs	r0, r0, r5
 80038fe:	6060      	str	r0, [r4, #4]
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	6123      	str	r3, [r4, #16]
 8003904:	2300      	movs	r3, #0
 8003906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800390a:	e7aa      	b.n	8003862 <_printf_i+0x14e>
 800390c:	462a      	mov	r2, r5
 800390e:	4649      	mov	r1, r9
 8003910:	4640      	mov	r0, r8
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	47d0      	blx	sl
 8003916:	3001      	adds	r0, #1
 8003918:	d0ad      	beq.n	8003876 <_printf_i+0x162>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	079b      	lsls	r3, r3, #30
 800391e:	d413      	bmi.n	8003948 <_printf_i+0x234>
 8003920:	68e0      	ldr	r0, [r4, #12]
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	4298      	cmp	r0, r3
 8003926:	bfb8      	it	lt
 8003928:	4618      	movlt	r0, r3
 800392a:	e7a6      	b.n	800387a <_printf_i+0x166>
 800392c:	2301      	movs	r3, #1
 800392e:	4632      	mov	r2, r6
 8003930:	4649      	mov	r1, r9
 8003932:	4640      	mov	r0, r8
 8003934:	47d0      	blx	sl
 8003936:	3001      	adds	r0, #1
 8003938:	d09d      	beq.n	8003876 <_printf_i+0x162>
 800393a:	3501      	adds	r5, #1
 800393c:	68e3      	ldr	r3, [r4, #12]
 800393e:	9903      	ldr	r1, [sp, #12]
 8003940:	1a5b      	subs	r3, r3, r1
 8003942:	42ab      	cmp	r3, r5
 8003944:	dcf2      	bgt.n	800392c <_printf_i+0x218>
 8003946:	e7eb      	b.n	8003920 <_printf_i+0x20c>
 8003948:	2500      	movs	r5, #0
 800394a:	f104 0619 	add.w	r6, r4, #25
 800394e:	e7f5      	b.n	800393c <_printf_i+0x228>
 8003950:	08005e10 	.word	0x08005e10
 8003954:	08005e21 	.word	0x08005e21

08003958 <std>:
 8003958:	2300      	movs	r3, #0
 800395a:	b510      	push	{r4, lr}
 800395c:	4604      	mov	r4, r0
 800395e:	e9c0 3300 	strd	r3, r3, [r0]
 8003962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003966:	6083      	str	r3, [r0, #8]
 8003968:	8181      	strh	r1, [r0, #12]
 800396a:	6643      	str	r3, [r0, #100]	; 0x64
 800396c:	81c2      	strh	r2, [r0, #14]
 800396e:	6183      	str	r3, [r0, #24]
 8003970:	4619      	mov	r1, r3
 8003972:	2208      	movs	r2, #8
 8003974:	305c      	adds	r0, #92	; 0x5c
 8003976:	f000 f914 	bl	8003ba2 <memset>
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <std+0x58>)
 800397c:	6224      	str	r4, [r4, #32]
 800397e:	6263      	str	r3, [r4, #36]	; 0x24
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <std+0x5c>)
 8003982:	62a3      	str	r3, [r4, #40]	; 0x28
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <std+0x60>)
 8003986:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <std+0x64>)
 800398a:	6323      	str	r3, [r4, #48]	; 0x30
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <std+0x68>)
 800398e:	429c      	cmp	r4, r3
 8003990:	d006      	beq.n	80039a0 <std+0x48>
 8003992:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003996:	4294      	cmp	r4, r2
 8003998:	d002      	beq.n	80039a0 <std+0x48>
 800399a:	33d0      	adds	r3, #208	; 0xd0
 800399c:	429c      	cmp	r4, r3
 800399e:	d105      	bne.n	80039ac <std+0x54>
 80039a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a8:	f000 b978 	b.w	8003c9c <__retarget_lock_init_recursive>
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	08003b1d 	.word	0x08003b1d
 80039b4:	08003b3f 	.word	0x08003b3f
 80039b8:	08003b77 	.word	0x08003b77
 80039bc:	08003b9b 	.word	0x08003b9b
 80039c0:	200002ec 	.word	0x200002ec

080039c4 <stdio_exit_handler>:
 80039c4:	4a02      	ldr	r2, [pc, #8]	; (80039d0 <stdio_exit_handler+0xc>)
 80039c6:	4903      	ldr	r1, [pc, #12]	; (80039d4 <stdio_exit_handler+0x10>)
 80039c8:	4803      	ldr	r0, [pc, #12]	; (80039d8 <stdio_exit_handler+0x14>)
 80039ca:	f000 b869 	b.w	8003aa0 <_fwalk_sglue>
 80039ce:	bf00      	nop
 80039d0:	20000014 	.word	0x20000014
 80039d4:	08005635 	.word	0x08005635
 80039d8:	20000020 	.word	0x20000020

080039dc <cleanup_stdio>:
 80039dc:	6841      	ldr	r1, [r0, #4]
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <cleanup_stdio+0x34>)
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4299      	cmp	r1, r3
 80039e4:	4604      	mov	r4, r0
 80039e6:	d001      	beq.n	80039ec <cleanup_stdio+0x10>
 80039e8:	f001 fe24 	bl	8005634 <_fflush_r>
 80039ec:	68a1      	ldr	r1, [r4, #8]
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <cleanup_stdio+0x38>)
 80039f0:	4299      	cmp	r1, r3
 80039f2:	d002      	beq.n	80039fa <cleanup_stdio+0x1e>
 80039f4:	4620      	mov	r0, r4
 80039f6:	f001 fe1d 	bl	8005634 <_fflush_r>
 80039fa:	68e1      	ldr	r1, [r4, #12]
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <cleanup_stdio+0x3c>)
 80039fe:	4299      	cmp	r1, r3
 8003a00:	d004      	beq.n	8003a0c <cleanup_stdio+0x30>
 8003a02:	4620      	mov	r0, r4
 8003a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a08:	f001 be14 	b.w	8005634 <_fflush_r>
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	bf00      	nop
 8003a10:	200002ec 	.word	0x200002ec
 8003a14:	20000354 	.word	0x20000354
 8003a18:	200003bc 	.word	0x200003bc

08003a1c <global_stdio_init.part.0>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <global_stdio_init.part.0+0x30>)
 8003a20:	4c0b      	ldr	r4, [pc, #44]	; (8003a50 <global_stdio_init.part.0+0x34>)
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <global_stdio_init.part.0+0x38>)
 8003a24:	4620      	mov	r0, r4
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	2104      	movs	r1, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f7ff ff94 	bl	8003958 <std>
 8003a30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a34:	2201      	movs	r2, #1
 8003a36:	2109      	movs	r1, #9
 8003a38:	f7ff ff8e 	bl	8003958 <std>
 8003a3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a40:	2202      	movs	r2, #2
 8003a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a46:	2112      	movs	r1, #18
 8003a48:	f7ff bf86 	b.w	8003958 <std>
 8003a4c:	20000424 	.word	0x20000424
 8003a50:	200002ec 	.word	0x200002ec
 8003a54:	080039c5 	.word	0x080039c5

08003a58 <__sfp_lock_acquire>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__sfp_lock_acquire+0x8>)
 8003a5a:	f000 b920 	b.w	8003c9e <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	2000042d 	.word	0x2000042d

08003a64 <__sfp_lock_release>:
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <__sfp_lock_release+0x8>)
 8003a66:	f000 b91b 	b.w	8003ca0 <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	2000042d 	.word	0x2000042d

08003a70 <__sinit>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	4604      	mov	r4, r0
 8003a74:	f7ff fff0 	bl	8003a58 <__sfp_lock_acquire>
 8003a78:	6a23      	ldr	r3, [r4, #32]
 8003a7a:	b11b      	cbz	r3, 8003a84 <__sinit+0x14>
 8003a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a80:	f7ff bff0 	b.w	8003a64 <__sfp_lock_release>
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__sinit+0x28>)
 8003a86:	6223      	str	r3, [r4, #32]
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <__sinit+0x2c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f5      	bne.n	8003a7c <__sinit+0xc>
 8003a90:	f7ff ffc4 	bl	8003a1c <global_stdio_init.part.0>
 8003a94:	e7f2      	b.n	8003a7c <__sinit+0xc>
 8003a96:	bf00      	nop
 8003a98:	080039dd 	.word	0x080039dd
 8003a9c:	20000424 	.word	0x20000424

08003aa0 <_fwalk_sglue>:
 8003aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	4688      	mov	r8, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ab4:	d505      	bpl.n	8003ac2 <_fwalk_sglue+0x22>
 8003ab6:	6824      	ldr	r4, [r4, #0]
 8003ab8:	2c00      	cmp	r4, #0
 8003aba:	d1f7      	bne.n	8003aac <_fwalk_sglue+0xc>
 8003abc:	4630      	mov	r0, r6
 8003abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac2:	89ab      	ldrh	r3, [r5, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d907      	bls.n	8003ad8 <_fwalk_sglue+0x38>
 8003ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003acc:	3301      	adds	r3, #1
 8003ace:	d003      	beq.n	8003ad8 <_fwalk_sglue+0x38>
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	47c0      	blx	r8
 8003ad6:	4306      	orrs	r6, r0
 8003ad8:	3568      	adds	r5, #104	; 0x68
 8003ada:	e7e9      	b.n	8003ab0 <_fwalk_sglue+0x10>

08003adc <siprintf>:
 8003adc:	b40e      	push	{r1, r2, r3}
 8003ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ae2:	b500      	push	{lr}
 8003ae4:	b09c      	sub	sp, #112	; 0x70
 8003ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ae8:	9002      	str	r0, [sp, #8]
 8003aea:	9006      	str	r0, [sp, #24]
 8003aec:	9107      	str	r1, [sp, #28]
 8003aee:	9104      	str	r1, [sp, #16]
 8003af0:	4808      	ldr	r0, [pc, #32]	; (8003b14 <siprintf+0x38>)
 8003af2:	4909      	ldr	r1, [pc, #36]	; (8003b18 <siprintf+0x3c>)
 8003af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003af8:	9105      	str	r1, [sp, #20]
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	a902      	add	r1, sp, #8
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f001 fc18 	bl	8005334 <_svfiprintf_r>
 8003b04:	2200      	movs	r2, #0
 8003b06:	9b02      	ldr	r3, [sp, #8]
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	b01c      	add	sp, #112	; 0x70
 8003b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b10:	b003      	add	sp, #12
 8003b12:	4770      	bx	lr
 8003b14:	2000006c 	.word	0x2000006c
 8003b18:	ffff0208 	.word	0xffff0208

08003b1c <__sread>:
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	460c      	mov	r4, r1
 8003b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b24:	f000 f86c 	bl	8003c00 <_read_r>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	bfab      	itete	ge
 8003b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b30:	181b      	addge	r3, r3, r0
 8003b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b36:	bfac      	ite	ge
 8003b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b3a:	81a3      	strhlt	r3, [r4, #12]
 8003b3c:	bd10      	pop	{r4, pc}

08003b3e <__swrite>:
 8003b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b42:	461f      	mov	r7, r3
 8003b44:	898b      	ldrh	r3, [r1, #12]
 8003b46:	4605      	mov	r5, r0
 8003b48:	05db      	lsls	r3, r3, #23
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	4616      	mov	r6, r2
 8003b4e:	d505      	bpl.n	8003b5c <__swrite+0x1e>
 8003b50:	2302      	movs	r3, #2
 8003b52:	2200      	movs	r2, #0
 8003b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b58:	f000 f840 	bl	8003bdc <_lseek_r>
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	4632      	mov	r2, r6
 8003b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	4628      	mov	r0, r5
 8003b68:	463b      	mov	r3, r7
 8003b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b72:	f000 b857 	b.w	8003c24 <_write_r>

08003b76 <__sseek>:
 8003b76:	b510      	push	{r4, lr}
 8003b78:	460c      	mov	r4, r1
 8003b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7e:	f000 f82d 	bl	8003bdc <_lseek_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	bf15      	itete	ne
 8003b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b92:	81a3      	strheq	r3, [r4, #12]
 8003b94:	bf18      	it	ne
 8003b96:	81a3      	strhne	r3, [r4, #12]
 8003b98:	bd10      	pop	{r4, pc}

08003b9a <__sclose>:
 8003b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b9e:	f000 b80d 	b.w	8003bbc <_close_r>

08003ba2 <memset>:
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4402      	add	r2, r0
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d100      	bne.n	8003bac <memset+0xa>
 8003baa:	4770      	bx	lr
 8003bac:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb0:	e7f9      	b.n	8003ba6 <memset+0x4>
	...

08003bb4 <_localeconv_r>:
 8003bb4:	4800      	ldr	r0, [pc, #0]	; (8003bb8 <_localeconv_r+0x4>)
 8003bb6:	4770      	bx	lr
 8003bb8:	20000160 	.word	0x20000160

08003bbc <_close_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	4d05      	ldr	r5, [pc, #20]	; (8003bd8 <_close_r+0x1c>)
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	f7fd fa86 	bl	80010d8 <_close>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_close_r+0x1a>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_close_r+0x1a>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	20000428 	.word	0x20000428

08003bdc <_lseek_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	2200      	movs	r2, #0
 8003be6:	4d05      	ldr	r5, [pc, #20]	; (8003bfc <_lseek_r+0x20>)
 8003be8:	602a      	str	r2, [r5, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7fd fa98 	bl	8001120 <_lseek>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_lseek_r+0x1e>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_lseek_r+0x1e>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	20000428 	.word	0x20000428

08003c00 <_read_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4d05      	ldr	r5, [pc, #20]	; (8003c20 <_read_r+0x20>)
 8003c0c:	602a      	str	r2, [r5, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7fd fa29 	bl	8001066 <_read>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_read_r+0x1e>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_read_r+0x1e>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20000428 	.word	0x20000428

08003c24 <_write_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4d05      	ldr	r5, [pc, #20]	; (8003c44 <_write_r+0x20>)
 8003c30:	602a      	str	r2, [r5, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f7fd fa34 	bl	80010a0 <_write>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_write_r+0x1e>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_write_r+0x1e>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000428 	.word	0x20000428

08003c48 <__errno>:
 8003c48:	4b01      	ldr	r3, [pc, #4]	; (8003c50 <__errno+0x8>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	2000006c 	.word	0x2000006c

08003c54 <__libc_init_array>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	2600      	movs	r6, #0
 8003c58:	4d0c      	ldr	r5, [pc, #48]	; (8003c8c <__libc_init_array+0x38>)
 8003c5a:	4c0d      	ldr	r4, [pc, #52]	; (8003c90 <__libc_init_array+0x3c>)
 8003c5c:	1b64      	subs	r4, r4, r5
 8003c5e:	10a4      	asrs	r4, r4, #2
 8003c60:	42a6      	cmp	r6, r4
 8003c62:	d109      	bne.n	8003c78 <__libc_init_array+0x24>
 8003c64:	f002 f886 	bl	8005d74 <_init>
 8003c68:	2600      	movs	r6, #0
 8003c6a:	4d0a      	ldr	r5, [pc, #40]	; (8003c94 <__libc_init_array+0x40>)
 8003c6c:	4c0a      	ldr	r4, [pc, #40]	; (8003c98 <__libc_init_array+0x44>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	42a6      	cmp	r6, r4
 8003c74:	d105      	bne.n	8003c82 <__libc_init_array+0x2e>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7c:	4798      	blx	r3
 8003c7e:	3601      	adds	r6, #1
 8003c80:	e7ee      	b.n	8003c60 <__libc_init_array+0xc>
 8003c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c86:	4798      	blx	r3
 8003c88:	3601      	adds	r6, #1
 8003c8a:	e7f2      	b.n	8003c72 <__libc_init_array+0x1e>
 8003c8c:	0800616c 	.word	0x0800616c
 8003c90:	0800616c 	.word	0x0800616c
 8003c94:	0800616c 	.word	0x0800616c
 8003c98:	08006170 	.word	0x08006170

08003c9c <__retarget_lock_init_recursive>:
 8003c9c:	4770      	bx	lr

08003c9e <__retarget_lock_acquire_recursive>:
 8003c9e:	4770      	bx	lr

08003ca0 <__retarget_lock_release_recursive>:
 8003ca0:	4770      	bx	lr

08003ca2 <memchr>:
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	b2c9      	uxtb	r1, r1
 8003ca8:	4402      	add	r2, r0
 8003caa:	4293      	cmp	r3, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	d101      	bne.n	8003cb4 <memchr+0x12>
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	e003      	b.n	8003cbc <memchr+0x1a>
 8003cb4:	7804      	ldrb	r4, [r0, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	428c      	cmp	r4, r1
 8003cba:	d1f6      	bne.n	8003caa <memchr+0x8>
 8003cbc:	bd10      	pop	{r4, pc}

08003cbe <quorem>:
 8003cbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc2:	6903      	ldr	r3, [r0, #16]
 8003cc4:	690c      	ldr	r4, [r1, #16]
 8003cc6:	4607      	mov	r7, r0
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	db7f      	blt.n	8003dcc <quorem+0x10e>
 8003ccc:	3c01      	subs	r4, #1
 8003cce:	f100 0514 	add.w	r5, r0, #20
 8003cd2:	f101 0814 	add.w	r8, r1, #20
 8003cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003cf4:	d331      	bcc.n	8003d5a <quorem+0x9c>
 8003cf6:	f04f 0e00 	mov.w	lr, #0
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	46ac      	mov	ip, r5
 8003cfe:	46f2      	mov	sl, lr
 8003d00:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d04:	b293      	uxth	r3, r2
 8003d06:	fb06 e303 	mla	r3, r6, r3, lr
 8003d0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d0e:	0c1a      	lsrs	r2, r3, #16
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	fb06 220e 	mla	r2, r6, lr, r2
 8003d16:	ebaa 0303 	sub.w	r3, sl, r3
 8003d1a:	f8dc a000 	ldr.w	sl, [ip]
 8003d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d22:	fa1f fa8a 	uxth.w	sl, sl
 8003d26:	4453      	add	r3, sl
 8003d28:	f8dc a000 	ldr.w	sl, [ip]
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d3c:	4581      	cmp	r9, r0
 8003d3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d42:	f84c 3b04 	str.w	r3, [ip], #4
 8003d46:	d2db      	bcs.n	8003d00 <quorem+0x42>
 8003d48:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d4c:	b92b      	cbnz	r3, 8003d5a <quorem+0x9c>
 8003d4e:	9b01      	ldr	r3, [sp, #4]
 8003d50:	3b04      	subs	r3, #4
 8003d52:	429d      	cmp	r5, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	d32d      	bcc.n	8003db4 <quorem+0xf6>
 8003d58:	613c      	str	r4, [r7, #16]
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	f001 f992 	bl	8005084 <__mcmp>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	db23      	blt.n	8003dac <quorem+0xee>
 8003d64:	4629      	mov	r1, r5
 8003d66:	2000      	movs	r0, #0
 8003d68:	3601      	adds	r6, #1
 8003d6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d6e:	f8d1 c000 	ldr.w	ip, [r1]
 8003d72:	b293      	uxth	r3, r2
 8003d74:	1ac3      	subs	r3, r0, r3
 8003d76:	0c12      	lsrs	r2, r2, #16
 8003d78:	fa1f f08c 	uxth.w	r0, ip
 8003d7c:	4403      	add	r3, r0
 8003d7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003d82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d8c:	45c1      	cmp	r9, r8
 8003d8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d92:	f841 3b04 	str.w	r3, [r1], #4
 8003d96:	d2e8      	bcs.n	8003d6a <quorem+0xac>
 8003d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003da0:	b922      	cbnz	r2, 8003dac <quorem+0xee>
 8003da2:	3b04      	subs	r3, #4
 8003da4:	429d      	cmp	r5, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	d30a      	bcc.n	8003dc0 <quorem+0x102>
 8003daa:	613c      	str	r4, [r7, #16]
 8003dac:	4630      	mov	r0, r6
 8003dae:	b003      	add	sp, #12
 8003db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	3b04      	subs	r3, #4
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d1cd      	bne.n	8003d58 <quorem+0x9a>
 8003dbc:	3c01      	subs	r4, #1
 8003dbe:	e7c8      	b.n	8003d52 <quorem+0x94>
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	2a00      	cmp	r2, #0
 8003dc6:	d1f0      	bne.n	8003daa <quorem+0xec>
 8003dc8:	3c01      	subs	r4, #1
 8003dca:	e7eb      	b.n	8003da4 <quorem+0xe6>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e7ee      	b.n	8003dae <quorem+0xf0>

08003dd0 <_dtoa_r>:
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	4616      	mov	r6, r2
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	69c4      	ldr	r4, [r0, #28]
 8003dda:	b099      	sub	sp, #100	; 0x64
 8003ddc:	4605      	mov	r5, r0
 8003dde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003de2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003de6:	b974      	cbnz	r4, 8003e06 <_dtoa_r+0x36>
 8003de8:	2010      	movs	r0, #16
 8003dea:	f000 fe1d 	bl	8004a28 <malloc>
 8003dee:	4602      	mov	r2, r0
 8003df0:	61e8      	str	r0, [r5, #28]
 8003df2:	b920      	cbnz	r0, 8003dfe <_dtoa_r+0x2e>
 8003df4:	21ef      	movs	r1, #239	; 0xef
 8003df6:	4bac      	ldr	r3, [pc, #688]	; (80040a8 <_dtoa_r+0x2d8>)
 8003df8:	48ac      	ldr	r0, [pc, #688]	; (80040ac <_dtoa_r+0x2dc>)
 8003dfa:	f001 fc7b 	bl	80056f4 <__assert_func>
 8003dfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e02:	6004      	str	r4, [r0, #0]
 8003e04:	60c4      	str	r4, [r0, #12]
 8003e06:	69eb      	ldr	r3, [r5, #28]
 8003e08:	6819      	ldr	r1, [r3, #0]
 8003e0a:	b151      	cbz	r1, 8003e22 <_dtoa_r+0x52>
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4093      	lsls	r3, r2
 8003e12:	604a      	str	r2, [r1, #4]
 8003e14:	608b      	str	r3, [r1, #8]
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 fefa 	bl	8004c10 <_Bfree>
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	69eb      	ldr	r3, [r5, #28]
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	1e3b      	subs	r3, r7, #0
 8003e24:	bfaf      	iteee	ge
 8003e26:	2300      	movge	r3, #0
 8003e28:	2201      	movlt	r2, #1
 8003e2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e2e:	9305      	strlt	r3, [sp, #20]
 8003e30:	bfa8      	it	ge
 8003e32:	f8c8 3000 	strge.w	r3, [r8]
 8003e36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003e3a:	4b9d      	ldr	r3, [pc, #628]	; (80040b0 <_dtoa_r+0x2e0>)
 8003e3c:	bfb8      	it	lt
 8003e3e:	f8c8 2000 	strlt.w	r2, [r8]
 8003e42:	ea33 0309 	bics.w	r3, r3, r9
 8003e46:	d119      	bne.n	8003e7c <_dtoa_r+0xac>
 8003e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e54:	4333      	orrs	r3, r6
 8003e56:	f000 8589 	beq.w	800496c <_dtoa_r+0xb9c>
 8003e5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e5c:	b953      	cbnz	r3, 8003e74 <_dtoa_r+0xa4>
 8003e5e:	4b95      	ldr	r3, [pc, #596]	; (80040b4 <_dtoa_r+0x2e4>)
 8003e60:	e023      	b.n	8003eaa <_dtoa_r+0xda>
 8003e62:	4b95      	ldr	r3, [pc, #596]	; (80040b8 <_dtoa_r+0x2e8>)
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	3308      	adds	r3, #8
 8003e68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	9803      	ldr	r0, [sp, #12]
 8003e6e:	b019      	add	sp, #100	; 0x64
 8003e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e74:	4b8f      	ldr	r3, [pc, #572]	; (80040b4 <_dtoa_r+0x2e4>)
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	3303      	adds	r3, #3
 8003e7a:	e7f5      	b.n	8003e68 <_dtoa_r+0x98>
 8003e7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f7fc fd8c 	bl	80009a8 <__aeabi_dcmpeq>
 8003e90:	4680      	mov	r8, r0
 8003e92:	b160      	cbz	r0, 8003eae <_dtoa_r+0xde>
 8003e94:	2301      	movs	r3, #1
 8003e96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8562 	beq.w	8004966 <_dtoa_r+0xb96>
 8003ea2:	4b86      	ldr	r3, [pc, #536]	; (80040bc <_dtoa_r+0x2ec>)
 8003ea4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	9303      	str	r3, [sp, #12]
 8003eac:	e7de      	b.n	8003e6c <_dtoa_r+0x9c>
 8003eae:	ab16      	add	r3, sp, #88	; 0x58
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	ab17      	add	r3, sp, #92	; 0x5c
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003ebc:	f001 f98a 	bl	80051d4 <__d2b>
 8003ec0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	2c00      	cmp	r4, #0
 8003ec8:	d07e      	beq.n	8003fc8 <_dtoa_r+0x1f8>
 8003eca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ed0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003edc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ee0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4b75      	ldr	r3, [pc, #468]	; (80040c0 <_dtoa_r+0x2f0>)
 8003eea:	f7fc f93d 	bl	8000168 <__aeabi_dsub>
 8003eee:	a368      	add	r3, pc, #416	; (adr r3, 8004090 <_dtoa_r+0x2c0>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc faf0 	bl	80004d8 <__aeabi_dmul>
 8003ef8:	a367      	add	r3, pc, #412	; (adr r3, 8004098 <_dtoa_r+0x2c8>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f7fc f935 	bl	800016c <__adddf3>
 8003f02:	4606      	mov	r6, r0
 8003f04:	4620      	mov	r0, r4
 8003f06:	460f      	mov	r7, r1
 8003f08:	f7fc fa7c 	bl	8000404 <__aeabi_i2d>
 8003f0c:	a364      	add	r3, pc, #400	; (adr r3, 80040a0 <_dtoa_r+0x2d0>)
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f7fc fae1 	bl	80004d8 <__aeabi_dmul>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f7fc f925 	bl	800016c <__adddf3>
 8003f22:	4606      	mov	r6, r0
 8003f24:	460f      	mov	r7, r1
 8003f26:	f7fc fd87 	bl	8000a38 <__aeabi_d2iz>
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4683      	mov	fp, r0
 8003f2e:	2300      	movs	r3, #0
 8003f30:	4630      	mov	r0, r6
 8003f32:	4639      	mov	r1, r7
 8003f34:	f7fc fd42 	bl	80009bc <__aeabi_dcmplt>
 8003f38:	b148      	cbz	r0, 8003f4e <_dtoa_r+0x17e>
 8003f3a:	4658      	mov	r0, fp
 8003f3c:	f7fc fa62 	bl	8000404 <__aeabi_i2d>
 8003f40:	4632      	mov	r2, r6
 8003f42:	463b      	mov	r3, r7
 8003f44:	f7fc fd30 	bl	80009a8 <__aeabi_dcmpeq>
 8003f48:	b908      	cbnz	r0, 8003f4e <_dtoa_r+0x17e>
 8003f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f4e:	f1bb 0f16 	cmp.w	fp, #22
 8003f52:	d857      	bhi.n	8004004 <_dtoa_r+0x234>
 8003f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f58:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <_dtoa_r+0x2f4>)
 8003f5a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f7fc fd2b 	bl	80009bc <__aeabi_dcmplt>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d04e      	beq.n	8004008 <_dtoa_r+0x238>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f74:	1b1b      	subs	r3, r3, r4
 8003f76:	1e5a      	subs	r2, r3, #1
 8003f78:	bf46      	itte	mi
 8003f7a:	f1c3 0901 	rsbmi	r9, r3, #1
 8003f7e:	2300      	movmi	r3, #0
 8003f80:	f04f 0900 	movpl.w	r9, #0
 8003f84:	9209      	str	r2, [sp, #36]	; 0x24
 8003f86:	bf48      	it	mi
 8003f88:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003f8a:	f1bb 0f00 	cmp.w	fp, #0
 8003f8e:	db3d      	blt.n	800400c <_dtoa_r+0x23c>
 8003f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f92:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003f96:	445b      	add	r3, fp
 8003f98:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003f9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d867      	bhi.n	8004074 <_dtoa_r+0x2a4>
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	bfc4      	itt	gt
 8003fa8:	3b04      	subgt	r3, #4
 8003faa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fae:	bfc8      	it	gt
 8003fb0:	2400      	movgt	r4, #0
 8003fb2:	f1a3 0302 	sub.w	r3, r3, #2
 8003fb6:	bfd8      	it	le
 8003fb8:	2401      	movle	r4, #1
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	f200 8086 	bhi.w	80040cc <_dtoa_r+0x2fc>
 8003fc0:	e8df f003 	tbb	[pc, r3]
 8003fc4:	5637392c 	.word	0x5637392c
 8003fc8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003fcc:	441c      	add	r4, r3
 8003fce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	bfc1      	itttt	gt
 8003fd6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003fda:	fa09 f903 	lslgt.w	r9, r9, r3
 8003fde:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003fe2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003fe6:	bfd6      	itet	le
 8003fe8:	f1c3 0320 	rsble	r3, r3, #32
 8003fec:	ea49 0003 	orrgt.w	r0, r9, r3
 8003ff0:	fa06 f003 	lslle.w	r0, r6, r3
 8003ff4:	f7fc f9f6 	bl	80003e4 <__aeabi_ui2d>
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003ffe:	3c01      	subs	r4, #1
 8004000:	9213      	str	r2, [sp, #76]	; 0x4c
 8004002:	e76f      	b.n	8003ee4 <_dtoa_r+0x114>
 8004004:	2301      	movs	r3, #1
 8004006:	e7b3      	b.n	8003f70 <_dtoa_r+0x1a0>
 8004008:	900f      	str	r0, [sp, #60]	; 0x3c
 800400a:	e7b2      	b.n	8003f72 <_dtoa_r+0x1a2>
 800400c:	f1cb 0300 	rsb	r3, fp, #0
 8004010:	930a      	str	r3, [sp, #40]	; 0x28
 8004012:	2300      	movs	r3, #0
 8004014:	eba9 090b 	sub.w	r9, r9, fp
 8004018:	930e      	str	r3, [sp, #56]	; 0x38
 800401a:	e7c0      	b.n	8003f9e <_dtoa_r+0x1ce>
 800401c:	2300      	movs	r3, #0
 800401e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004020:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004022:	2b00      	cmp	r3, #0
 8004024:	dc55      	bgt.n	80040d2 <_dtoa_r+0x302>
 8004026:	2301      	movs	r3, #1
 8004028:	461a      	mov	r2, r3
 800402a:	9306      	str	r3, [sp, #24]
 800402c:	9308      	str	r3, [sp, #32]
 800402e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004030:	e00b      	b.n	800404a <_dtoa_r+0x27a>
 8004032:	2301      	movs	r3, #1
 8004034:	e7f3      	b.n	800401e <_dtoa_r+0x24e>
 8004036:	2300      	movs	r3, #0
 8004038:	930b      	str	r3, [sp, #44]	; 0x2c
 800403a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800403c:	445b      	add	r3, fp
 800403e:	9306      	str	r3, [sp, #24]
 8004040:	3301      	adds	r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	9308      	str	r3, [sp, #32]
 8004046:	bfb8      	it	lt
 8004048:	2301      	movlt	r3, #1
 800404a:	2100      	movs	r1, #0
 800404c:	2204      	movs	r2, #4
 800404e:	69e8      	ldr	r0, [r5, #28]
 8004050:	f102 0614 	add.w	r6, r2, #20
 8004054:	429e      	cmp	r6, r3
 8004056:	d940      	bls.n	80040da <_dtoa_r+0x30a>
 8004058:	6041      	str	r1, [r0, #4]
 800405a:	4628      	mov	r0, r5
 800405c:	f000 fd98 	bl	8004b90 <_Balloc>
 8004060:	9003      	str	r0, [sp, #12]
 8004062:	2800      	cmp	r0, #0
 8004064:	d13c      	bne.n	80040e0 <_dtoa_r+0x310>
 8004066:	4602      	mov	r2, r0
 8004068:	f240 11af 	movw	r1, #431	; 0x1af
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <_dtoa_r+0x2f8>)
 800406e:	e6c3      	b.n	8003df8 <_dtoa_r+0x28>
 8004070:	2301      	movs	r3, #1
 8004072:	e7e1      	b.n	8004038 <_dtoa_r+0x268>
 8004074:	2401      	movs	r4, #1
 8004076:	2300      	movs	r3, #0
 8004078:	940b      	str	r4, [sp, #44]	; 0x2c
 800407a:	9322      	str	r3, [sp, #136]	; 0x88
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	2200      	movs	r2, #0
 8004082:	9306      	str	r3, [sp, #24]
 8004084:	9308      	str	r3, [sp, #32]
 8004086:	2312      	movs	r3, #18
 8004088:	e7d1      	b.n	800402e <_dtoa_r+0x25e>
 800408a:	bf00      	nop
 800408c:	f3af 8000 	nop.w
 8004090:	636f4361 	.word	0x636f4361
 8004094:	3fd287a7 	.word	0x3fd287a7
 8004098:	8b60c8b3 	.word	0x8b60c8b3
 800409c:	3fc68a28 	.word	0x3fc68a28
 80040a0:	509f79fb 	.word	0x509f79fb
 80040a4:	3fd34413 	.word	0x3fd34413
 80040a8:	08005e3f 	.word	0x08005e3f
 80040ac:	08005e56 	.word	0x08005e56
 80040b0:	7ff00000 	.word	0x7ff00000
 80040b4:	08005e3b 	.word	0x08005e3b
 80040b8:	08005e32 	.word	0x08005e32
 80040bc:	08005e0f 	.word	0x08005e0f
 80040c0:	3ff80000 	.word	0x3ff80000
 80040c4:	08005f40 	.word	0x08005f40
 80040c8:	08005eae 	.word	0x08005eae
 80040cc:	2301      	movs	r3, #1
 80040ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80040d0:	e7d4      	b.n	800407c <_dtoa_r+0x2ac>
 80040d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040d4:	9306      	str	r3, [sp, #24]
 80040d6:	9308      	str	r3, [sp, #32]
 80040d8:	e7b7      	b.n	800404a <_dtoa_r+0x27a>
 80040da:	3101      	adds	r1, #1
 80040dc:	0052      	lsls	r2, r2, #1
 80040de:	e7b7      	b.n	8004050 <_dtoa_r+0x280>
 80040e0:	69eb      	ldr	r3, [r5, #28]
 80040e2:	9a03      	ldr	r2, [sp, #12]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	9b08      	ldr	r3, [sp, #32]
 80040e8:	2b0e      	cmp	r3, #14
 80040ea:	f200 80a8 	bhi.w	800423e <_dtoa_r+0x46e>
 80040ee:	2c00      	cmp	r4, #0
 80040f0:	f000 80a5 	beq.w	800423e <_dtoa_r+0x46e>
 80040f4:	f1bb 0f00 	cmp.w	fp, #0
 80040f8:	dd34      	ble.n	8004164 <_dtoa_r+0x394>
 80040fa:	4b9a      	ldr	r3, [pc, #616]	; (8004364 <_dtoa_r+0x594>)
 80040fc:	f00b 020f 	and.w	r2, fp, #15
 8004100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004104:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004108:	e9d3 3400 	ldrd	r3, r4, [r3]
 800410c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004110:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004114:	d016      	beq.n	8004144 <_dtoa_r+0x374>
 8004116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800411a:	4b93      	ldr	r3, [pc, #588]	; (8004368 <_dtoa_r+0x598>)
 800411c:	2703      	movs	r7, #3
 800411e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004122:	f7fc fb03 	bl	800072c <__aeabi_ddiv>
 8004126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800412a:	f004 040f 	and.w	r4, r4, #15
 800412e:	4e8e      	ldr	r6, [pc, #568]	; (8004368 <_dtoa_r+0x598>)
 8004130:	b954      	cbnz	r4, 8004148 <_dtoa_r+0x378>
 8004132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800413a:	f7fc faf7 	bl	800072c <__aeabi_ddiv>
 800413e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004142:	e029      	b.n	8004198 <_dtoa_r+0x3c8>
 8004144:	2702      	movs	r7, #2
 8004146:	e7f2      	b.n	800412e <_dtoa_r+0x35e>
 8004148:	07e1      	lsls	r1, r4, #31
 800414a:	d508      	bpl.n	800415e <_dtoa_r+0x38e>
 800414c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004150:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004154:	f7fc f9c0 	bl	80004d8 <__aeabi_dmul>
 8004158:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800415c:	3701      	adds	r7, #1
 800415e:	1064      	asrs	r4, r4, #1
 8004160:	3608      	adds	r6, #8
 8004162:	e7e5      	b.n	8004130 <_dtoa_r+0x360>
 8004164:	f000 80a5 	beq.w	80042b2 <_dtoa_r+0x4e2>
 8004168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800416c:	f1cb 0400 	rsb	r4, fp, #0
 8004170:	4b7c      	ldr	r3, [pc, #496]	; (8004364 <_dtoa_r+0x594>)
 8004172:	f004 020f 	and.w	r2, r4, #15
 8004176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fc f9ab 	bl	80004d8 <__aeabi_dmul>
 8004182:	2702      	movs	r7, #2
 8004184:	2300      	movs	r3, #0
 8004186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800418a:	4e77      	ldr	r6, [pc, #476]	; (8004368 <_dtoa_r+0x598>)
 800418c:	1124      	asrs	r4, r4, #4
 800418e:	2c00      	cmp	r4, #0
 8004190:	f040 8084 	bne.w	800429c <_dtoa_r+0x4cc>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1d2      	bne.n	800413e <_dtoa_r+0x36e>
 8004198:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800419c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80041a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8087 	beq.w	80042b6 <_dtoa_r+0x4e6>
 80041a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041ac:	2200      	movs	r2, #0
 80041ae:	4b6f      	ldr	r3, [pc, #444]	; (800436c <_dtoa_r+0x59c>)
 80041b0:	f7fc fc04 	bl	80009bc <__aeabi_dcmplt>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d07e      	beq.n	80042b6 <_dtoa_r+0x4e6>
 80041b8:	9b08      	ldr	r3, [sp, #32]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d07b      	beq.n	80042b6 <_dtoa_r+0x4e6>
 80041be:	9b06      	ldr	r3, [sp, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dd38      	ble.n	8004236 <_dtoa_r+0x466>
 80041c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041c8:	2200      	movs	r2, #0
 80041ca:	4b69      	ldr	r3, [pc, #420]	; (8004370 <_dtoa_r+0x5a0>)
 80041cc:	f7fc f984 	bl	80004d8 <__aeabi_dmul>
 80041d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041d4:	9c06      	ldr	r4, [sp, #24]
 80041d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80041da:	3701      	adds	r7, #1
 80041dc:	4638      	mov	r0, r7
 80041de:	f7fc f911 	bl	8000404 <__aeabi_i2d>
 80041e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041e6:	f7fc f977 	bl	80004d8 <__aeabi_dmul>
 80041ea:	2200      	movs	r2, #0
 80041ec:	4b61      	ldr	r3, [pc, #388]	; (8004374 <_dtoa_r+0x5a4>)
 80041ee:	f7fb ffbd 	bl	800016c <__adddf3>
 80041f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80041f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041fa:	9611      	str	r6, [sp, #68]	; 0x44
 80041fc:	2c00      	cmp	r4, #0
 80041fe:	d15d      	bne.n	80042bc <_dtoa_r+0x4ec>
 8004200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004204:	2200      	movs	r2, #0
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <_dtoa_r+0x5a8>)
 8004208:	f7fb ffae 	bl	8000168 <__aeabi_dsub>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004214:	4633      	mov	r3, r6
 8004216:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004218:	f7fc fbee 	bl	80009f8 <__aeabi_dcmpgt>
 800421c:	2800      	cmp	r0, #0
 800421e:	f040 8295 	bne.w	800474c <_dtoa_r+0x97c>
 8004222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004226:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004228:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800422c:	f7fc fbc6 	bl	80009bc <__aeabi_dcmplt>
 8004230:	2800      	cmp	r0, #0
 8004232:	f040 8289 	bne.w	8004748 <_dtoa_r+0x978>
 8004236:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800423a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800423e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004240:	2b00      	cmp	r3, #0
 8004242:	f2c0 8151 	blt.w	80044e8 <_dtoa_r+0x718>
 8004246:	f1bb 0f0e 	cmp.w	fp, #14
 800424a:	f300 814d 	bgt.w	80044e8 <_dtoa_r+0x718>
 800424e:	4b45      	ldr	r3, [pc, #276]	; (8004364 <_dtoa_r+0x594>)
 8004250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004254:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004258:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800425c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800425e:	2b00      	cmp	r3, #0
 8004260:	f280 80da 	bge.w	8004418 <_dtoa_r+0x648>
 8004264:	9b08      	ldr	r3, [sp, #32]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f300 80d6 	bgt.w	8004418 <_dtoa_r+0x648>
 800426c:	f040 826b 	bne.w	8004746 <_dtoa_r+0x976>
 8004270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004274:	2200      	movs	r2, #0
 8004276:	4b40      	ldr	r3, [pc, #256]	; (8004378 <_dtoa_r+0x5a8>)
 8004278:	f7fc f92e 	bl	80004d8 <__aeabi_dmul>
 800427c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004280:	f7fc fbb0 	bl	80009e4 <__aeabi_dcmpge>
 8004284:	9c08      	ldr	r4, [sp, #32]
 8004286:	4626      	mov	r6, r4
 8004288:	2800      	cmp	r0, #0
 800428a:	f040 8241 	bne.w	8004710 <_dtoa_r+0x940>
 800428e:	2331      	movs	r3, #49	; 0x31
 8004290:	9f03      	ldr	r7, [sp, #12]
 8004292:	f10b 0b01 	add.w	fp, fp, #1
 8004296:	f807 3b01 	strb.w	r3, [r7], #1
 800429a:	e23d      	b.n	8004718 <_dtoa_r+0x948>
 800429c:	07e2      	lsls	r2, r4, #31
 800429e:	d505      	bpl.n	80042ac <_dtoa_r+0x4dc>
 80042a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80042a4:	f7fc f918 	bl	80004d8 <__aeabi_dmul>
 80042a8:	2301      	movs	r3, #1
 80042aa:	3701      	adds	r7, #1
 80042ac:	1064      	asrs	r4, r4, #1
 80042ae:	3608      	adds	r6, #8
 80042b0:	e76d      	b.n	800418e <_dtoa_r+0x3be>
 80042b2:	2702      	movs	r7, #2
 80042b4:	e770      	b.n	8004198 <_dtoa_r+0x3c8>
 80042b6:	46d8      	mov	r8, fp
 80042b8:	9c08      	ldr	r4, [sp, #32]
 80042ba:	e78f      	b.n	80041dc <_dtoa_r+0x40c>
 80042bc:	9903      	ldr	r1, [sp, #12]
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <_dtoa_r+0x594>)
 80042c0:	4421      	add	r1, r4
 80042c2:	9112      	str	r1, [sp, #72]	; 0x48
 80042c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80042ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042d2:	2900      	cmp	r1, #0
 80042d4:	d054      	beq.n	8004380 <_dtoa_r+0x5b0>
 80042d6:	2000      	movs	r0, #0
 80042d8:	4928      	ldr	r1, [pc, #160]	; (800437c <_dtoa_r+0x5ac>)
 80042da:	f7fc fa27 	bl	800072c <__aeabi_ddiv>
 80042de:	463b      	mov	r3, r7
 80042e0:	4632      	mov	r2, r6
 80042e2:	f7fb ff41 	bl	8000168 <__aeabi_dsub>
 80042e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042ea:	9f03      	ldr	r7, [sp, #12]
 80042ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f0:	f7fc fba2 	bl	8000a38 <__aeabi_d2iz>
 80042f4:	4604      	mov	r4, r0
 80042f6:	f7fc f885 	bl	8000404 <__aeabi_i2d>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004302:	f7fb ff31 	bl	8000168 <__aeabi_dsub>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	3430      	adds	r4, #48	; 0x30
 800430c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004314:	f807 4b01 	strb.w	r4, [r7], #1
 8004318:	f7fc fb50 	bl	80009bc <__aeabi_dcmplt>
 800431c:	2800      	cmp	r0, #0
 800431e:	d173      	bne.n	8004408 <_dtoa_r+0x638>
 8004320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004324:	2000      	movs	r0, #0
 8004326:	4911      	ldr	r1, [pc, #68]	; (800436c <_dtoa_r+0x59c>)
 8004328:	f7fb ff1e 	bl	8000168 <__aeabi_dsub>
 800432c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004330:	f7fc fb44 	bl	80009bc <__aeabi_dcmplt>
 8004334:	2800      	cmp	r0, #0
 8004336:	f040 80b6 	bne.w	80044a6 <_dtoa_r+0x6d6>
 800433a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800433c:	429f      	cmp	r7, r3
 800433e:	f43f af7a 	beq.w	8004236 <_dtoa_r+0x466>
 8004342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004346:	2200      	movs	r2, #0
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <_dtoa_r+0x5a0>)
 800434a:	f7fc f8c5 	bl	80004d8 <__aeabi_dmul>
 800434e:	2200      	movs	r2, #0
 8004350:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <_dtoa_r+0x5a0>)
 800435a:	f7fc f8bd 	bl	80004d8 <__aeabi_dmul>
 800435e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004362:	e7c3      	b.n	80042ec <_dtoa_r+0x51c>
 8004364:	08005f40 	.word	0x08005f40
 8004368:	08005f18 	.word	0x08005f18
 800436c:	3ff00000 	.word	0x3ff00000
 8004370:	40240000 	.word	0x40240000
 8004374:	401c0000 	.word	0x401c0000
 8004378:	40140000 	.word	0x40140000
 800437c:	3fe00000 	.word	0x3fe00000
 8004380:	4630      	mov	r0, r6
 8004382:	4639      	mov	r1, r7
 8004384:	f7fc f8a8 	bl	80004d8 <__aeabi_dmul>
 8004388:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800438a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800438e:	9c03      	ldr	r4, [sp, #12]
 8004390:	9314      	str	r3, [sp, #80]	; 0x50
 8004392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004396:	f7fc fb4f 	bl	8000a38 <__aeabi_d2iz>
 800439a:	9015      	str	r0, [sp, #84]	; 0x54
 800439c:	f7fc f832 	bl	8000404 <__aeabi_i2d>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043a8:	f7fb fede 	bl	8000168 <__aeabi_dsub>
 80043ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043ae:	4606      	mov	r6, r0
 80043b0:	3330      	adds	r3, #48	; 0x30
 80043b2:	f804 3b01 	strb.w	r3, [r4], #1
 80043b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043b8:	460f      	mov	r7, r1
 80043ba:	429c      	cmp	r4, r3
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	d124      	bne.n	800440c <_dtoa_r+0x63c>
 80043c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043c6:	4baf      	ldr	r3, [pc, #700]	; (8004684 <_dtoa_r+0x8b4>)
 80043c8:	f7fb fed0 	bl	800016c <__adddf3>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4630      	mov	r0, r6
 80043d2:	4639      	mov	r1, r7
 80043d4:	f7fc fb10 	bl	80009f8 <__aeabi_dcmpgt>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d163      	bne.n	80044a4 <_dtoa_r+0x6d4>
 80043dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043e0:	2000      	movs	r0, #0
 80043e2:	49a8      	ldr	r1, [pc, #672]	; (8004684 <_dtoa_r+0x8b4>)
 80043e4:	f7fb fec0 	bl	8000168 <__aeabi_dsub>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4630      	mov	r0, r6
 80043ee:	4639      	mov	r1, r7
 80043f0:	f7fc fae4 	bl	80009bc <__aeabi_dcmplt>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	f43f af1e 	beq.w	8004236 <_dtoa_r+0x466>
 80043fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80043fc:	1e7b      	subs	r3, r7, #1
 80043fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004400:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004404:	2b30      	cmp	r3, #48	; 0x30
 8004406:	d0f8      	beq.n	80043fa <_dtoa_r+0x62a>
 8004408:	46c3      	mov	fp, r8
 800440a:	e03b      	b.n	8004484 <_dtoa_r+0x6b4>
 800440c:	4b9e      	ldr	r3, [pc, #632]	; (8004688 <_dtoa_r+0x8b8>)
 800440e:	f7fc f863 	bl	80004d8 <__aeabi_dmul>
 8004412:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004416:	e7bc      	b.n	8004392 <_dtoa_r+0x5c2>
 8004418:	9f03      	ldr	r7, [sp, #12]
 800441a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800441e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004422:	4640      	mov	r0, r8
 8004424:	4649      	mov	r1, r9
 8004426:	f7fc f981 	bl	800072c <__aeabi_ddiv>
 800442a:	f7fc fb05 	bl	8000a38 <__aeabi_d2iz>
 800442e:	4604      	mov	r4, r0
 8004430:	f7fb ffe8 	bl	8000404 <__aeabi_i2d>
 8004434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004438:	f7fc f84e 	bl	80004d8 <__aeabi_dmul>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4640      	mov	r0, r8
 8004442:	4649      	mov	r1, r9
 8004444:	f7fb fe90 	bl	8000168 <__aeabi_dsub>
 8004448:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800444c:	f807 6b01 	strb.w	r6, [r7], #1
 8004450:	9e03      	ldr	r6, [sp, #12]
 8004452:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004456:	1bbe      	subs	r6, r7, r6
 8004458:	45b4      	cmp	ip, r6
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	d136      	bne.n	80044ce <_dtoa_r+0x6fe>
 8004460:	f7fb fe84 	bl	800016c <__adddf3>
 8004464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004468:	4680      	mov	r8, r0
 800446a:	4689      	mov	r9, r1
 800446c:	f7fc fac4 	bl	80009f8 <__aeabi_dcmpgt>
 8004470:	bb58      	cbnz	r0, 80044ca <_dtoa_r+0x6fa>
 8004472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004476:	4640      	mov	r0, r8
 8004478:	4649      	mov	r1, r9
 800447a:	f7fc fa95 	bl	80009a8 <__aeabi_dcmpeq>
 800447e:	b108      	cbz	r0, 8004484 <_dtoa_r+0x6b4>
 8004480:	07e3      	lsls	r3, r4, #31
 8004482:	d422      	bmi.n	80044ca <_dtoa_r+0x6fa>
 8004484:	4651      	mov	r1, sl
 8004486:	4628      	mov	r0, r5
 8004488:	f000 fbc2 	bl	8004c10 <_Bfree>
 800448c:	2300      	movs	r3, #0
 800448e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004490:	703b      	strb	r3, [r7, #0]
 8004492:	f10b 0301 	add.w	r3, fp, #1
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800449a:	2b00      	cmp	r3, #0
 800449c:	f43f ace6 	beq.w	8003e6c <_dtoa_r+0x9c>
 80044a0:	601f      	str	r7, [r3, #0]
 80044a2:	e4e3      	b.n	8003e6c <_dtoa_r+0x9c>
 80044a4:	4627      	mov	r7, r4
 80044a6:	463b      	mov	r3, r7
 80044a8:	461f      	mov	r7, r3
 80044aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044ae:	2a39      	cmp	r2, #57	; 0x39
 80044b0:	d107      	bne.n	80044c2 <_dtoa_r+0x6f2>
 80044b2:	9a03      	ldr	r2, [sp, #12]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d1f7      	bne.n	80044a8 <_dtoa_r+0x6d8>
 80044b8:	2230      	movs	r2, #48	; 0x30
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	f108 0801 	add.w	r8, r8, #1
 80044c0:	700a      	strb	r2, [r1, #0]
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	3201      	adds	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e79e      	b.n	8004408 <_dtoa_r+0x638>
 80044ca:	46d8      	mov	r8, fp
 80044cc:	e7eb      	b.n	80044a6 <_dtoa_r+0x6d6>
 80044ce:	2200      	movs	r2, #0
 80044d0:	4b6d      	ldr	r3, [pc, #436]	; (8004688 <_dtoa_r+0x8b8>)
 80044d2:	f7fc f801 	bl	80004d8 <__aeabi_dmul>
 80044d6:	2200      	movs	r2, #0
 80044d8:	2300      	movs	r3, #0
 80044da:	4680      	mov	r8, r0
 80044dc:	4689      	mov	r9, r1
 80044de:	f7fc fa63 	bl	80009a8 <__aeabi_dcmpeq>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d09b      	beq.n	800441e <_dtoa_r+0x64e>
 80044e6:	e7cd      	b.n	8004484 <_dtoa_r+0x6b4>
 80044e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	f000 80c4 	beq.w	8004678 <_dtoa_r+0x8a8>
 80044f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80044f2:	2a01      	cmp	r2, #1
 80044f4:	f300 80a8 	bgt.w	8004648 <_dtoa_r+0x878>
 80044f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	f000 80a0 	beq.w	8004640 <_dtoa_r+0x870>
 8004500:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004504:	464f      	mov	r7, r9
 8004506:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800450a:	2101      	movs	r1, #1
 800450c:	441a      	add	r2, r3
 800450e:	4628      	mov	r0, r5
 8004510:	4499      	add	r9, r3
 8004512:	9209      	str	r2, [sp, #36]	; 0x24
 8004514:	f000 fc32 	bl	8004d7c <__i2b>
 8004518:	4606      	mov	r6, r0
 800451a:	b15f      	cbz	r7, 8004534 <_dtoa_r+0x764>
 800451c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	dd08      	ble.n	8004534 <_dtoa_r+0x764>
 8004522:	42bb      	cmp	r3, r7
 8004524:	bfa8      	it	ge
 8004526:	463b      	movge	r3, r7
 8004528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800452a:	eba9 0903 	sub.w	r9, r9, r3
 800452e:	1aff      	subs	r7, r7, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	9309      	str	r3, [sp, #36]	; 0x24
 8004534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004536:	b1f3      	cbz	r3, 8004576 <_dtoa_r+0x7a6>
 8004538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80a0 	beq.w	8004680 <_dtoa_r+0x8b0>
 8004540:	2c00      	cmp	r4, #0
 8004542:	dd10      	ble.n	8004566 <_dtoa_r+0x796>
 8004544:	4631      	mov	r1, r6
 8004546:	4622      	mov	r2, r4
 8004548:	4628      	mov	r0, r5
 800454a:	f000 fcd5 	bl	8004ef8 <__pow5mult>
 800454e:	4652      	mov	r2, sl
 8004550:	4601      	mov	r1, r0
 8004552:	4606      	mov	r6, r0
 8004554:	4628      	mov	r0, r5
 8004556:	f000 fc27 	bl	8004da8 <__multiply>
 800455a:	4680      	mov	r8, r0
 800455c:	4651      	mov	r1, sl
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fb56 	bl	8004c10 <_Bfree>
 8004564:	46c2      	mov	sl, r8
 8004566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004568:	1b1a      	subs	r2, r3, r4
 800456a:	d004      	beq.n	8004576 <_dtoa_r+0x7a6>
 800456c:	4651      	mov	r1, sl
 800456e:	4628      	mov	r0, r5
 8004570:	f000 fcc2 	bl	8004ef8 <__pow5mult>
 8004574:	4682      	mov	sl, r0
 8004576:	2101      	movs	r1, #1
 8004578:	4628      	mov	r0, r5
 800457a:	f000 fbff 	bl	8004d7c <__i2b>
 800457e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004580:	4604      	mov	r4, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	f340 8082 	ble.w	800468c <_dtoa_r+0x8bc>
 8004588:	461a      	mov	r2, r3
 800458a:	4601      	mov	r1, r0
 800458c:	4628      	mov	r0, r5
 800458e:	f000 fcb3 	bl	8004ef8 <__pow5mult>
 8004592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004594:	4604      	mov	r4, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	dd7b      	ble.n	8004692 <_dtoa_r+0x8c2>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045a4:	6918      	ldr	r0, [r3, #16]
 80045a6:	f000 fb9b 	bl	8004ce0 <__hi0bits>
 80045aa:	f1c0 0020 	rsb	r0, r0, #32
 80045ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b0:	4418      	add	r0, r3
 80045b2:	f010 001f 	ands.w	r0, r0, #31
 80045b6:	f000 8092 	beq.w	80046de <_dtoa_r+0x90e>
 80045ba:	f1c0 0320 	rsb	r3, r0, #32
 80045be:	2b04      	cmp	r3, #4
 80045c0:	f340 8085 	ble.w	80046ce <_dtoa_r+0x8fe>
 80045c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c6:	f1c0 001c 	rsb	r0, r0, #28
 80045ca:	4403      	add	r3, r0
 80045cc:	4481      	add	r9, r0
 80045ce:	4407      	add	r7, r0
 80045d0:	9309      	str	r3, [sp, #36]	; 0x24
 80045d2:	f1b9 0f00 	cmp.w	r9, #0
 80045d6:	dd05      	ble.n	80045e4 <_dtoa_r+0x814>
 80045d8:	4651      	mov	r1, sl
 80045da:	464a      	mov	r2, r9
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 fce5 	bl	8004fac <__lshift>
 80045e2:	4682      	mov	sl, r0
 80045e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dd05      	ble.n	80045f6 <_dtoa_r+0x826>
 80045ea:	4621      	mov	r1, r4
 80045ec:	461a      	mov	r2, r3
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fcdc 	bl	8004fac <__lshift>
 80045f4:	4604      	mov	r4, r0
 80045f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d072      	beq.n	80046e2 <_dtoa_r+0x912>
 80045fc:	4621      	mov	r1, r4
 80045fe:	4650      	mov	r0, sl
 8004600:	f000 fd40 	bl	8005084 <__mcmp>
 8004604:	2800      	cmp	r0, #0
 8004606:	da6c      	bge.n	80046e2 <_dtoa_r+0x912>
 8004608:	2300      	movs	r3, #0
 800460a:	4651      	mov	r1, sl
 800460c:	220a      	movs	r2, #10
 800460e:	4628      	mov	r0, r5
 8004610:	f000 fb20 	bl	8004c54 <__multadd>
 8004614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004616:	4682      	mov	sl, r0
 8004618:	f10b 3bff 	add.w	fp, fp, #4294967295
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 81ac 	beq.w	800497a <_dtoa_r+0xbaa>
 8004622:	2300      	movs	r3, #0
 8004624:	4631      	mov	r1, r6
 8004626:	220a      	movs	r2, #10
 8004628:	4628      	mov	r0, r5
 800462a:	f000 fb13 	bl	8004c54 <__multadd>
 800462e:	9b06      	ldr	r3, [sp, #24]
 8004630:	4606      	mov	r6, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	f300 8093 	bgt.w	800475e <_dtoa_r+0x98e>
 8004638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800463a:	2b02      	cmp	r3, #2
 800463c:	dc59      	bgt.n	80046f2 <_dtoa_r+0x922>
 800463e:	e08e      	b.n	800475e <_dtoa_r+0x98e>
 8004640:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004642:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004646:	e75d      	b.n	8004504 <_dtoa_r+0x734>
 8004648:	9b08      	ldr	r3, [sp, #32]
 800464a:	1e5c      	subs	r4, r3, #1
 800464c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464e:	42a3      	cmp	r3, r4
 8004650:	bfbf      	itttt	lt
 8004652:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004654:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004656:	1ae3      	sublt	r3, r4, r3
 8004658:	18d2      	addlt	r2, r2, r3
 800465a:	bfa8      	it	ge
 800465c:	1b1c      	subge	r4, r3, r4
 800465e:	9b08      	ldr	r3, [sp, #32]
 8004660:	bfbe      	ittt	lt
 8004662:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004664:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004666:	2400      	movlt	r4, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	bfb5      	itete	lt
 800466c:	eba9 0703 	sublt.w	r7, r9, r3
 8004670:	464f      	movge	r7, r9
 8004672:	2300      	movlt	r3, #0
 8004674:	9b08      	ldrge	r3, [sp, #32]
 8004676:	e747      	b.n	8004508 <_dtoa_r+0x738>
 8004678:	464f      	mov	r7, r9
 800467a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800467c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800467e:	e74c      	b.n	800451a <_dtoa_r+0x74a>
 8004680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004682:	e773      	b.n	800456c <_dtoa_r+0x79c>
 8004684:	3fe00000 	.word	0x3fe00000
 8004688:	40240000 	.word	0x40240000
 800468c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800468e:	2b01      	cmp	r3, #1
 8004690:	dc18      	bgt.n	80046c4 <_dtoa_r+0x8f4>
 8004692:	9b04      	ldr	r3, [sp, #16]
 8004694:	b9b3      	cbnz	r3, 80046c4 <_dtoa_r+0x8f4>
 8004696:	9b05      	ldr	r3, [sp, #20]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	b993      	cbnz	r3, 80046c4 <_dtoa_r+0x8f4>
 800469e:	9b05      	ldr	r3, [sp, #20]
 80046a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	051b      	lsls	r3, r3, #20
 80046a8:	b17b      	cbz	r3, 80046ca <_dtoa_r+0x8fa>
 80046aa:	f04f 0801 	mov.w	r8, #1
 80046ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b0:	f109 0901 	add.w	r9, r9, #1
 80046b4:	3301      	adds	r3, #1
 80046b6:	9309      	str	r3, [sp, #36]	; 0x24
 80046b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f47f af6f 	bne.w	800459e <_dtoa_r+0x7ce>
 80046c0:	2001      	movs	r0, #1
 80046c2:	e774      	b.n	80045ae <_dtoa_r+0x7de>
 80046c4:	f04f 0800 	mov.w	r8, #0
 80046c8:	e7f6      	b.n	80046b8 <_dtoa_r+0x8e8>
 80046ca:	4698      	mov	r8, r3
 80046cc:	e7f4      	b.n	80046b8 <_dtoa_r+0x8e8>
 80046ce:	d080      	beq.n	80045d2 <_dtoa_r+0x802>
 80046d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d2:	331c      	adds	r3, #28
 80046d4:	441a      	add	r2, r3
 80046d6:	4499      	add	r9, r3
 80046d8:	441f      	add	r7, r3
 80046da:	9209      	str	r2, [sp, #36]	; 0x24
 80046dc:	e779      	b.n	80045d2 <_dtoa_r+0x802>
 80046de:	4603      	mov	r3, r0
 80046e0:	e7f6      	b.n	80046d0 <_dtoa_r+0x900>
 80046e2:	9b08      	ldr	r3, [sp, #32]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dc34      	bgt.n	8004752 <_dtoa_r+0x982>
 80046e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	dd31      	ble.n	8004752 <_dtoa_r+0x982>
 80046ee:	9b08      	ldr	r3, [sp, #32]
 80046f0:	9306      	str	r3, [sp, #24]
 80046f2:	9b06      	ldr	r3, [sp, #24]
 80046f4:	b963      	cbnz	r3, 8004710 <_dtoa_r+0x940>
 80046f6:	4621      	mov	r1, r4
 80046f8:	2205      	movs	r2, #5
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 faaa 	bl	8004c54 <__multadd>
 8004700:	4601      	mov	r1, r0
 8004702:	4604      	mov	r4, r0
 8004704:	4650      	mov	r0, sl
 8004706:	f000 fcbd 	bl	8005084 <__mcmp>
 800470a:	2800      	cmp	r0, #0
 800470c:	f73f adbf 	bgt.w	800428e <_dtoa_r+0x4be>
 8004710:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004712:	9f03      	ldr	r7, [sp, #12]
 8004714:	ea6f 0b03 	mvn.w	fp, r3
 8004718:	f04f 0800 	mov.w	r8, #0
 800471c:	4621      	mov	r1, r4
 800471e:	4628      	mov	r0, r5
 8004720:	f000 fa76 	bl	8004c10 <_Bfree>
 8004724:	2e00      	cmp	r6, #0
 8004726:	f43f aead 	beq.w	8004484 <_dtoa_r+0x6b4>
 800472a:	f1b8 0f00 	cmp.w	r8, #0
 800472e:	d005      	beq.n	800473c <_dtoa_r+0x96c>
 8004730:	45b0      	cmp	r8, r6
 8004732:	d003      	beq.n	800473c <_dtoa_r+0x96c>
 8004734:	4641      	mov	r1, r8
 8004736:	4628      	mov	r0, r5
 8004738:	f000 fa6a 	bl	8004c10 <_Bfree>
 800473c:	4631      	mov	r1, r6
 800473e:	4628      	mov	r0, r5
 8004740:	f000 fa66 	bl	8004c10 <_Bfree>
 8004744:	e69e      	b.n	8004484 <_dtoa_r+0x6b4>
 8004746:	2400      	movs	r4, #0
 8004748:	4626      	mov	r6, r4
 800474a:	e7e1      	b.n	8004710 <_dtoa_r+0x940>
 800474c:	46c3      	mov	fp, r8
 800474e:	4626      	mov	r6, r4
 8004750:	e59d      	b.n	800428e <_dtoa_r+0x4be>
 8004752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80c8 	beq.w	80048ea <_dtoa_r+0xb1a>
 800475a:	9b08      	ldr	r3, [sp, #32]
 800475c:	9306      	str	r3, [sp, #24]
 800475e:	2f00      	cmp	r7, #0
 8004760:	dd05      	ble.n	800476e <_dtoa_r+0x99e>
 8004762:	4631      	mov	r1, r6
 8004764:	463a      	mov	r2, r7
 8004766:	4628      	mov	r0, r5
 8004768:	f000 fc20 	bl	8004fac <__lshift>
 800476c:	4606      	mov	r6, r0
 800476e:	f1b8 0f00 	cmp.w	r8, #0
 8004772:	d05b      	beq.n	800482c <_dtoa_r+0xa5c>
 8004774:	4628      	mov	r0, r5
 8004776:	6871      	ldr	r1, [r6, #4]
 8004778:	f000 fa0a 	bl	8004b90 <_Balloc>
 800477c:	4607      	mov	r7, r0
 800477e:	b928      	cbnz	r0, 800478c <_dtoa_r+0x9bc>
 8004780:	4602      	mov	r2, r0
 8004782:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004786:	4b81      	ldr	r3, [pc, #516]	; (800498c <_dtoa_r+0xbbc>)
 8004788:	f7ff bb36 	b.w	8003df8 <_dtoa_r+0x28>
 800478c:	6932      	ldr	r2, [r6, #16]
 800478e:	f106 010c 	add.w	r1, r6, #12
 8004792:	3202      	adds	r2, #2
 8004794:	0092      	lsls	r2, r2, #2
 8004796:	300c      	adds	r0, #12
 8004798:	f000 ff9e 	bl	80056d8 <memcpy>
 800479c:	2201      	movs	r2, #1
 800479e:	4639      	mov	r1, r7
 80047a0:	4628      	mov	r0, r5
 80047a2:	f000 fc03 	bl	8004fac <__lshift>
 80047a6:	46b0      	mov	r8, r6
 80047a8:	4606      	mov	r6, r0
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	9a03      	ldr	r2, [sp, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	9308      	str	r3, [sp, #32]
 80047b2:	9b06      	ldr	r3, [sp, #24]
 80047b4:	4413      	add	r3, r2
 80047b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047b8:	9b04      	ldr	r3, [sp, #16]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	930a      	str	r3, [sp, #40]	; 0x28
 80047c0:	9b08      	ldr	r3, [sp, #32]
 80047c2:	4621      	mov	r1, r4
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4650      	mov	r0, sl
 80047c8:	9304      	str	r3, [sp, #16]
 80047ca:	f7ff fa78 	bl	8003cbe <quorem>
 80047ce:	4641      	mov	r1, r8
 80047d0:	9006      	str	r0, [sp, #24]
 80047d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047d6:	4650      	mov	r0, sl
 80047d8:	f000 fc54 	bl	8005084 <__mcmp>
 80047dc:	4632      	mov	r2, r6
 80047de:	9009      	str	r0, [sp, #36]	; 0x24
 80047e0:	4621      	mov	r1, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 fc6a 	bl	80050bc <__mdiff>
 80047e8:	68c2      	ldr	r2, [r0, #12]
 80047ea:	4607      	mov	r7, r0
 80047ec:	bb02      	cbnz	r2, 8004830 <_dtoa_r+0xa60>
 80047ee:	4601      	mov	r1, r0
 80047f0:	4650      	mov	r0, sl
 80047f2:	f000 fc47 	bl	8005084 <__mcmp>
 80047f6:	4602      	mov	r2, r0
 80047f8:	4639      	mov	r1, r7
 80047fa:	4628      	mov	r0, r5
 80047fc:	920c      	str	r2, [sp, #48]	; 0x30
 80047fe:	f000 fa07 	bl	8004c10 <_Bfree>
 8004802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004806:	9f08      	ldr	r7, [sp, #32]
 8004808:	ea43 0102 	orr.w	r1, r3, r2
 800480c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480e:	4319      	orrs	r1, r3
 8004810:	d110      	bne.n	8004834 <_dtoa_r+0xa64>
 8004812:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004816:	d029      	beq.n	800486c <_dtoa_r+0xa9c>
 8004818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	dd02      	ble.n	8004824 <_dtoa_r+0xa54>
 800481e:	9b06      	ldr	r3, [sp, #24]
 8004820:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004824:	9b04      	ldr	r3, [sp, #16]
 8004826:	f883 9000 	strb.w	r9, [r3]
 800482a:	e777      	b.n	800471c <_dtoa_r+0x94c>
 800482c:	4630      	mov	r0, r6
 800482e:	e7ba      	b.n	80047a6 <_dtoa_r+0x9d6>
 8004830:	2201      	movs	r2, #1
 8004832:	e7e1      	b.n	80047f8 <_dtoa_r+0xa28>
 8004834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	db04      	blt.n	8004844 <_dtoa_r+0xa74>
 800483a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800483c:	430b      	orrs	r3, r1
 800483e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004840:	430b      	orrs	r3, r1
 8004842:	d120      	bne.n	8004886 <_dtoa_r+0xab6>
 8004844:	2a00      	cmp	r2, #0
 8004846:	dded      	ble.n	8004824 <_dtoa_r+0xa54>
 8004848:	4651      	mov	r1, sl
 800484a:	2201      	movs	r2, #1
 800484c:	4628      	mov	r0, r5
 800484e:	f000 fbad 	bl	8004fac <__lshift>
 8004852:	4621      	mov	r1, r4
 8004854:	4682      	mov	sl, r0
 8004856:	f000 fc15 	bl	8005084 <__mcmp>
 800485a:	2800      	cmp	r0, #0
 800485c:	dc03      	bgt.n	8004866 <_dtoa_r+0xa96>
 800485e:	d1e1      	bne.n	8004824 <_dtoa_r+0xa54>
 8004860:	f019 0f01 	tst.w	r9, #1
 8004864:	d0de      	beq.n	8004824 <_dtoa_r+0xa54>
 8004866:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800486a:	d1d8      	bne.n	800481e <_dtoa_r+0xa4e>
 800486c:	2339      	movs	r3, #57	; 0x39
 800486e:	9a04      	ldr	r2, [sp, #16]
 8004870:	7013      	strb	r3, [r2, #0]
 8004872:	463b      	mov	r3, r7
 8004874:	461f      	mov	r7, r3
 8004876:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800487a:	3b01      	subs	r3, #1
 800487c:	2a39      	cmp	r2, #57	; 0x39
 800487e:	d06b      	beq.n	8004958 <_dtoa_r+0xb88>
 8004880:	3201      	adds	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e74a      	b.n	800471c <_dtoa_r+0x94c>
 8004886:	2a00      	cmp	r2, #0
 8004888:	dd07      	ble.n	800489a <_dtoa_r+0xaca>
 800488a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800488e:	d0ed      	beq.n	800486c <_dtoa_r+0xa9c>
 8004890:	9a04      	ldr	r2, [sp, #16]
 8004892:	f109 0301 	add.w	r3, r9, #1
 8004896:	7013      	strb	r3, [r2, #0]
 8004898:	e740      	b.n	800471c <_dtoa_r+0x94c>
 800489a:	9b08      	ldr	r3, [sp, #32]
 800489c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800489e:	f803 9c01 	strb.w	r9, [r3, #-1]
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d042      	beq.n	800492c <_dtoa_r+0xb5c>
 80048a6:	4651      	mov	r1, sl
 80048a8:	2300      	movs	r3, #0
 80048aa:	220a      	movs	r2, #10
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f9d1 	bl	8004c54 <__multadd>
 80048b2:	45b0      	cmp	r8, r6
 80048b4:	4682      	mov	sl, r0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	f04f 020a 	mov.w	r2, #10
 80048be:	4641      	mov	r1, r8
 80048c0:	4628      	mov	r0, r5
 80048c2:	d107      	bne.n	80048d4 <_dtoa_r+0xb04>
 80048c4:	f000 f9c6 	bl	8004c54 <__multadd>
 80048c8:	4680      	mov	r8, r0
 80048ca:	4606      	mov	r6, r0
 80048cc:	9b08      	ldr	r3, [sp, #32]
 80048ce:	3301      	adds	r3, #1
 80048d0:	9308      	str	r3, [sp, #32]
 80048d2:	e775      	b.n	80047c0 <_dtoa_r+0x9f0>
 80048d4:	f000 f9be 	bl	8004c54 <__multadd>
 80048d8:	4631      	mov	r1, r6
 80048da:	4680      	mov	r8, r0
 80048dc:	2300      	movs	r3, #0
 80048de:	220a      	movs	r2, #10
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 f9b7 	bl	8004c54 <__multadd>
 80048e6:	4606      	mov	r6, r0
 80048e8:	e7f0      	b.n	80048cc <_dtoa_r+0xafc>
 80048ea:	9b08      	ldr	r3, [sp, #32]
 80048ec:	9306      	str	r3, [sp, #24]
 80048ee:	9f03      	ldr	r7, [sp, #12]
 80048f0:	4621      	mov	r1, r4
 80048f2:	4650      	mov	r0, sl
 80048f4:	f7ff f9e3 	bl	8003cbe <quorem>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80048fe:	f807 9b01 	strb.w	r9, [r7], #1
 8004902:	1afa      	subs	r2, r7, r3
 8004904:	9b06      	ldr	r3, [sp, #24]
 8004906:	4293      	cmp	r3, r2
 8004908:	dd07      	ble.n	800491a <_dtoa_r+0xb4a>
 800490a:	4651      	mov	r1, sl
 800490c:	2300      	movs	r3, #0
 800490e:	220a      	movs	r2, #10
 8004910:	4628      	mov	r0, r5
 8004912:	f000 f99f 	bl	8004c54 <__multadd>
 8004916:	4682      	mov	sl, r0
 8004918:	e7ea      	b.n	80048f0 <_dtoa_r+0xb20>
 800491a:	9b06      	ldr	r3, [sp, #24]
 800491c:	f04f 0800 	mov.w	r8, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	bfcc      	ite	gt
 8004924:	461f      	movgt	r7, r3
 8004926:	2701      	movle	r7, #1
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	441f      	add	r7, r3
 800492c:	4651      	mov	r1, sl
 800492e:	2201      	movs	r2, #1
 8004930:	4628      	mov	r0, r5
 8004932:	f000 fb3b 	bl	8004fac <__lshift>
 8004936:	4621      	mov	r1, r4
 8004938:	4682      	mov	sl, r0
 800493a:	f000 fba3 	bl	8005084 <__mcmp>
 800493e:	2800      	cmp	r0, #0
 8004940:	dc97      	bgt.n	8004872 <_dtoa_r+0xaa2>
 8004942:	d102      	bne.n	800494a <_dtoa_r+0xb7a>
 8004944:	f019 0f01 	tst.w	r9, #1
 8004948:	d193      	bne.n	8004872 <_dtoa_r+0xaa2>
 800494a:	463b      	mov	r3, r7
 800494c:	461f      	mov	r7, r3
 800494e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004952:	2a30      	cmp	r2, #48	; 0x30
 8004954:	d0fa      	beq.n	800494c <_dtoa_r+0xb7c>
 8004956:	e6e1      	b.n	800471c <_dtoa_r+0x94c>
 8004958:	9a03      	ldr	r2, [sp, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d18a      	bne.n	8004874 <_dtoa_r+0xaa4>
 800495e:	2331      	movs	r3, #49	; 0x31
 8004960:	f10b 0b01 	add.w	fp, fp, #1
 8004964:	e797      	b.n	8004896 <_dtoa_r+0xac6>
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <_dtoa_r+0xbc0>)
 8004968:	f7ff ba9f 	b.w	8003eaa <_dtoa_r+0xda>
 800496c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800496e:	2b00      	cmp	r3, #0
 8004970:	f47f aa77 	bne.w	8003e62 <_dtoa_r+0x92>
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <_dtoa_r+0xbc4>)
 8004976:	f7ff ba98 	b.w	8003eaa <_dtoa_r+0xda>
 800497a:	9b06      	ldr	r3, [sp, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	dcb6      	bgt.n	80048ee <_dtoa_r+0xb1e>
 8004980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004982:	2b02      	cmp	r3, #2
 8004984:	f73f aeb5 	bgt.w	80046f2 <_dtoa_r+0x922>
 8004988:	e7b1      	b.n	80048ee <_dtoa_r+0xb1e>
 800498a:	bf00      	nop
 800498c:	08005eae 	.word	0x08005eae
 8004990:	08005e0e 	.word	0x08005e0e
 8004994:	08005e32 	.word	0x08005e32

08004998 <_free_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4605      	mov	r5, r0
 800499c:	2900      	cmp	r1, #0
 800499e:	d040      	beq.n	8004a22 <_free_r+0x8a>
 80049a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a4:	1f0c      	subs	r4, r1, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bfb8      	it	lt
 80049aa:	18e4      	addlt	r4, r4, r3
 80049ac:	f000 f8e4 	bl	8004b78 <__malloc_lock>
 80049b0:	4a1c      	ldr	r2, [pc, #112]	; (8004a24 <_free_r+0x8c>)
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	b933      	cbnz	r3, 80049c4 <_free_r+0x2c>
 80049b6:	6063      	str	r3, [r4, #4]
 80049b8:	6014      	str	r4, [r2, #0]
 80049ba:	4628      	mov	r0, r5
 80049bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c0:	f000 b8e0 	b.w	8004b84 <__malloc_unlock>
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d908      	bls.n	80049da <_free_r+0x42>
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	1821      	adds	r1, r4, r0
 80049cc:	428b      	cmp	r3, r1
 80049ce:	bf01      	itttt	eq
 80049d0:	6819      	ldreq	r1, [r3, #0]
 80049d2:	685b      	ldreq	r3, [r3, #4]
 80049d4:	1809      	addeq	r1, r1, r0
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	e7ed      	b.n	80049b6 <_free_r+0x1e>
 80049da:	461a      	mov	r2, r3
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b10b      	cbz	r3, 80049e4 <_free_r+0x4c>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d9fa      	bls.n	80049da <_free_r+0x42>
 80049e4:	6811      	ldr	r1, [r2, #0]
 80049e6:	1850      	adds	r0, r2, r1
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d10b      	bne.n	8004a04 <_free_r+0x6c>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	4401      	add	r1, r0
 80049f0:	1850      	adds	r0, r2, r1
 80049f2:	4283      	cmp	r3, r0
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	d1e0      	bne.n	80049ba <_free_r+0x22>
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4408      	add	r0, r1
 80049fe:	6010      	str	r0, [r2, #0]
 8004a00:	6053      	str	r3, [r2, #4]
 8004a02:	e7da      	b.n	80049ba <_free_r+0x22>
 8004a04:	d902      	bls.n	8004a0c <_free_r+0x74>
 8004a06:	230c      	movs	r3, #12
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	e7d6      	b.n	80049ba <_free_r+0x22>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	1821      	adds	r1, r4, r0
 8004a10:	428b      	cmp	r3, r1
 8004a12:	bf01      	itttt	eq
 8004a14:	6819      	ldreq	r1, [r3, #0]
 8004a16:	685b      	ldreq	r3, [r3, #4]
 8004a18:	1809      	addeq	r1, r1, r0
 8004a1a:	6021      	streq	r1, [r4, #0]
 8004a1c:	6063      	str	r3, [r4, #4]
 8004a1e:	6054      	str	r4, [r2, #4]
 8004a20:	e7cb      	b.n	80049ba <_free_r+0x22>
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000430 	.word	0x20000430

08004a28 <malloc>:
 8004a28:	4b02      	ldr	r3, [pc, #8]	; (8004a34 <malloc+0xc>)
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	f000 b823 	b.w	8004a78 <_malloc_r>
 8004a32:	bf00      	nop
 8004a34:	2000006c 	.word	0x2000006c

08004a38 <sbrk_aligned>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	4e0e      	ldr	r6, [pc, #56]	; (8004a74 <sbrk_aligned+0x3c>)
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	6831      	ldr	r1, [r6, #0]
 8004a40:	4605      	mov	r5, r0
 8004a42:	b911      	cbnz	r1, 8004a4a <sbrk_aligned+0x12>
 8004a44:	f000 fe38 	bl	80056b8 <_sbrk_r>
 8004a48:	6030      	str	r0, [r6, #0]
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 fe33 	bl	80056b8 <_sbrk_r>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	d00a      	beq.n	8004a6c <sbrk_aligned+0x34>
 8004a56:	1cc4      	adds	r4, r0, #3
 8004a58:	f024 0403 	bic.w	r4, r4, #3
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d007      	beq.n	8004a70 <sbrk_aligned+0x38>
 8004a60:	1a21      	subs	r1, r4, r0
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 fe28 	bl	80056b8 <_sbrk_r>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d101      	bne.n	8004a70 <sbrk_aligned+0x38>
 8004a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a70:	4620      	mov	r0, r4
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	20000434 	.word	0x20000434

08004a78 <_malloc_r>:
 8004a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a7c:	1ccd      	adds	r5, r1, #3
 8004a7e:	f025 0503 	bic.w	r5, r5, #3
 8004a82:	3508      	adds	r5, #8
 8004a84:	2d0c      	cmp	r5, #12
 8004a86:	bf38      	it	cc
 8004a88:	250c      	movcc	r5, #12
 8004a8a:	2d00      	cmp	r5, #0
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	db01      	blt.n	8004a94 <_malloc_r+0x1c>
 8004a90:	42a9      	cmp	r1, r5
 8004a92:	d905      	bls.n	8004aa0 <_malloc_r+0x28>
 8004a94:	230c      	movs	r3, #12
 8004a96:	2600      	movs	r6, #0
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b74 <_malloc_r+0xfc>
 8004aa4:	f000 f868 	bl	8004b78 <__malloc_lock>
 8004aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8004aac:	461c      	mov	r4, r3
 8004aae:	bb5c      	cbnz	r4, 8004b08 <_malloc_r+0x90>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f7ff ffc0 	bl	8004a38 <sbrk_aligned>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	4604      	mov	r4, r0
 8004abc:	d155      	bne.n	8004b6a <_malloc_r+0xf2>
 8004abe:	f8d8 4000 	ldr.w	r4, [r8]
 8004ac2:	4626      	mov	r6, r4
 8004ac4:	2e00      	cmp	r6, #0
 8004ac6:	d145      	bne.n	8004b54 <_malloc_r+0xdc>
 8004ac8:	2c00      	cmp	r4, #0
 8004aca:	d048      	beq.n	8004b5e <_malloc_r+0xe6>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	eb04 0903 	add.w	r9, r4, r3
 8004ad6:	f000 fdef 	bl	80056b8 <_sbrk_r>
 8004ada:	4581      	cmp	r9, r0
 8004adc:	d13f      	bne.n	8004b5e <_malloc_r+0xe6>
 8004ade:	6821      	ldr	r1, [r4, #0]
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	1a6d      	subs	r5, r5, r1
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7ff ffa7 	bl	8004a38 <sbrk_aligned>
 8004aea:	3001      	adds	r0, #1
 8004aec:	d037      	beq.n	8004b5e <_malloc_r+0xe6>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	442b      	add	r3, r5
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	f8d8 3000 	ldr.w	r3, [r8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d038      	beq.n	8004b6e <_malloc_r+0xf6>
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	42a2      	cmp	r2, r4
 8004b00:	d12b      	bne.n	8004b5a <_malloc_r+0xe2>
 8004b02:	2200      	movs	r2, #0
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e00f      	b.n	8004b28 <_malloc_r+0xb0>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	1b52      	subs	r2, r2, r5
 8004b0c:	d41f      	bmi.n	8004b4e <_malloc_r+0xd6>
 8004b0e:	2a0b      	cmp	r2, #11
 8004b10:	d917      	bls.n	8004b42 <_malloc_r+0xca>
 8004b12:	1961      	adds	r1, r4, r5
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	6025      	str	r5, [r4, #0]
 8004b18:	bf18      	it	ne
 8004b1a:	6059      	strne	r1, [r3, #4]
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	bf08      	it	eq
 8004b20:	f8c8 1000 	streq.w	r1, [r8]
 8004b24:	5162      	str	r2, [r4, r5]
 8004b26:	604b      	str	r3, [r1, #4]
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f104 060b 	add.w	r6, r4, #11
 8004b2e:	f000 f829 	bl	8004b84 <__malloc_unlock>
 8004b32:	f026 0607 	bic.w	r6, r6, #7
 8004b36:	1d23      	adds	r3, r4, #4
 8004b38:	1af2      	subs	r2, r6, r3
 8004b3a:	d0ae      	beq.n	8004a9a <_malloc_r+0x22>
 8004b3c:	1b9b      	subs	r3, r3, r6
 8004b3e:	50a3      	str	r3, [r4, r2]
 8004b40:	e7ab      	b.n	8004a9a <_malloc_r+0x22>
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	6862      	ldr	r2, [r4, #4]
 8004b46:	d1dd      	bne.n	8004b04 <_malloc_r+0x8c>
 8004b48:	f8c8 2000 	str.w	r2, [r8]
 8004b4c:	e7ec      	b.n	8004b28 <_malloc_r+0xb0>
 8004b4e:	4623      	mov	r3, r4
 8004b50:	6864      	ldr	r4, [r4, #4]
 8004b52:	e7ac      	b.n	8004aae <_malloc_r+0x36>
 8004b54:	4634      	mov	r4, r6
 8004b56:	6876      	ldr	r6, [r6, #4]
 8004b58:	e7b4      	b.n	8004ac4 <_malloc_r+0x4c>
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	e7cc      	b.n	8004af8 <_malloc_r+0x80>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	4638      	mov	r0, r7
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	f000 f80e 	bl	8004b84 <__malloc_unlock>
 8004b68:	e797      	b.n	8004a9a <_malloc_r+0x22>
 8004b6a:	6025      	str	r5, [r4, #0]
 8004b6c:	e7dc      	b.n	8004b28 <_malloc_r+0xb0>
 8004b6e:	605b      	str	r3, [r3, #4]
 8004b70:	deff      	udf	#255	; 0xff
 8004b72:	bf00      	nop
 8004b74:	20000430 	.word	0x20000430

08004b78 <__malloc_lock>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__malloc_lock+0x8>)
 8004b7a:	f7ff b890 	b.w	8003c9e <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	2000042c 	.word	0x2000042c

08004b84 <__malloc_unlock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_unlock+0x8>)
 8004b86:	f7ff b88b 	b.w	8003ca0 <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	2000042c 	.word	0x2000042c

08004b90 <_Balloc>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	69c6      	ldr	r6, [r0, #28]
 8004b94:	4604      	mov	r4, r0
 8004b96:	460d      	mov	r5, r1
 8004b98:	b976      	cbnz	r6, 8004bb8 <_Balloc+0x28>
 8004b9a:	2010      	movs	r0, #16
 8004b9c:	f7ff ff44 	bl	8004a28 <malloc>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	61e0      	str	r0, [r4, #28]
 8004ba4:	b920      	cbnz	r0, 8004bb0 <_Balloc+0x20>
 8004ba6:	216b      	movs	r1, #107	; 0x6b
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <_Balloc+0x78>)
 8004baa:	4818      	ldr	r0, [pc, #96]	; (8004c0c <_Balloc+0x7c>)
 8004bac:	f000 fda2 	bl	80056f4 <__assert_func>
 8004bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bb4:	6006      	str	r6, [r0, #0]
 8004bb6:	60c6      	str	r6, [r0, #12]
 8004bb8:	69e6      	ldr	r6, [r4, #28]
 8004bba:	68f3      	ldr	r3, [r6, #12]
 8004bbc:	b183      	cbz	r3, 8004be0 <_Balloc+0x50>
 8004bbe:	69e3      	ldr	r3, [r4, #28]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bc6:	b9b8      	cbnz	r0, 8004bf8 <_Balloc+0x68>
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f605 	lsl.w	r6, r1, r5
 8004bce:	1d72      	adds	r2, r6, #5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	0092      	lsls	r2, r2, #2
 8004bd4:	f000 fdac 	bl	8005730 <_calloc_r>
 8004bd8:	b160      	cbz	r0, 8004bf4 <_Balloc+0x64>
 8004bda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004bde:	e00e      	b.n	8004bfe <_Balloc+0x6e>
 8004be0:	2221      	movs	r2, #33	; 0x21
 8004be2:	2104      	movs	r1, #4
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 fda3 	bl	8005730 <_calloc_r>
 8004bea:	69e3      	ldr	r3, [r4, #28]
 8004bec:	60f0      	str	r0, [r6, #12]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e4      	bne.n	8004bbe <_Balloc+0x2e>
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	6802      	ldr	r2, [r0, #0]
 8004bfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c04:	e7f7      	b.n	8004bf6 <_Balloc+0x66>
 8004c06:	bf00      	nop
 8004c08:	08005e3f 	.word	0x08005e3f
 8004c0c:	08005ebf 	.word	0x08005ebf

08004c10 <_Bfree>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	69c6      	ldr	r6, [r0, #28]
 8004c14:	4605      	mov	r5, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b976      	cbnz	r6, 8004c38 <_Bfree+0x28>
 8004c1a:	2010      	movs	r0, #16
 8004c1c:	f7ff ff04 	bl	8004a28 <malloc>
 8004c20:	4602      	mov	r2, r0
 8004c22:	61e8      	str	r0, [r5, #28]
 8004c24:	b920      	cbnz	r0, 8004c30 <_Bfree+0x20>
 8004c26:	218f      	movs	r1, #143	; 0x8f
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <_Bfree+0x3c>)
 8004c2a:	4809      	ldr	r0, [pc, #36]	; (8004c50 <_Bfree+0x40>)
 8004c2c:	f000 fd62 	bl	80056f4 <__assert_func>
 8004c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c34:	6006      	str	r6, [r0, #0]
 8004c36:	60c6      	str	r6, [r0, #12]
 8004c38:	b13c      	cbz	r4, 8004c4a <_Bfree+0x3a>
 8004c3a:	69eb      	ldr	r3, [r5, #28]
 8004c3c:	6862      	ldr	r2, [r4, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c44:	6021      	str	r1, [r4, #0]
 8004c46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	08005e3f 	.word	0x08005e3f
 8004c50:	08005ebf 	.word	0x08005ebf

08004c54 <__multadd>:
 8004c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c58:	4607      	mov	r7, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	461e      	mov	r6, r3
 8004c5e:	2000      	movs	r0, #0
 8004c60:	690d      	ldr	r5, [r1, #16]
 8004c62:	f101 0c14 	add.w	ip, r1, #20
 8004c66:	f8dc 3000 	ldr.w	r3, [ip]
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	b299      	uxth	r1, r3
 8004c6e:	fb02 6101 	mla	r1, r2, r1, r6
 8004c72:	0c1e      	lsrs	r6, r3, #16
 8004c74:	0c0b      	lsrs	r3, r1, #16
 8004c76:	fb02 3306 	mla	r3, r2, r6, r3
 8004c7a:	b289      	uxth	r1, r1
 8004c7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c80:	4285      	cmp	r5, r0
 8004c82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c86:	f84c 1b04 	str.w	r1, [ip], #4
 8004c8a:	dcec      	bgt.n	8004c66 <__multadd+0x12>
 8004c8c:	b30e      	cbz	r6, 8004cd2 <__multadd+0x7e>
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dc19      	bgt.n	8004cc8 <__multadd+0x74>
 8004c94:	6861      	ldr	r1, [r4, #4]
 8004c96:	4638      	mov	r0, r7
 8004c98:	3101      	adds	r1, #1
 8004c9a:	f7ff ff79 	bl	8004b90 <_Balloc>
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	b928      	cbnz	r0, 8004cae <__multadd+0x5a>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	21ba      	movs	r1, #186	; 0xba
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <__multadd+0x84>)
 8004ca8:	480c      	ldr	r0, [pc, #48]	; (8004cdc <__multadd+0x88>)
 8004caa:	f000 fd23 	bl	80056f4 <__assert_func>
 8004cae:	6922      	ldr	r2, [r4, #16]
 8004cb0:	f104 010c 	add.w	r1, r4, #12
 8004cb4:	3202      	adds	r2, #2
 8004cb6:	0092      	lsls	r2, r2, #2
 8004cb8:	300c      	adds	r0, #12
 8004cba:	f000 fd0d 	bl	80056d8 <memcpy>
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f7ff ffa5 	bl	8004c10 <_Bfree>
 8004cc6:	4644      	mov	r4, r8
 8004cc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ccc:	3501      	adds	r5, #1
 8004cce:	615e      	str	r6, [r3, #20]
 8004cd0:	6125      	str	r5, [r4, #16]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	08005eae 	.word	0x08005eae
 8004cdc:	08005ebf 	.word	0x08005ebf

08004ce0 <__hi0bits>:
 8004ce0:	0c02      	lsrs	r2, r0, #16
 8004ce2:	0412      	lsls	r2, r2, #16
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	b9ca      	cbnz	r2, 8004d1c <__hi0bits+0x3c>
 8004ce8:	0403      	lsls	r3, r0, #16
 8004cea:	2010      	movs	r0, #16
 8004cec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004cf0:	bf04      	itt	eq
 8004cf2:	021b      	lsleq	r3, r3, #8
 8004cf4:	3008      	addeq	r0, #8
 8004cf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004cfa:	bf04      	itt	eq
 8004cfc:	011b      	lsleq	r3, r3, #4
 8004cfe:	3004      	addeq	r0, #4
 8004d00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d04:	bf04      	itt	eq
 8004d06:	009b      	lsleq	r3, r3, #2
 8004d08:	3002      	addeq	r0, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db05      	blt.n	8004d1a <__hi0bits+0x3a>
 8004d0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004d12:	f100 0001 	add.w	r0, r0, #1
 8004d16:	bf08      	it	eq
 8004d18:	2020      	moveq	r0, #32
 8004d1a:	4770      	bx	lr
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e7e5      	b.n	8004cec <__hi0bits+0xc>

08004d20 <__lo0bits>:
 8004d20:	6803      	ldr	r3, [r0, #0]
 8004d22:	4602      	mov	r2, r0
 8004d24:	f013 0007 	ands.w	r0, r3, #7
 8004d28:	d00b      	beq.n	8004d42 <__lo0bits+0x22>
 8004d2a:	07d9      	lsls	r1, r3, #31
 8004d2c:	d421      	bmi.n	8004d72 <__lo0bits+0x52>
 8004d2e:	0798      	lsls	r0, r3, #30
 8004d30:	bf49      	itett	mi
 8004d32:	085b      	lsrmi	r3, r3, #1
 8004d34:	089b      	lsrpl	r3, r3, #2
 8004d36:	2001      	movmi	r0, #1
 8004d38:	6013      	strmi	r3, [r2, #0]
 8004d3a:	bf5c      	itt	pl
 8004d3c:	2002      	movpl	r0, #2
 8004d3e:	6013      	strpl	r3, [r2, #0]
 8004d40:	4770      	bx	lr
 8004d42:	b299      	uxth	r1, r3
 8004d44:	b909      	cbnz	r1, 8004d4a <__lo0bits+0x2a>
 8004d46:	2010      	movs	r0, #16
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	b2d9      	uxtb	r1, r3
 8004d4c:	b909      	cbnz	r1, 8004d52 <__lo0bits+0x32>
 8004d4e:	3008      	adds	r0, #8
 8004d50:	0a1b      	lsrs	r3, r3, #8
 8004d52:	0719      	lsls	r1, r3, #28
 8004d54:	bf04      	itt	eq
 8004d56:	091b      	lsreq	r3, r3, #4
 8004d58:	3004      	addeq	r0, #4
 8004d5a:	0799      	lsls	r1, r3, #30
 8004d5c:	bf04      	itt	eq
 8004d5e:	089b      	lsreq	r3, r3, #2
 8004d60:	3002      	addeq	r0, #2
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	d403      	bmi.n	8004d6e <__lo0bits+0x4e>
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	f100 0001 	add.w	r0, r0, #1
 8004d6c:	d003      	beq.n	8004d76 <__lo0bits+0x56>
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4770      	bx	lr
 8004d72:	2000      	movs	r0, #0
 8004d74:	4770      	bx	lr
 8004d76:	2020      	movs	r0, #32
 8004d78:	4770      	bx	lr
	...

08004d7c <__i2b>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	460c      	mov	r4, r1
 8004d80:	2101      	movs	r1, #1
 8004d82:	f7ff ff05 	bl	8004b90 <_Balloc>
 8004d86:	4602      	mov	r2, r0
 8004d88:	b928      	cbnz	r0, 8004d96 <__i2b+0x1a>
 8004d8a:	f240 1145 	movw	r1, #325	; 0x145
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__i2b+0x24>)
 8004d90:	4804      	ldr	r0, [pc, #16]	; (8004da4 <__i2b+0x28>)
 8004d92:	f000 fcaf 	bl	80056f4 <__assert_func>
 8004d96:	2301      	movs	r3, #1
 8004d98:	6144      	str	r4, [r0, #20]
 8004d9a:	6103      	str	r3, [r0, #16]
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	bf00      	nop
 8004da0:	08005eae 	.word	0x08005eae
 8004da4:	08005ebf 	.word	0x08005ebf

08004da8 <__multiply>:
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	4691      	mov	r9, r2
 8004dae:	690a      	ldr	r2, [r1, #16]
 8004db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004db4:	460c      	mov	r4, r1
 8004db6:	429a      	cmp	r2, r3
 8004db8:	bfbe      	ittt	lt
 8004dba:	460b      	movlt	r3, r1
 8004dbc:	464c      	movlt	r4, r9
 8004dbe:	4699      	movlt	r9, r3
 8004dc0:	6927      	ldr	r7, [r4, #16]
 8004dc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004dc6:	68a3      	ldr	r3, [r4, #8]
 8004dc8:	6861      	ldr	r1, [r4, #4]
 8004dca:	eb07 060a 	add.w	r6, r7, sl
 8004dce:	42b3      	cmp	r3, r6
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	bfb8      	it	lt
 8004dd4:	3101      	addlt	r1, #1
 8004dd6:	f7ff fedb 	bl	8004b90 <_Balloc>
 8004dda:	b930      	cbnz	r0, 8004dea <__multiply+0x42>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004de2:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <__multiply+0x148>)
 8004de4:	4843      	ldr	r0, [pc, #268]	; (8004ef4 <__multiply+0x14c>)
 8004de6:	f000 fc85 	bl	80056f4 <__assert_func>
 8004dea:	f100 0514 	add.w	r5, r0, #20
 8004dee:	462b      	mov	r3, r5
 8004df0:	2200      	movs	r2, #0
 8004df2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004df6:	4543      	cmp	r3, r8
 8004df8:	d321      	bcc.n	8004e3e <__multiply+0x96>
 8004dfa:	f104 0314 	add.w	r3, r4, #20
 8004dfe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004e02:	f109 0314 	add.w	r3, r9, #20
 8004e06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	1b3a      	subs	r2, r7, r4
 8004e0e:	3a15      	subs	r2, #21
 8004e10:	f022 0203 	bic.w	r2, r2, #3
 8004e14:	3204      	adds	r2, #4
 8004e16:	f104 0115 	add.w	r1, r4, #21
 8004e1a:	428f      	cmp	r7, r1
 8004e1c:	bf38      	it	cc
 8004e1e:	2204      	movcc	r2, #4
 8004e20:	9201      	str	r2, [sp, #4]
 8004e22:	9a02      	ldr	r2, [sp, #8]
 8004e24:	9303      	str	r3, [sp, #12]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d80c      	bhi.n	8004e44 <__multiply+0x9c>
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	dd03      	ble.n	8004e36 <__multiply+0x8e>
 8004e2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d05a      	beq.n	8004eec <__multiply+0x144>
 8004e36:	6106      	str	r6, [r0, #16]
 8004e38:	b005      	add	sp, #20
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	f843 2b04 	str.w	r2, [r3], #4
 8004e42:	e7d8      	b.n	8004df6 <__multiply+0x4e>
 8004e44:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e48:	f1ba 0f00 	cmp.w	sl, #0
 8004e4c:	d023      	beq.n	8004e96 <__multiply+0xee>
 8004e4e:	46a9      	mov	r9, r5
 8004e50:	f04f 0c00 	mov.w	ip, #0
 8004e54:	f104 0e14 	add.w	lr, r4, #20
 8004e58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004e5c:	f8d9 1000 	ldr.w	r1, [r9]
 8004e60:	fa1f fb82 	uxth.w	fp, r2
 8004e64:	b289      	uxth	r1, r1
 8004e66:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e6a:	4461      	add	r1, ip
 8004e6c:	f8d9 c000 	ldr.w	ip, [r9]
 8004e70:	0c12      	lsrs	r2, r2, #16
 8004e72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004e76:	fb0a c202 	mla	r2, sl, r2, ip
 8004e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004e7e:	b289      	uxth	r1, r1
 8004e80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e84:	4577      	cmp	r7, lr
 8004e86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e8a:	f849 1b04 	str.w	r1, [r9], #4
 8004e8e:	d8e3      	bhi.n	8004e58 <__multiply+0xb0>
 8004e90:	9a01      	ldr	r2, [sp, #4]
 8004e92:	f845 c002 	str.w	ip, [r5, r2]
 8004e96:	9a03      	ldr	r2, [sp, #12]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004e9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ea2:	d021      	beq.n	8004ee8 <__multiply+0x140>
 8004ea4:	46ae      	mov	lr, r5
 8004ea6:	f04f 0a00 	mov.w	sl, #0
 8004eaa:	6829      	ldr	r1, [r5, #0]
 8004eac:	f104 0c14 	add.w	ip, r4, #20
 8004eb0:	f8bc b000 	ldrh.w	fp, [ip]
 8004eb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004eb8:	b289      	uxth	r1, r1
 8004eba:	fb09 220b 	mla	r2, r9, fp, r2
 8004ebe:	4452      	add	r2, sl
 8004ec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ec4:	f84e 1b04 	str.w	r1, [lr], #4
 8004ec8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004ecc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004ed0:	f8be 1000 	ldrh.w	r1, [lr]
 8004ed4:	4567      	cmp	r7, ip
 8004ed6:	fb09 110a 	mla	r1, r9, sl, r1
 8004eda:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004ede:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004ee2:	d8e5      	bhi.n	8004eb0 <__multiply+0x108>
 8004ee4:	9a01      	ldr	r2, [sp, #4]
 8004ee6:	50a9      	str	r1, [r5, r2]
 8004ee8:	3504      	adds	r5, #4
 8004eea:	e79a      	b.n	8004e22 <__multiply+0x7a>
 8004eec:	3e01      	subs	r6, #1
 8004eee:	e79c      	b.n	8004e2a <__multiply+0x82>
 8004ef0:	08005eae 	.word	0x08005eae
 8004ef4:	08005ebf 	.word	0x08005ebf

08004ef8 <__pow5mult>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	4615      	mov	r5, r2
 8004efe:	f012 0203 	ands.w	r2, r2, #3
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	d007      	beq.n	8004f18 <__pow5mult+0x20>
 8004f08:	4c25      	ldr	r4, [pc, #148]	; (8004fa0 <__pow5mult+0xa8>)
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f12:	f7ff fe9f 	bl	8004c54 <__multadd>
 8004f16:	4607      	mov	r7, r0
 8004f18:	10ad      	asrs	r5, r5, #2
 8004f1a:	d03d      	beq.n	8004f98 <__pow5mult+0xa0>
 8004f1c:	69f4      	ldr	r4, [r6, #28]
 8004f1e:	b97c      	cbnz	r4, 8004f40 <__pow5mult+0x48>
 8004f20:	2010      	movs	r0, #16
 8004f22:	f7ff fd81 	bl	8004a28 <malloc>
 8004f26:	4602      	mov	r2, r0
 8004f28:	61f0      	str	r0, [r6, #28]
 8004f2a:	b928      	cbnz	r0, 8004f38 <__pow5mult+0x40>
 8004f2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <__pow5mult+0xac>)
 8004f32:	481d      	ldr	r0, [pc, #116]	; (8004fa8 <__pow5mult+0xb0>)
 8004f34:	f000 fbde 	bl	80056f4 <__assert_func>
 8004f38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f3c:	6004      	str	r4, [r0, #0]
 8004f3e:	60c4      	str	r4, [r0, #12]
 8004f40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f48:	b94c      	cbnz	r4, 8004f5e <__pow5mult+0x66>
 8004f4a:	f240 2171 	movw	r1, #625	; 0x271
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff ff14 	bl	8004d7c <__i2b>
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f5c:	6003      	str	r3, [r0, #0]
 8004f5e:	f04f 0900 	mov.w	r9, #0
 8004f62:	07eb      	lsls	r3, r5, #31
 8004f64:	d50a      	bpl.n	8004f7c <__pow5mult+0x84>
 8004f66:	4639      	mov	r1, r7
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7ff ff1c 	bl	8004da8 <__multiply>
 8004f70:	4680      	mov	r8, r0
 8004f72:	4639      	mov	r1, r7
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff fe4b 	bl	8004c10 <_Bfree>
 8004f7a:	4647      	mov	r7, r8
 8004f7c:	106d      	asrs	r5, r5, #1
 8004f7e:	d00b      	beq.n	8004f98 <__pow5mult+0xa0>
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	b938      	cbnz	r0, 8004f94 <__pow5mult+0x9c>
 8004f84:	4622      	mov	r2, r4
 8004f86:	4621      	mov	r1, r4
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f7ff ff0d 	bl	8004da8 <__multiply>
 8004f8e:	6020      	str	r0, [r4, #0]
 8004f90:	f8c0 9000 	str.w	r9, [r0]
 8004f94:	4604      	mov	r4, r0
 8004f96:	e7e4      	b.n	8004f62 <__pow5mult+0x6a>
 8004f98:	4638      	mov	r0, r7
 8004f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08006008 	.word	0x08006008
 8004fa4:	08005e3f 	.word	0x08005e3f
 8004fa8:	08005ebf 	.word	0x08005ebf

08004fac <__lshift>:
 8004fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	4691      	mov	r9, r2
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	6849      	ldr	r1, [r1, #4]
 8004fba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fc4:	f108 0601 	add.w	r6, r8, #1
 8004fc8:	42b3      	cmp	r3, r6
 8004fca:	db0b      	blt.n	8004fe4 <__lshift+0x38>
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f7ff fddf 	bl	8004b90 <_Balloc>
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	b948      	cbnz	r0, 8004fea <__lshift+0x3e>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <__lshift+0xd0>)
 8004fde:	4828      	ldr	r0, [pc, #160]	; (8005080 <__lshift+0xd4>)
 8004fe0:	f000 fb88 	bl	80056f4 <__assert_func>
 8004fe4:	3101      	adds	r1, #1
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__lshift+0x1c>
 8004fea:	2300      	movs	r3, #0
 8004fec:	f100 0114 	add.w	r1, r0, #20
 8004ff0:	f100 0210 	add.w	r2, r0, #16
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	4553      	cmp	r3, sl
 8004ff8:	db33      	blt.n	8005062 <__lshift+0xb6>
 8004ffa:	6920      	ldr	r0, [r4, #16]
 8004ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005000:	f104 0314 	add.w	r3, r4, #20
 8005004:	f019 091f 	ands.w	r9, r9, #31
 8005008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800500c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005010:	d02b      	beq.n	800506a <__lshift+0xbe>
 8005012:	468a      	mov	sl, r1
 8005014:	2200      	movs	r2, #0
 8005016:	f1c9 0e20 	rsb	lr, r9, #32
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	fa00 f009 	lsl.w	r0, r0, r9
 8005020:	4310      	orrs	r0, r2
 8005022:	f84a 0b04 	str.w	r0, [sl], #4
 8005026:	f853 2b04 	ldr.w	r2, [r3], #4
 800502a:	459c      	cmp	ip, r3
 800502c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005030:	d8f3      	bhi.n	800501a <__lshift+0x6e>
 8005032:	ebac 0304 	sub.w	r3, ip, r4
 8005036:	3b15      	subs	r3, #21
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	3304      	adds	r3, #4
 800503e:	f104 0015 	add.w	r0, r4, #21
 8005042:	4584      	cmp	ip, r0
 8005044:	bf38      	it	cc
 8005046:	2304      	movcc	r3, #4
 8005048:	50ca      	str	r2, [r1, r3]
 800504a:	b10a      	cbz	r2, 8005050 <__lshift+0xa4>
 800504c:	f108 0602 	add.w	r6, r8, #2
 8005050:	3e01      	subs	r6, #1
 8005052:	4638      	mov	r0, r7
 8005054:	4621      	mov	r1, r4
 8005056:	612e      	str	r6, [r5, #16]
 8005058:	f7ff fdda 	bl	8004c10 <_Bfree>
 800505c:	4628      	mov	r0, r5
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	f842 0f04 	str.w	r0, [r2, #4]!
 8005066:	3301      	adds	r3, #1
 8005068:	e7c5      	b.n	8004ff6 <__lshift+0x4a>
 800506a:	3904      	subs	r1, #4
 800506c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005070:	459c      	cmp	ip, r3
 8005072:	f841 2f04 	str.w	r2, [r1, #4]!
 8005076:	d8f9      	bhi.n	800506c <__lshift+0xc0>
 8005078:	e7ea      	b.n	8005050 <__lshift+0xa4>
 800507a:	bf00      	nop
 800507c:	08005eae 	.word	0x08005eae
 8005080:	08005ebf 	.word	0x08005ebf

08005084 <__mcmp>:
 8005084:	4603      	mov	r3, r0
 8005086:	690a      	ldr	r2, [r1, #16]
 8005088:	6900      	ldr	r0, [r0, #16]
 800508a:	b530      	push	{r4, r5, lr}
 800508c:	1a80      	subs	r0, r0, r2
 800508e:	d10d      	bne.n	80050ac <__mcmp+0x28>
 8005090:	3314      	adds	r3, #20
 8005092:	3114      	adds	r1, #20
 8005094:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005098:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800509c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80050a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80050a4:	4295      	cmp	r5, r2
 80050a6:	d002      	beq.n	80050ae <__mcmp+0x2a>
 80050a8:	d304      	bcc.n	80050b4 <__mcmp+0x30>
 80050aa:	2001      	movs	r0, #1
 80050ac:	bd30      	pop	{r4, r5, pc}
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	d3f4      	bcc.n	800509c <__mcmp+0x18>
 80050b2:	e7fb      	b.n	80050ac <__mcmp+0x28>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e7f8      	b.n	80050ac <__mcmp+0x28>
	...

080050bc <__mdiff>:
 80050bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	460d      	mov	r5, r1
 80050c2:	4607      	mov	r7, r0
 80050c4:	4611      	mov	r1, r2
 80050c6:	4628      	mov	r0, r5
 80050c8:	4614      	mov	r4, r2
 80050ca:	f7ff ffdb 	bl	8005084 <__mcmp>
 80050ce:	1e06      	subs	r6, r0, #0
 80050d0:	d111      	bne.n	80050f6 <__mdiff+0x3a>
 80050d2:	4631      	mov	r1, r6
 80050d4:	4638      	mov	r0, r7
 80050d6:	f7ff fd5b 	bl	8004b90 <_Balloc>
 80050da:	4602      	mov	r2, r0
 80050dc:	b928      	cbnz	r0, 80050ea <__mdiff+0x2e>
 80050de:	f240 2137 	movw	r1, #567	; 0x237
 80050e2:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <__mdiff+0x110>)
 80050e4:	483a      	ldr	r0, [pc, #232]	; (80051d0 <__mdiff+0x114>)
 80050e6:	f000 fb05 	bl	80056f4 <__assert_func>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80050f0:	4610      	mov	r0, r2
 80050f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	bfa4      	itt	ge
 80050f8:	4623      	movge	r3, r4
 80050fa:	462c      	movge	r4, r5
 80050fc:	4638      	mov	r0, r7
 80050fe:	6861      	ldr	r1, [r4, #4]
 8005100:	bfa6      	itte	ge
 8005102:	461d      	movge	r5, r3
 8005104:	2600      	movge	r6, #0
 8005106:	2601      	movlt	r6, #1
 8005108:	f7ff fd42 	bl	8004b90 <_Balloc>
 800510c:	4602      	mov	r2, r0
 800510e:	b918      	cbnz	r0, 8005118 <__mdiff+0x5c>
 8005110:	f240 2145 	movw	r1, #581	; 0x245
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <__mdiff+0x110>)
 8005116:	e7e5      	b.n	80050e4 <__mdiff+0x28>
 8005118:	f102 0814 	add.w	r8, r2, #20
 800511c:	46c2      	mov	sl, r8
 800511e:	f04f 0c00 	mov.w	ip, #0
 8005122:	6927      	ldr	r7, [r4, #16]
 8005124:	60c6      	str	r6, [r0, #12]
 8005126:	692e      	ldr	r6, [r5, #16]
 8005128:	f104 0014 	add.w	r0, r4, #20
 800512c:	f105 0914 	add.w	r9, r5, #20
 8005130:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005134:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005138:	3410      	adds	r4, #16
 800513a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800513e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005142:	fa1f f18b 	uxth.w	r1, fp
 8005146:	4461      	add	r1, ip
 8005148:	fa1f fc83 	uxth.w	ip, r3
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	eba1 010c 	sub.w	r1, r1, ip
 8005152:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005156:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800515a:	b289      	uxth	r1, r1
 800515c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005160:	454e      	cmp	r6, r9
 8005162:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005166:	f84a 1b04 	str.w	r1, [sl], #4
 800516a:	d8e6      	bhi.n	800513a <__mdiff+0x7e>
 800516c:	1b73      	subs	r3, r6, r5
 800516e:	3b15      	subs	r3, #21
 8005170:	f023 0303 	bic.w	r3, r3, #3
 8005174:	3515      	adds	r5, #21
 8005176:	3304      	adds	r3, #4
 8005178:	42ae      	cmp	r6, r5
 800517a:	bf38      	it	cc
 800517c:	2304      	movcc	r3, #4
 800517e:	4418      	add	r0, r3
 8005180:	4443      	add	r3, r8
 8005182:	461e      	mov	r6, r3
 8005184:	4605      	mov	r5, r0
 8005186:	4575      	cmp	r5, lr
 8005188:	d30e      	bcc.n	80051a8 <__mdiff+0xec>
 800518a:	f10e 0103 	add.w	r1, lr, #3
 800518e:	1a09      	subs	r1, r1, r0
 8005190:	f021 0103 	bic.w	r1, r1, #3
 8005194:	3803      	subs	r0, #3
 8005196:	4586      	cmp	lr, r0
 8005198:	bf38      	it	cc
 800519a:	2100      	movcc	r1, #0
 800519c:	440b      	add	r3, r1
 800519e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80051a2:	b189      	cbz	r1, 80051c8 <__mdiff+0x10c>
 80051a4:	6117      	str	r7, [r2, #16]
 80051a6:	e7a3      	b.n	80050f0 <__mdiff+0x34>
 80051a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80051ac:	fa1f f188 	uxth.w	r1, r8
 80051b0:	4461      	add	r1, ip
 80051b2:	140c      	asrs	r4, r1, #16
 80051b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80051b8:	b289      	uxth	r1, r1
 80051ba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80051be:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80051c2:	f846 1b04 	str.w	r1, [r6], #4
 80051c6:	e7de      	b.n	8005186 <__mdiff+0xca>
 80051c8:	3f01      	subs	r7, #1
 80051ca:	e7e8      	b.n	800519e <__mdiff+0xe2>
 80051cc:	08005eae 	.word	0x08005eae
 80051d0:	08005ebf 	.word	0x08005ebf

080051d4 <__d2b>:
 80051d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051d6:	2101      	movs	r1, #1
 80051d8:	4617      	mov	r7, r2
 80051da:	461c      	mov	r4, r3
 80051dc:	9e08      	ldr	r6, [sp, #32]
 80051de:	f7ff fcd7 	bl	8004b90 <_Balloc>
 80051e2:	4605      	mov	r5, r0
 80051e4:	b930      	cbnz	r0, 80051f4 <__d2b+0x20>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f240 310f 	movw	r1, #783	; 0x30f
 80051ec:	4b22      	ldr	r3, [pc, #136]	; (8005278 <__d2b+0xa4>)
 80051ee:	4823      	ldr	r0, [pc, #140]	; (800527c <__d2b+0xa8>)
 80051f0:	f000 fa80 	bl	80056f4 <__assert_func>
 80051f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80051f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80051fc:	bb24      	cbnz	r4, 8005248 <__d2b+0x74>
 80051fe:	2f00      	cmp	r7, #0
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	d026      	beq.n	8005252 <__d2b+0x7e>
 8005204:	4668      	mov	r0, sp
 8005206:	9700      	str	r7, [sp, #0]
 8005208:	f7ff fd8a 	bl	8004d20 <__lo0bits>
 800520c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005210:	b1e8      	cbz	r0, 800524e <__d2b+0x7a>
 8005212:	f1c0 0320 	rsb	r3, r0, #32
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	430b      	orrs	r3, r1
 800521c:	40c2      	lsrs	r2, r0
 800521e:	616b      	str	r3, [r5, #20]
 8005220:	9201      	str	r2, [sp, #4]
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf14      	ite	ne
 8005228:	2102      	movne	r1, #2
 800522a:	2101      	moveq	r1, #1
 800522c:	61ab      	str	r3, [r5, #24]
 800522e:	6129      	str	r1, [r5, #16]
 8005230:	b1bc      	cbz	r4, 8005262 <__d2b+0x8e>
 8005232:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005236:	4404      	add	r4, r0
 8005238:	6034      	str	r4, [r6, #0]
 800523a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800523e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005240:	6018      	str	r0, [r3, #0]
 8005242:	4628      	mov	r0, r5
 8005244:	b003      	add	sp, #12
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524c:	e7d7      	b.n	80051fe <__d2b+0x2a>
 800524e:	6169      	str	r1, [r5, #20]
 8005250:	e7e7      	b.n	8005222 <__d2b+0x4e>
 8005252:	a801      	add	r0, sp, #4
 8005254:	f7ff fd64 	bl	8004d20 <__lo0bits>
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	2101      	movs	r1, #1
 800525c:	616b      	str	r3, [r5, #20]
 800525e:	3020      	adds	r0, #32
 8005260:	e7e5      	b.n	800522e <__d2b+0x5a>
 8005262:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005266:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800526a:	6030      	str	r0, [r6, #0]
 800526c:	6918      	ldr	r0, [r3, #16]
 800526e:	f7ff fd37 	bl	8004ce0 <__hi0bits>
 8005272:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005276:	e7e2      	b.n	800523e <__d2b+0x6a>
 8005278:	08005eae 	.word	0x08005eae
 800527c:	08005ebf 	.word	0x08005ebf

08005280 <__ssputs_r>:
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	461f      	mov	r7, r3
 8005286:	688e      	ldr	r6, [r1, #8]
 8005288:	4682      	mov	sl, r0
 800528a:	42be      	cmp	r6, r7
 800528c:	460c      	mov	r4, r1
 800528e:	4690      	mov	r8, r2
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	d82c      	bhi.n	80052ee <__ssputs_r+0x6e>
 8005294:	898a      	ldrh	r2, [r1, #12]
 8005296:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800529a:	d026      	beq.n	80052ea <__ssputs_r+0x6a>
 800529c:	6965      	ldr	r5, [r4, #20]
 800529e:	6909      	ldr	r1, [r1, #16]
 80052a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a4:	eba3 0901 	sub.w	r9, r3, r1
 80052a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052ac:	1c7b      	adds	r3, r7, #1
 80052ae:	444b      	add	r3, r9
 80052b0:	106d      	asrs	r5, r5, #1
 80052b2:	429d      	cmp	r5, r3
 80052b4:	bf38      	it	cc
 80052b6:	461d      	movcc	r5, r3
 80052b8:	0553      	lsls	r3, r2, #21
 80052ba:	d527      	bpl.n	800530c <__ssputs_r+0x8c>
 80052bc:	4629      	mov	r1, r5
 80052be:	f7ff fbdb 	bl	8004a78 <_malloc_r>
 80052c2:	4606      	mov	r6, r0
 80052c4:	b360      	cbz	r0, 8005320 <__ssputs_r+0xa0>
 80052c6:	464a      	mov	r2, r9
 80052c8:	6921      	ldr	r1, [r4, #16]
 80052ca:	f000 fa05 	bl	80056d8 <memcpy>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	6126      	str	r6, [r4, #16]
 80052dc:	444e      	add	r6, r9
 80052de:	6026      	str	r6, [r4, #0]
 80052e0:	463e      	mov	r6, r7
 80052e2:	6165      	str	r5, [r4, #20]
 80052e4:	eba5 0509 	sub.w	r5, r5, r9
 80052e8:	60a5      	str	r5, [r4, #8]
 80052ea:	42be      	cmp	r6, r7
 80052ec:	d900      	bls.n	80052f0 <__ssputs_r+0x70>
 80052ee:	463e      	mov	r6, r7
 80052f0:	4632      	mov	r2, r6
 80052f2:	4641      	mov	r1, r8
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	f000 f9c5 	bl	8005684 <memmove>
 80052fa:	2000      	movs	r0, #0
 80052fc:	68a3      	ldr	r3, [r4, #8]
 80052fe:	1b9b      	subs	r3, r3, r6
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	4433      	add	r3, r6
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	462a      	mov	r2, r5
 800530e:	f000 fa35 	bl	800577c <_realloc_r>
 8005312:	4606      	mov	r6, r0
 8005314:	2800      	cmp	r0, #0
 8005316:	d1e0      	bne.n	80052da <__ssputs_r+0x5a>
 8005318:	4650      	mov	r0, sl
 800531a:	6921      	ldr	r1, [r4, #16]
 800531c:	f7ff fb3c 	bl	8004998 <_free_r>
 8005320:	230c      	movs	r3, #12
 8005322:	f8ca 3000 	str.w	r3, [sl]
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	e7e9      	b.n	8005308 <__ssputs_r+0x88>

08005334 <_svfiprintf_r>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4698      	mov	r8, r3
 800533a:	898b      	ldrh	r3, [r1, #12]
 800533c:	4607      	mov	r7, r0
 800533e:	061b      	lsls	r3, r3, #24
 8005340:	460d      	mov	r5, r1
 8005342:	4614      	mov	r4, r2
 8005344:	b09d      	sub	sp, #116	; 0x74
 8005346:	d50e      	bpl.n	8005366 <_svfiprintf_r+0x32>
 8005348:	690b      	ldr	r3, [r1, #16]
 800534a:	b963      	cbnz	r3, 8005366 <_svfiprintf_r+0x32>
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	f7ff fb93 	bl	8004a78 <_malloc_r>
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6128      	str	r0, [r5, #16]
 8005356:	b920      	cbnz	r0, 8005362 <_svfiprintf_r+0x2e>
 8005358:	230c      	movs	r3, #12
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e0d0      	b.n	8005504 <_svfiprintf_r+0x1d0>
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	616b      	str	r3, [r5, #20]
 8005366:	2300      	movs	r3, #0
 8005368:	9309      	str	r3, [sp, #36]	; 0x24
 800536a:	2320      	movs	r3, #32
 800536c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005370:	2330      	movs	r3, #48	; 0x30
 8005372:	f04f 0901 	mov.w	r9, #1
 8005376:	f8cd 800c 	str.w	r8, [sp, #12]
 800537a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800551c <_svfiprintf_r+0x1e8>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005382:	4623      	mov	r3, r4
 8005384:	469a      	mov	sl, r3
 8005386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538a:	b10a      	cbz	r2, 8005390 <_svfiprintf_r+0x5c>
 800538c:	2a25      	cmp	r2, #37	; 0x25
 800538e:	d1f9      	bne.n	8005384 <_svfiprintf_r+0x50>
 8005390:	ebba 0b04 	subs.w	fp, sl, r4
 8005394:	d00b      	beq.n	80053ae <_svfiprintf_r+0x7a>
 8005396:	465b      	mov	r3, fp
 8005398:	4622      	mov	r2, r4
 800539a:	4629      	mov	r1, r5
 800539c:	4638      	mov	r0, r7
 800539e:	f7ff ff6f 	bl	8005280 <__ssputs_r>
 80053a2:	3001      	adds	r0, #1
 80053a4:	f000 80a9 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053aa:	445a      	add	r2, fp
 80053ac:	9209      	str	r2, [sp, #36]	; 0x24
 80053ae:	f89a 3000 	ldrb.w	r3, [sl]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80a1 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053b8:	2300      	movs	r3, #0
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c2:	f10a 0a01 	add.w	sl, sl, #1
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	9307      	str	r3, [sp, #28]
 80053ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ce:	931a      	str	r3, [sp, #104]	; 0x68
 80053d0:	4654      	mov	r4, sl
 80053d2:	2205      	movs	r2, #5
 80053d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d8:	4850      	ldr	r0, [pc, #320]	; (800551c <_svfiprintf_r+0x1e8>)
 80053da:	f7fe fc62 	bl	8003ca2 <memchr>
 80053de:	9a04      	ldr	r2, [sp, #16]
 80053e0:	b9d8      	cbnz	r0, 800541a <_svfiprintf_r+0xe6>
 80053e2:	06d0      	lsls	r0, r2, #27
 80053e4:	bf44      	itt	mi
 80053e6:	2320      	movmi	r3, #32
 80053e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ec:	0711      	lsls	r1, r2, #28
 80053ee:	bf44      	itt	mi
 80053f0:	232b      	movmi	r3, #43	; 0x2b
 80053f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f6:	f89a 3000 	ldrb.w	r3, [sl]
 80053fa:	2b2a      	cmp	r3, #42	; 0x2a
 80053fc:	d015      	beq.n	800542a <_svfiprintf_r+0xf6>
 80053fe:	4654      	mov	r4, sl
 8005400:	2000      	movs	r0, #0
 8005402:	f04f 0c0a 	mov.w	ip, #10
 8005406:	9a07      	ldr	r2, [sp, #28]
 8005408:	4621      	mov	r1, r4
 800540a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800540e:	3b30      	subs	r3, #48	; 0x30
 8005410:	2b09      	cmp	r3, #9
 8005412:	d94d      	bls.n	80054b0 <_svfiprintf_r+0x17c>
 8005414:	b1b0      	cbz	r0, 8005444 <_svfiprintf_r+0x110>
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	e014      	b.n	8005444 <_svfiprintf_r+0x110>
 800541a:	eba0 0308 	sub.w	r3, r0, r8
 800541e:	fa09 f303 	lsl.w	r3, r9, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	46a2      	mov	sl, r4
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	e7d2      	b.n	80053d0 <_svfiprintf_r+0x9c>
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	1d19      	adds	r1, r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	9103      	str	r1, [sp, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfbb      	ittet	lt
 8005436:	425b      	neglt	r3, r3
 8005438:	f042 0202 	orrlt.w	r2, r2, #2
 800543c:	9307      	strge	r3, [sp, #28]
 800543e:	9307      	strlt	r3, [sp, #28]
 8005440:	bfb8      	it	lt
 8005442:	9204      	strlt	r2, [sp, #16]
 8005444:	7823      	ldrb	r3, [r4, #0]
 8005446:	2b2e      	cmp	r3, #46	; 0x2e
 8005448:	d10c      	bne.n	8005464 <_svfiprintf_r+0x130>
 800544a:	7863      	ldrb	r3, [r4, #1]
 800544c:	2b2a      	cmp	r3, #42	; 0x2a
 800544e:	d134      	bne.n	80054ba <_svfiprintf_r+0x186>
 8005450:	9b03      	ldr	r3, [sp, #12]
 8005452:	3402      	adds	r4, #2
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	9203      	str	r2, [sp, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfb8      	it	lt
 800545e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005520 <_svfiprintf_r+0x1ec>
 8005468:	2203      	movs	r2, #3
 800546a:	4650      	mov	r0, sl
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	f7fe fc18 	bl	8003ca2 <memchr>
 8005472:	b138      	cbz	r0, 8005484 <_svfiprintf_r+0x150>
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	eba0 000a 	sub.w	r0, r0, sl
 800547c:	4082      	lsls	r2, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	3401      	adds	r4, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	2206      	movs	r2, #6
 800548a:	4826      	ldr	r0, [pc, #152]	; (8005524 <_svfiprintf_r+0x1f0>)
 800548c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005490:	f7fe fc07 	bl	8003ca2 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d038      	beq.n	800550a <_svfiprintf_r+0x1d6>
 8005498:	4b23      	ldr	r3, [pc, #140]	; (8005528 <_svfiprintf_r+0x1f4>)
 800549a:	bb1b      	cbnz	r3, 80054e4 <_svfiprintf_r+0x1b0>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	9303      	str	r3, [sp, #12]
 80054a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054aa:	4433      	add	r3, r6
 80054ac:	9309      	str	r3, [sp, #36]	; 0x24
 80054ae:	e768      	b.n	8005382 <_svfiprintf_r+0x4e>
 80054b0:	460c      	mov	r4, r1
 80054b2:	2001      	movs	r0, #1
 80054b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b8:	e7a6      	b.n	8005408 <_svfiprintf_r+0xd4>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 0c0a 	mov.w	ip, #10
 80054c0:	4619      	mov	r1, r3
 80054c2:	3401      	adds	r4, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054cc:	3a30      	subs	r2, #48	; 0x30
 80054ce:	2a09      	cmp	r2, #9
 80054d0:	d903      	bls.n	80054da <_svfiprintf_r+0x1a6>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c6      	beq.n	8005464 <_svfiprintf_r+0x130>
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	e7c4      	b.n	8005464 <_svfiprintf_r+0x130>
 80054da:	4604      	mov	r4, r0
 80054dc:	2301      	movs	r3, #1
 80054de:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e2:	e7f0      	b.n	80054c6 <_svfiprintf_r+0x192>
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <_svfiprintf_r+0x1f8>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	f7fd fe70 	bl	80031d4 <_printf_float>
 80054f4:	1c42      	adds	r2, r0, #1
 80054f6:	4606      	mov	r6, r0
 80054f8:	d1d6      	bne.n	80054a8 <_svfiprintf_r+0x174>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af2d 	bmi.w	800535c <_svfiprintf_r+0x28>
 8005502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005504:	b01d      	add	sp, #116	; 0x74
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	ab03      	add	r3, sp, #12
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	462a      	mov	r2, r5
 8005510:	4638      	mov	r0, r7
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <_svfiprintf_r+0x1f8>)
 8005514:	a904      	add	r1, sp, #16
 8005516:	f7fe f8fd 	bl	8003714 <_printf_i>
 800551a:	e7eb      	b.n	80054f4 <_svfiprintf_r+0x1c0>
 800551c:	08006014 	.word	0x08006014
 8005520:	0800601a 	.word	0x0800601a
 8005524:	0800601e 	.word	0x0800601e
 8005528:	080031d5 	.word	0x080031d5
 800552c:	08005281 	.word	0x08005281

08005530 <__sflush_r>:
 8005530:	898a      	ldrh	r2, [r1, #12]
 8005532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005534:	4605      	mov	r5, r0
 8005536:	0710      	lsls	r0, r2, #28
 8005538:	460c      	mov	r4, r1
 800553a:	d457      	bmi.n	80055ec <__sflush_r+0xbc>
 800553c:	684b      	ldr	r3, [r1, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	dc04      	bgt.n	800554c <__sflush_r+0x1c>
 8005542:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	dc01      	bgt.n	800554c <__sflush_r+0x1c>
 8005548:	2000      	movs	r0, #0
 800554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800554e:	2e00      	cmp	r6, #0
 8005550:	d0fa      	beq.n	8005548 <__sflush_r+0x18>
 8005552:	2300      	movs	r3, #0
 8005554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005558:	682f      	ldr	r7, [r5, #0]
 800555a:	6a21      	ldr	r1, [r4, #32]
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	d032      	beq.n	80055c6 <__sflush_r+0x96>
 8005560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	075a      	lsls	r2, r3, #29
 8005566:	d505      	bpl.n	8005574 <__sflush_r+0x44>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	1ac0      	subs	r0, r0, r3
 800556c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800556e:	b10b      	cbz	r3, 8005574 <__sflush_r+0x44>
 8005570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005572:	1ac0      	subs	r0, r0, r3
 8005574:	2300      	movs	r3, #0
 8005576:	4602      	mov	r2, r0
 8005578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557a:	4628      	mov	r0, r5
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	47b0      	blx	r6
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	d106      	bne.n	8005594 <__sflush_r+0x64>
 8005586:	6829      	ldr	r1, [r5, #0]
 8005588:	291d      	cmp	r1, #29
 800558a:	d82b      	bhi.n	80055e4 <__sflush_r+0xb4>
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <__sflush_r+0x100>)
 800558e:	410a      	asrs	r2, r1
 8005590:	07d6      	lsls	r6, r2, #31
 8005592:	d427      	bmi.n	80055e4 <__sflush_r+0xb4>
 8005594:	2200      	movs	r2, #0
 8005596:	6062      	str	r2, [r4, #4]
 8005598:	6922      	ldr	r2, [r4, #16]
 800559a:	04d9      	lsls	r1, r3, #19
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	d504      	bpl.n	80055aa <__sflush_r+0x7a>
 80055a0:	1c42      	adds	r2, r0, #1
 80055a2:	d101      	bne.n	80055a8 <__sflush_r+0x78>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b903      	cbnz	r3, 80055aa <__sflush_r+0x7a>
 80055a8:	6560      	str	r0, [r4, #84]	; 0x54
 80055aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ac:	602f      	str	r7, [r5, #0]
 80055ae:	2900      	cmp	r1, #0
 80055b0:	d0ca      	beq.n	8005548 <__sflush_r+0x18>
 80055b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b6:	4299      	cmp	r1, r3
 80055b8:	d002      	beq.n	80055c0 <__sflush_r+0x90>
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7ff f9ec 	bl	8004998 <_free_r>
 80055c0:	2000      	movs	r0, #0
 80055c2:	6360      	str	r0, [r4, #52]	; 0x34
 80055c4:	e7c1      	b.n	800554a <__sflush_r+0x1a>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b0      	blx	r6
 80055cc:	1c41      	adds	r1, r0, #1
 80055ce:	d1c8      	bne.n	8005562 <__sflush_r+0x32>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0c5      	beq.n	8005562 <__sflush_r+0x32>
 80055d6:	2b1d      	cmp	r3, #29
 80055d8:	d001      	beq.n	80055de <__sflush_r+0xae>
 80055da:	2b16      	cmp	r3, #22
 80055dc:	d101      	bne.n	80055e2 <__sflush_r+0xb2>
 80055de:	602f      	str	r7, [r5, #0]
 80055e0:	e7b2      	b.n	8005548 <__sflush_r+0x18>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	e7ae      	b.n	800554a <__sflush_r+0x1a>
 80055ec:	690f      	ldr	r7, [r1, #16]
 80055ee:	2f00      	cmp	r7, #0
 80055f0:	d0aa      	beq.n	8005548 <__sflush_r+0x18>
 80055f2:	0793      	lsls	r3, r2, #30
 80055f4:	bf18      	it	ne
 80055f6:	2300      	movne	r3, #0
 80055f8:	680e      	ldr	r6, [r1, #0]
 80055fa:	bf08      	it	eq
 80055fc:	694b      	ldreq	r3, [r1, #20]
 80055fe:	1bf6      	subs	r6, r6, r7
 8005600:	600f      	str	r7, [r1, #0]
 8005602:	608b      	str	r3, [r1, #8]
 8005604:	2e00      	cmp	r6, #0
 8005606:	dd9f      	ble.n	8005548 <__sflush_r+0x18>
 8005608:	4633      	mov	r3, r6
 800560a:	463a      	mov	r2, r7
 800560c:	4628      	mov	r0, r5
 800560e:	6a21      	ldr	r1, [r4, #32]
 8005610:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005614:	47e0      	blx	ip
 8005616:	2800      	cmp	r0, #0
 8005618:	dc06      	bgt.n	8005628 <__sflush_r+0xf8>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	e790      	b.n	800554a <__sflush_r+0x1a>
 8005628:	4407      	add	r7, r0
 800562a:	1a36      	subs	r6, r6, r0
 800562c:	e7ea      	b.n	8005604 <__sflush_r+0xd4>
 800562e:	bf00      	nop
 8005630:	dfbffffe 	.word	0xdfbffffe

08005634 <_fflush_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	690b      	ldr	r3, [r1, #16]
 8005638:	4605      	mov	r5, r0
 800563a:	460c      	mov	r4, r1
 800563c:	b913      	cbnz	r3, 8005644 <_fflush_r+0x10>
 800563e:	2500      	movs	r5, #0
 8005640:	4628      	mov	r0, r5
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	b118      	cbz	r0, 800564e <_fflush_r+0x1a>
 8005646:	6a03      	ldr	r3, [r0, #32]
 8005648:	b90b      	cbnz	r3, 800564e <_fflush_r+0x1a>
 800564a:	f7fe fa11 	bl	8003a70 <__sinit>
 800564e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f3      	beq.n	800563e <_fflush_r+0xa>
 8005656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005658:	07d0      	lsls	r0, r2, #31
 800565a:	d404      	bmi.n	8005666 <_fflush_r+0x32>
 800565c:	0599      	lsls	r1, r3, #22
 800565e:	d402      	bmi.n	8005666 <_fflush_r+0x32>
 8005660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005662:	f7fe fb1c 	bl	8003c9e <__retarget_lock_acquire_recursive>
 8005666:	4628      	mov	r0, r5
 8005668:	4621      	mov	r1, r4
 800566a:	f7ff ff61 	bl	8005530 <__sflush_r>
 800566e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005670:	4605      	mov	r5, r0
 8005672:	07da      	lsls	r2, r3, #31
 8005674:	d4e4      	bmi.n	8005640 <_fflush_r+0xc>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	059b      	lsls	r3, r3, #22
 800567a:	d4e1      	bmi.n	8005640 <_fflush_r+0xc>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f7fe fb0f 	bl	8003ca0 <__retarget_lock_release_recursive>
 8005682:	e7dd      	b.n	8005640 <_fflush_r+0xc>

08005684 <memmove>:
 8005684:	4288      	cmp	r0, r1
 8005686:	b510      	push	{r4, lr}
 8005688:	eb01 0402 	add.w	r4, r1, r2
 800568c:	d902      	bls.n	8005694 <memmove+0x10>
 800568e:	4284      	cmp	r4, r0
 8005690:	4623      	mov	r3, r4
 8005692:	d807      	bhi.n	80056a4 <memmove+0x20>
 8005694:	1e43      	subs	r3, r0, #1
 8005696:	42a1      	cmp	r1, r4
 8005698:	d008      	beq.n	80056ac <memmove+0x28>
 800569a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800569e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056a2:	e7f8      	b.n	8005696 <memmove+0x12>
 80056a4:	4601      	mov	r1, r0
 80056a6:	4402      	add	r2, r0
 80056a8:	428a      	cmp	r2, r1
 80056aa:	d100      	bne.n	80056ae <memmove+0x2a>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056b6:	e7f7      	b.n	80056a8 <memmove+0x24>

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	2300      	movs	r3, #0
 80056bc:	4d05      	ldr	r5, [pc, #20]	; (80056d4 <_sbrk_r+0x1c>)
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fd38 	bl	8001138 <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20000428 	.word	0x20000428

080056d8 <memcpy>:
 80056d8:	440a      	add	r2, r1
 80056da:	4291      	cmp	r1, r2
 80056dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056e0:	d100      	bne.n	80056e4 <memcpy+0xc>
 80056e2:	4770      	bx	lr
 80056e4:	b510      	push	{r4, lr}
 80056e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ea:	4291      	cmp	r1, r2
 80056ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f0:	d1f9      	bne.n	80056e6 <memcpy+0xe>
 80056f2:	bd10      	pop	{r4, pc}

080056f4 <__assert_func>:
 80056f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056f6:	4614      	mov	r4, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <__assert_func+0x2c>)
 80056fc:	4605      	mov	r5, r0
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68d8      	ldr	r0, [r3, #12]
 8005702:	b14c      	cbz	r4, 8005718 <__assert_func+0x24>
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <__assert_func+0x30>)
 8005706:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800570a:	9100      	str	r1, [sp, #0]
 800570c:	462b      	mov	r3, r5
 800570e:	4906      	ldr	r1, [pc, #24]	; (8005728 <__assert_func+0x34>)
 8005710:	f000 f870 	bl	80057f4 <fiprintf>
 8005714:	f000 f880 	bl	8005818 <abort>
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <__assert_func+0x38>)
 800571a:	461c      	mov	r4, r3
 800571c:	e7f3      	b.n	8005706 <__assert_func+0x12>
 800571e:	bf00      	nop
 8005720:	2000006c 	.word	0x2000006c
 8005724:	0800602f 	.word	0x0800602f
 8005728:	0800603c 	.word	0x0800603c
 800572c:	0800606a 	.word	0x0800606a

08005730 <_calloc_r>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	fba1 5402 	umull	r5, r4, r1, r2
 8005736:	b934      	cbnz	r4, 8005746 <_calloc_r+0x16>
 8005738:	4629      	mov	r1, r5
 800573a:	f7ff f99d 	bl	8004a78 <_malloc_r>
 800573e:	4606      	mov	r6, r0
 8005740:	b928      	cbnz	r0, 800574e <_calloc_r+0x1e>
 8005742:	4630      	mov	r0, r6
 8005744:	bd70      	pop	{r4, r5, r6, pc}
 8005746:	220c      	movs	r2, #12
 8005748:	2600      	movs	r6, #0
 800574a:	6002      	str	r2, [r0, #0]
 800574c:	e7f9      	b.n	8005742 <_calloc_r+0x12>
 800574e:	462a      	mov	r2, r5
 8005750:	4621      	mov	r1, r4
 8005752:	f7fe fa26 	bl	8003ba2 <memset>
 8005756:	e7f4      	b.n	8005742 <_calloc_r+0x12>

08005758 <__ascii_mbtowc>:
 8005758:	b082      	sub	sp, #8
 800575a:	b901      	cbnz	r1, 800575e <__ascii_mbtowc+0x6>
 800575c:	a901      	add	r1, sp, #4
 800575e:	b142      	cbz	r2, 8005772 <__ascii_mbtowc+0x1a>
 8005760:	b14b      	cbz	r3, 8005776 <__ascii_mbtowc+0x1e>
 8005762:	7813      	ldrb	r3, [r2, #0]
 8005764:	600b      	str	r3, [r1, #0]
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	1e10      	subs	r0, r2, #0
 800576a:	bf18      	it	ne
 800576c:	2001      	movne	r0, #1
 800576e:	b002      	add	sp, #8
 8005770:	4770      	bx	lr
 8005772:	4610      	mov	r0, r2
 8005774:	e7fb      	b.n	800576e <__ascii_mbtowc+0x16>
 8005776:	f06f 0001 	mvn.w	r0, #1
 800577a:	e7f8      	b.n	800576e <__ascii_mbtowc+0x16>

0800577c <_realloc_r>:
 800577c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005780:	4680      	mov	r8, r0
 8005782:	4614      	mov	r4, r2
 8005784:	460e      	mov	r6, r1
 8005786:	b921      	cbnz	r1, 8005792 <_realloc_r+0x16>
 8005788:	4611      	mov	r1, r2
 800578a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800578e:	f7ff b973 	b.w	8004a78 <_malloc_r>
 8005792:	b92a      	cbnz	r2, 80057a0 <_realloc_r+0x24>
 8005794:	f7ff f900 	bl	8004998 <_free_r>
 8005798:	4625      	mov	r5, r4
 800579a:	4628      	mov	r0, r5
 800579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a0:	f000 f841 	bl	8005826 <_malloc_usable_size_r>
 80057a4:	4284      	cmp	r4, r0
 80057a6:	4607      	mov	r7, r0
 80057a8:	d802      	bhi.n	80057b0 <_realloc_r+0x34>
 80057aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057ae:	d812      	bhi.n	80057d6 <_realloc_r+0x5a>
 80057b0:	4621      	mov	r1, r4
 80057b2:	4640      	mov	r0, r8
 80057b4:	f7ff f960 	bl	8004a78 <_malloc_r>
 80057b8:	4605      	mov	r5, r0
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0ed      	beq.n	800579a <_realloc_r+0x1e>
 80057be:	42bc      	cmp	r4, r7
 80057c0:	4622      	mov	r2, r4
 80057c2:	4631      	mov	r1, r6
 80057c4:	bf28      	it	cs
 80057c6:	463a      	movcs	r2, r7
 80057c8:	f7ff ff86 	bl	80056d8 <memcpy>
 80057cc:	4631      	mov	r1, r6
 80057ce:	4640      	mov	r0, r8
 80057d0:	f7ff f8e2 	bl	8004998 <_free_r>
 80057d4:	e7e1      	b.n	800579a <_realloc_r+0x1e>
 80057d6:	4635      	mov	r5, r6
 80057d8:	e7df      	b.n	800579a <_realloc_r+0x1e>

080057da <__ascii_wctomb>:
 80057da:	4603      	mov	r3, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	b141      	cbz	r1, 80057f2 <__ascii_wctomb+0x18>
 80057e0:	2aff      	cmp	r2, #255	; 0xff
 80057e2:	d904      	bls.n	80057ee <__ascii_wctomb+0x14>
 80057e4:	228a      	movs	r2, #138	; 0x8a
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	4770      	bx	lr
 80057ee:	2001      	movs	r0, #1
 80057f0:	700a      	strb	r2, [r1, #0]
 80057f2:	4770      	bx	lr

080057f4 <fiprintf>:
 80057f4:	b40e      	push	{r1, r2, r3}
 80057f6:	b503      	push	{r0, r1, lr}
 80057f8:	4601      	mov	r1, r0
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	4805      	ldr	r0, [pc, #20]	; (8005814 <fiprintf+0x20>)
 80057fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005802:	6800      	ldr	r0, [r0, #0]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	f000 f83d 	bl	8005884 <_vfiprintf_r>
 800580a:	b002      	add	sp, #8
 800580c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005810:	b003      	add	sp, #12
 8005812:	4770      	bx	lr
 8005814:	2000006c 	.word	0x2000006c

08005818 <abort>:
 8005818:	2006      	movs	r0, #6
 800581a:	b508      	push	{r3, lr}
 800581c:	f000 fa0a 	bl	8005c34 <raise>
 8005820:	2001      	movs	r0, #1
 8005822:	f7fb fc16 	bl	8001052 <_exit>

08005826 <_malloc_usable_size_r>:
 8005826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582a:	1f18      	subs	r0, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfbc      	itt	lt
 8005830:	580b      	ldrlt	r3, [r1, r0]
 8005832:	18c0      	addlt	r0, r0, r3
 8005834:	4770      	bx	lr

08005836 <__sfputc_r>:
 8005836:	6893      	ldr	r3, [r2, #8]
 8005838:	b410      	push	{r4}
 800583a:	3b01      	subs	r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	6093      	str	r3, [r2, #8]
 8005840:	da07      	bge.n	8005852 <__sfputc_r+0x1c>
 8005842:	6994      	ldr	r4, [r2, #24]
 8005844:	42a3      	cmp	r3, r4
 8005846:	db01      	blt.n	800584c <__sfputc_r+0x16>
 8005848:	290a      	cmp	r1, #10
 800584a:	d102      	bne.n	8005852 <__sfputc_r+0x1c>
 800584c:	bc10      	pop	{r4}
 800584e:	f000 b933 	b.w	8005ab8 <__swbuf_r>
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	1c58      	adds	r0, r3, #1
 8005856:	6010      	str	r0, [r2, #0]
 8005858:	7019      	strb	r1, [r3, #0]
 800585a:	4608      	mov	r0, r1
 800585c:	bc10      	pop	{r4}
 800585e:	4770      	bx	lr

08005860 <__sfputs_r>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	4614      	mov	r4, r2
 8005868:	18d5      	adds	r5, r2, r3
 800586a:	42ac      	cmp	r4, r5
 800586c:	d101      	bne.n	8005872 <__sfputs_r+0x12>
 800586e:	2000      	movs	r0, #0
 8005870:	e007      	b.n	8005882 <__sfputs_r+0x22>
 8005872:	463a      	mov	r2, r7
 8005874:	4630      	mov	r0, r6
 8005876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587a:	f7ff ffdc 	bl	8005836 <__sfputc_r>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d1f3      	bne.n	800586a <__sfputs_r+0xa>
 8005882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005884 <_vfiprintf_r>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	460d      	mov	r5, r1
 800588a:	4614      	mov	r4, r2
 800588c:	4698      	mov	r8, r3
 800588e:	4606      	mov	r6, r0
 8005890:	b09d      	sub	sp, #116	; 0x74
 8005892:	b118      	cbz	r0, 800589c <_vfiprintf_r+0x18>
 8005894:	6a03      	ldr	r3, [r0, #32]
 8005896:	b90b      	cbnz	r3, 800589c <_vfiprintf_r+0x18>
 8005898:	f7fe f8ea 	bl	8003a70 <__sinit>
 800589c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589e:	07d9      	lsls	r1, r3, #31
 80058a0:	d405      	bmi.n	80058ae <_vfiprintf_r+0x2a>
 80058a2:	89ab      	ldrh	r3, [r5, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_vfiprintf_r+0x2a>
 80058a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058aa:	f7fe f9f8 	bl	8003c9e <__retarget_lock_acquire_recursive>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	d501      	bpl.n	80058b8 <_vfiprintf_r+0x34>
 80058b4:	692b      	ldr	r3, [r5, #16]
 80058b6:	b99b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x5c>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 f93a 	bl	8005b34 <__swsetup_r>
 80058c0:	b170      	cbz	r0, 80058e0 <_vfiprintf_r+0x5c>
 80058c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058c4:	07dc      	lsls	r4, r3, #31
 80058c6:	d504      	bpl.n	80058d2 <_vfiprintf_r+0x4e>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b01d      	add	sp, #116	; 0x74
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	0598      	lsls	r0, r3, #22
 80058d6:	d4f7      	bmi.n	80058c8 <_vfiprintf_r+0x44>
 80058d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058da:	f7fe f9e1 	bl	8003ca0 <__retarget_lock_release_recursive>
 80058de:	e7f3      	b.n	80058c8 <_vfiprintf_r+0x44>
 80058e0:	2300      	movs	r3, #0
 80058e2:	9309      	str	r3, [sp, #36]	; 0x24
 80058e4:	2320      	movs	r3, #32
 80058e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ea:	2330      	movs	r3, #48	; 0x30
 80058ec:	f04f 0901 	mov.w	r9, #1
 80058f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005aa4 <_vfiprintf_r+0x220>
 80058f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fc:	4623      	mov	r3, r4
 80058fe:	469a      	mov	sl, r3
 8005900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005904:	b10a      	cbz	r2, 800590a <_vfiprintf_r+0x86>
 8005906:	2a25      	cmp	r2, #37	; 0x25
 8005908:	d1f9      	bne.n	80058fe <_vfiprintf_r+0x7a>
 800590a:	ebba 0b04 	subs.w	fp, sl, r4
 800590e:	d00b      	beq.n	8005928 <_vfiprintf_r+0xa4>
 8005910:	465b      	mov	r3, fp
 8005912:	4622      	mov	r2, r4
 8005914:	4629      	mov	r1, r5
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ffa2 	bl	8005860 <__sfputs_r>
 800591c:	3001      	adds	r0, #1
 800591e:	f000 80a9 	beq.w	8005a74 <_vfiprintf_r+0x1f0>
 8005922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005924:	445a      	add	r2, fp
 8005926:	9209      	str	r2, [sp, #36]	; 0x24
 8005928:	f89a 3000 	ldrb.w	r3, [sl]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80a1 	beq.w	8005a74 <_vfiprintf_r+0x1f0>
 8005932:	2300      	movs	r3, #0
 8005934:	f04f 32ff 	mov.w	r2, #4294967295
 8005938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800593c:	f10a 0a01 	add.w	sl, sl, #1
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	9307      	str	r3, [sp, #28]
 8005944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005948:	931a      	str	r3, [sp, #104]	; 0x68
 800594a:	4654      	mov	r4, sl
 800594c:	2205      	movs	r2, #5
 800594e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005952:	4854      	ldr	r0, [pc, #336]	; (8005aa4 <_vfiprintf_r+0x220>)
 8005954:	f7fe f9a5 	bl	8003ca2 <memchr>
 8005958:	9a04      	ldr	r2, [sp, #16]
 800595a:	b9d8      	cbnz	r0, 8005994 <_vfiprintf_r+0x110>
 800595c:	06d1      	lsls	r1, r2, #27
 800595e:	bf44      	itt	mi
 8005960:	2320      	movmi	r3, #32
 8005962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005966:	0713      	lsls	r3, r2, #28
 8005968:	bf44      	itt	mi
 800596a:	232b      	movmi	r3, #43	; 0x2b
 800596c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005970:	f89a 3000 	ldrb.w	r3, [sl]
 8005974:	2b2a      	cmp	r3, #42	; 0x2a
 8005976:	d015      	beq.n	80059a4 <_vfiprintf_r+0x120>
 8005978:	4654      	mov	r4, sl
 800597a:	2000      	movs	r0, #0
 800597c:	f04f 0c0a 	mov.w	ip, #10
 8005980:	9a07      	ldr	r2, [sp, #28]
 8005982:	4621      	mov	r1, r4
 8005984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005988:	3b30      	subs	r3, #48	; 0x30
 800598a:	2b09      	cmp	r3, #9
 800598c:	d94d      	bls.n	8005a2a <_vfiprintf_r+0x1a6>
 800598e:	b1b0      	cbz	r0, 80059be <_vfiprintf_r+0x13a>
 8005990:	9207      	str	r2, [sp, #28]
 8005992:	e014      	b.n	80059be <_vfiprintf_r+0x13a>
 8005994:	eba0 0308 	sub.w	r3, r0, r8
 8005998:	fa09 f303 	lsl.w	r3, r9, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	46a2      	mov	sl, r4
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	e7d2      	b.n	800594a <_vfiprintf_r+0xc6>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	1d19      	adds	r1, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfbb      	ittet	lt
 80059b0:	425b      	neglt	r3, r3
 80059b2:	f042 0202 	orrlt.w	r2, r2, #2
 80059b6:	9307      	strge	r3, [sp, #28]
 80059b8:	9307      	strlt	r3, [sp, #28]
 80059ba:	bfb8      	it	lt
 80059bc:	9204      	strlt	r2, [sp, #16]
 80059be:	7823      	ldrb	r3, [r4, #0]
 80059c0:	2b2e      	cmp	r3, #46	; 0x2e
 80059c2:	d10c      	bne.n	80059de <_vfiprintf_r+0x15a>
 80059c4:	7863      	ldrb	r3, [r4, #1]
 80059c6:	2b2a      	cmp	r3, #42	; 0x2a
 80059c8:	d134      	bne.n	8005a34 <_vfiprintf_r+0x1b0>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	3402      	adds	r4, #2
 80059ce:	1d1a      	adds	r2, r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	9203      	str	r2, [sp, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bfb8      	it	lt
 80059d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005aa8 <_vfiprintf_r+0x224>
 80059e2:	2203      	movs	r2, #3
 80059e4:	4650      	mov	r0, sl
 80059e6:	7821      	ldrb	r1, [r4, #0]
 80059e8:	f7fe f95b 	bl	8003ca2 <memchr>
 80059ec:	b138      	cbz	r0, 80059fe <_vfiprintf_r+0x17a>
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	9b04      	ldr	r3, [sp, #16]
 80059f2:	eba0 000a 	sub.w	r0, r0, sl
 80059f6:	4082      	lsls	r2, r0
 80059f8:	4313      	orrs	r3, r2
 80059fa:	3401      	adds	r4, #1
 80059fc:	9304      	str	r3, [sp, #16]
 80059fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a02:	2206      	movs	r2, #6
 8005a04:	4829      	ldr	r0, [pc, #164]	; (8005aac <_vfiprintf_r+0x228>)
 8005a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a0a:	f7fe f94a 	bl	8003ca2 <memchr>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d03f      	beq.n	8005a92 <_vfiprintf_r+0x20e>
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <_vfiprintf_r+0x22c>)
 8005a14:	bb1b      	cbnz	r3, 8005a5e <_vfiprintf_r+0x1da>
 8005a16:	9b03      	ldr	r3, [sp, #12]
 8005a18:	3307      	adds	r3, #7
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	3308      	adds	r3, #8
 8005a20:	9303      	str	r3, [sp, #12]
 8005a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a24:	443b      	add	r3, r7
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	e768      	b.n	80058fc <_vfiprintf_r+0x78>
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a32:	e7a6      	b.n	8005982 <_vfiprintf_r+0xfe>
 8005a34:	2300      	movs	r3, #0
 8005a36:	f04f 0c0a 	mov.w	ip, #10
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	3401      	adds	r4, #1
 8005a3e:	9305      	str	r3, [sp, #20]
 8005a40:	4620      	mov	r0, r4
 8005a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a46:	3a30      	subs	r2, #48	; 0x30
 8005a48:	2a09      	cmp	r2, #9
 8005a4a:	d903      	bls.n	8005a54 <_vfiprintf_r+0x1d0>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0c6      	beq.n	80059de <_vfiprintf_r+0x15a>
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	e7c4      	b.n	80059de <_vfiprintf_r+0x15a>
 8005a54:	4604      	mov	r4, r0
 8005a56:	2301      	movs	r3, #1
 8005a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a5c:	e7f0      	b.n	8005a40 <_vfiprintf_r+0x1bc>
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4630      	mov	r0, r6
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <_vfiprintf_r+0x230>)
 8005a68:	a904      	add	r1, sp, #16
 8005a6a:	f7fd fbb3 	bl	80031d4 <_printf_float>
 8005a6e:	4607      	mov	r7, r0
 8005a70:	1c78      	adds	r0, r7, #1
 8005a72:	d1d6      	bne.n	8005a22 <_vfiprintf_r+0x19e>
 8005a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d405      	bmi.n	8005a86 <_vfiprintf_r+0x202>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	059a      	lsls	r2, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <_vfiprintf_r+0x202>
 8005a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a82:	f7fe f90d 	bl	8003ca0 <__retarget_lock_release_recursive>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	065b      	lsls	r3, r3, #25
 8005a8a:	f53f af1d 	bmi.w	80058c8 <_vfiprintf_r+0x44>
 8005a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a90:	e71c      	b.n	80058cc <_vfiprintf_r+0x48>
 8005a92:	ab03      	add	r3, sp, #12
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	462a      	mov	r2, r5
 8005a98:	4630      	mov	r0, r6
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <_vfiprintf_r+0x230>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	f7fd fe39 	bl	8003714 <_printf_i>
 8005aa2:	e7e4      	b.n	8005a6e <_vfiprintf_r+0x1ea>
 8005aa4:	08006014 	.word	0x08006014
 8005aa8:	0800601a 	.word	0x0800601a
 8005aac:	0800601e 	.word	0x0800601e
 8005ab0:	080031d5 	.word	0x080031d5
 8005ab4:	08005861 	.word	0x08005861

08005ab8 <__swbuf_r>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	460e      	mov	r6, r1
 8005abc:	4614      	mov	r4, r2
 8005abe:	4605      	mov	r5, r0
 8005ac0:	b118      	cbz	r0, 8005aca <__swbuf_r+0x12>
 8005ac2:	6a03      	ldr	r3, [r0, #32]
 8005ac4:	b90b      	cbnz	r3, 8005aca <__swbuf_r+0x12>
 8005ac6:	f7fd ffd3 	bl	8003a70 <__sinit>
 8005aca:	69a3      	ldr	r3, [r4, #24]
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	071a      	lsls	r2, r3, #28
 8005ad2:	d525      	bpl.n	8005b20 <__swbuf_r+0x68>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b31b      	cbz	r3, 8005b20 <__swbuf_r+0x68>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	b2f6      	uxtb	r6, r6
 8005ade:	1a98      	subs	r0, r3, r2
 8005ae0:	6963      	ldr	r3, [r4, #20]
 8005ae2:	4637      	mov	r7, r6
 8005ae4:	4283      	cmp	r3, r0
 8005ae6:	dc04      	bgt.n	8005af2 <__swbuf_r+0x3a>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7ff fda2 	bl	8005634 <_fflush_r>
 8005af0:	b9e0      	cbnz	r0, 8005b2c <__swbuf_r+0x74>
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	6022      	str	r2, [r4, #0]
 8005afe:	701e      	strb	r6, [r3, #0]
 8005b00:	6962      	ldr	r2, [r4, #20]
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d004      	beq.n	8005b12 <__swbuf_r+0x5a>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	07db      	lsls	r3, r3, #31
 8005b0c:	d506      	bpl.n	8005b1c <__swbuf_r+0x64>
 8005b0e:	2e0a      	cmp	r6, #10
 8005b10:	d104      	bne.n	8005b1c <__swbuf_r+0x64>
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f7ff fd8d 	bl	8005634 <_fflush_r>
 8005b1a:	b938      	cbnz	r0, 8005b2c <__swbuf_r+0x74>
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 f806 	bl	8005b34 <__swsetup_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d0d5      	beq.n	8005ad8 <__swbuf_r+0x20>
 8005b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b30:	e7f4      	b.n	8005b1c <__swbuf_r+0x64>
	...

08005b34 <__swsetup_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4b2a      	ldr	r3, [pc, #168]	; (8005be0 <__swsetup_r+0xac>)
 8005b38:	4605      	mov	r5, r0
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	b118      	cbz	r0, 8005b48 <__swsetup_r+0x14>
 8005b40:	6a03      	ldr	r3, [r0, #32]
 8005b42:	b90b      	cbnz	r3, 8005b48 <__swsetup_r+0x14>
 8005b44:	f7fd ff94 	bl	8003a70 <__sinit>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b4e:	0718      	lsls	r0, r3, #28
 8005b50:	d422      	bmi.n	8005b98 <__swsetup_r+0x64>
 8005b52:	06d9      	lsls	r1, r3, #27
 8005b54:	d407      	bmi.n	8005b66 <__swsetup_r+0x32>
 8005b56:	2309      	movs	r3, #9
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	e034      	b.n	8005bd0 <__swsetup_r+0x9c>
 8005b66:	0758      	lsls	r0, r3, #29
 8005b68:	d512      	bpl.n	8005b90 <__swsetup_r+0x5c>
 8005b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b6c:	b141      	cbz	r1, 8005b80 <__swsetup_r+0x4c>
 8005b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b72:	4299      	cmp	r1, r3
 8005b74:	d002      	beq.n	8005b7c <__swsetup_r+0x48>
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7fe ff0e 	bl	8004998 <_free_r>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6363      	str	r3, [r4, #52]	; 0x34
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f043 0308 	orr.w	r3, r3, #8
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	b94b      	cbnz	r3, 8005bb0 <__swsetup_r+0x7c>
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba6:	d003      	beq.n	8005bb0 <__swsetup_r+0x7c>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f883 	bl	8005cb6 <__smakebuf_r>
 8005bb0:	89a0      	ldrh	r0, [r4, #12]
 8005bb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bb6:	f010 0301 	ands.w	r3, r0, #1
 8005bba:	d00a      	beq.n	8005bd2 <__swsetup_r+0x9e>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60a3      	str	r3, [r4, #8]
 8005bc0:	6963      	ldr	r3, [r4, #20]
 8005bc2:	425b      	negs	r3, r3
 8005bc4:	61a3      	str	r3, [r4, #24]
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	b943      	cbnz	r3, 8005bdc <__swsetup_r+0xa8>
 8005bca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bce:	d1c4      	bne.n	8005b5a <__swsetup_r+0x26>
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	0781      	lsls	r1, r0, #30
 8005bd4:	bf58      	it	pl
 8005bd6:	6963      	ldrpl	r3, [r4, #20]
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	e7f4      	b.n	8005bc6 <__swsetup_r+0x92>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e7f7      	b.n	8005bd0 <__swsetup_r+0x9c>
 8005be0:	2000006c 	.word	0x2000006c

08005be4 <_raise_r>:
 8005be4:	291f      	cmp	r1, #31
 8005be6:	b538      	push	{r3, r4, r5, lr}
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	d904      	bls.n	8005bf8 <_raise_r+0x14>
 8005bee:	2316      	movs	r3, #22
 8005bf0:	6003      	str	r3, [r0, #0]
 8005bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005bfa:	b112      	cbz	r2, 8005c02 <_raise_r+0x1e>
 8005bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c00:	b94b      	cbnz	r3, 8005c16 <_raise_r+0x32>
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 f830 	bl	8005c68 <_getpid_r>
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4601      	mov	r1, r0
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c12:	f000 b817 	b.w	8005c44 <_kill_r>
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d00a      	beq.n	8005c30 <_raise_r+0x4c>
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	d103      	bne.n	8005c26 <_raise_r+0x42>
 8005c1e:	2316      	movs	r3, #22
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	2001      	movs	r0, #1
 8005c24:	e7e7      	b.n	8005bf6 <_raise_r+0x12>
 8005c26:	2400      	movs	r4, #0
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c2e:	4798      	blx	r3
 8005c30:	2000      	movs	r0, #0
 8005c32:	e7e0      	b.n	8005bf6 <_raise_r+0x12>

08005c34 <raise>:
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <raise+0xc>)
 8005c36:	4601      	mov	r1, r0
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f7ff bfd3 	b.w	8005be4 <_raise_r>
 8005c3e:	bf00      	nop
 8005c40:	2000006c 	.word	0x2000006c

08005c44 <_kill_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	2300      	movs	r3, #0
 8005c48:	4d06      	ldr	r5, [pc, #24]	; (8005c64 <_kill_r+0x20>)
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	f7fb f9ee 	bl	8001032 <_kill>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d102      	bne.n	8005c60 <_kill_r+0x1c>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	b103      	cbz	r3, 8005c60 <_kill_r+0x1c>
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	bf00      	nop
 8005c64:	20000428 	.word	0x20000428

08005c68 <_getpid_r>:
 8005c68:	f7fb b9dc 	b.w	8001024 <_getpid>

08005c6c <__swhatbuf_r>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	460c      	mov	r4, r1
 8005c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c74:	4615      	mov	r5, r2
 8005c76:	2900      	cmp	r1, #0
 8005c78:	461e      	mov	r6, r3
 8005c7a:	b096      	sub	sp, #88	; 0x58
 8005c7c:	da0c      	bge.n	8005c98 <__swhatbuf_r+0x2c>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	2100      	movs	r1, #0
 8005c82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c86:	bf0c      	ite	eq
 8005c88:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c8c:	2340      	movne	r3, #64	; 0x40
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6031      	str	r1, [r6, #0]
 8005c92:	602b      	str	r3, [r5, #0]
 8005c94:	b016      	add	sp, #88	; 0x58
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	466a      	mov	r2, sp
 8005c9a:	f000 f849 	bl	8005d30 <_fstat_r>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	dbed      	blt.n	8005c7e <__swhatbuf_r+0x12>
 8005ca2:	9901      	ldr	r1, [sp, #4]
 8005ca4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ca8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cac:	4259      	negs	r1, r3
 8005cae:	4159      	adcs	r1, r3
 8005cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb4:	e7eb      	b.n	8005c8e <__swhatbuf_r+0x22>

08005cb6 <__smakebuf_r>:
 8005cb6:	898b      	ldrh	r3, [r1, #12]
 8005cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cba:	079d      	lsls	r5, r3, #30
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	d507      	bpl.n	8005cd2 <__smakebuf_r+0x1c>
 8005cc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	6123      	str	r3, [r4, #16]
 8005cca:	2301      	movs	r3, #1
 8005ccc:	6163      	str	r3, [r4, #20]
 8005cce:	b002      	add	sp, #8
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	466a      	mov	r2, sp
 8005cd4:	ab01      	add	r3, sp, #4
 8005cd6:	f7ff ffc9 	bl	8005c6c <__swhatbuf_r>
 8005cda:	9900      	ldr	r1, [sp, #0]
 8005cdc:	4605      	mov	r5, r0
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7fe feca 	bl	8004a78 <_malloc_r>
 8005ce4:	b948      	cbnz	r0, 8005cfa <__smakebuf_r+0x44>
 8005ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cea:	059a      	lsls	r2, r3, #22
 8005cec:	d4ef      	bmi.n	8005cce <__smakebuf_r+0x18>
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	f043 0302 	orr.w	r3, r3, #2
 8005cf6:	81a3      	strh	r3, [r4, #12]
 8005cf8:	e7e3      	b.n	8005cc2 <__smakebuf_r+0xc>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	6020      	str	r0, [r4, #0]
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	6120      	str	r0, [r4, #16]
 8005d08:	6163      	str	r3, [r4, #20]
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	b15b      	cbz	r3, 8005d26 <__smakebuf_r+0x70>
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d14:	f000 f81e 	bl	8005d54 <_isatty_r>
 8005d18:	b128      	cbz	r0, 8005d26 <__smakebuf_r+0x70>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f023 0303 	bic.w	r3, r3, #3
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	431d      	orrs	r5, r3
 8005d2a:	81a5      	strh	r5, [r4, #12]
 8005d2c:	e7cf      	b.n	8005cce <__smakebuf_r+0x18>
	...

08005d30 <_fstat_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	2300      	movs	r3, #0
 8005d34:	4d06      	ldr	r5, [pc, #24]	; (8005d50 <_fstat_r+0x20>)
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	f7fb f9d6 	bl	80010ee <_fstat>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d102      	bne.n	8005d4c <_fstat_r+0x1c>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	b103      	cbz	r3, 8005d4c <_fstat_r+0x1c>
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000428 	.word	0x20000428

08005d54 <_isatty_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	2300      	movs	r3, #0
 8005d58:	4d05      	ldr	r5, [pc, #20]	; (8005d70 <_isatty_r+0x1c>)
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f7fb f9d4 	bl	800110c <_isatty>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_isatty_r+0x1a>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_isatty_r+0x1a>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20000428 	.word	0x20000428

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
