
CAN_actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003048  08003048  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003048  08003048  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  080030b4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080030b4  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000858e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173d  00000000  00000000  0002865e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a9  00000000  00000000  0002a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017153  00000000  00000000  0002aab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000975a  00000000  00000000  00041c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084933  00000000  00000000  0004b366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022b4  00000000  00000000  000cfc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d1f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f88 	.word	0x08002f88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002f88 	.word	0x08002f88

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 8000154:	4b09      	ldr	r3, [pc, #36]	; (800017c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000156:	4a0a      	ldr	r2, [pc, #40]	; (8000180 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 fe6f 	bl	8000e3e <HAL_CAN_GetRxMessage>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d002      	beq.n	800016c <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
	{
		Error_Handler();
 8000166:	f000 f989 	bl	800047c <Error_Handler>
	{

		data_catch = 1;
		//count++;
	}
}
 800016a:	e002      	b.n	8000172 <HAL_CAN_RxFifo1MsgPendingCallback+0x26>
		data_catch = 1;
 800016c:	4b05      	ldr	r3, [pc, #20]	; (8000184 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800016e:	2201      	movs	r2, #1
 8000170:	701a      	strb	r2, [r3, #0]
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000128 	.word	0x20000128
 8000180:	20000108 	.word	0x20000108
 8000184:	2000016a 	.word	0x2000016a

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b08c      	sub	sp, #48	; 0x30
 800018c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 faf9 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f881 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000196:	f000 f927 	bl	80003e8 <MX_GPIO_Init>
  MX_CAN_Init();
 800019a:	f000 f8c3 	bl	8000324 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800019e:	f000 f8f9 	bl	8000394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan);
 80001a2:	4833      	ldr	r0, [pc, #204]	; (8000270 <main+0xe8>)
 80001a4:	f000 f9ba 	bl	800051c <HAL_CAN_MspInit>

  HAL_CAN_Init(&hcan);
 80001a8:	4831      	ldr	r0, [pc, #196]	; (8000270 <main+0xe8>)
 80001aa:	f000 fb71 	bl	8000890 <HAL_CAN_Init>

  //Send notify signal to recieve message from actuator node
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80001ae:	2110      	movs	r1, #16
 80001b0:	482f      	ldr	r0, [pc, #188]	; (8000270 <main+0xe8>)
 80001b2:	f000 ff65 	bl	8001080 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 1;  // anything between 0 to SlaveStartFilterBank
 80001ba:	2301      	movs	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80001be:	2301      	movs	r3, #1
 80001c0:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x555 << 5;
 80001c2:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
 80001c6:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x555 << 5;
 80001cc:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
 80001d0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001da:	2301      	movs	r3, #1
 80001dc:	61fb      	str	r3, [r7, #28]
  //canfilterconfig.SlaveStartFilterBank = 14;

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80001de:	463b      	mov	r3, r7
 80001e0:	4619      	mov	r1, r3
 80001e2:	4823      	ldr	r0, [pc, #140]	; (8000270 <main+0xe8>)
 80001e4:	f000 fc4f 	bl	8000a86 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80001e8:	4821      	ldr	r0, [pc, #132]	; (8000270 <main+0xe8>)
 80001ea:	f000 fd15 	bl	8000c18 <HAL_CAN_Start>

  //Config CAN Tx header
  TxHeader.DLC = 8;
 80001ee:	4b21      	ldr	r3, [pc, #132]	; (8000274 <main+0xec>)
 80001f0:	2208      	movs	r2, #8
 80001f2:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80001f4:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <main+0xec>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80001fa:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <main+0xec>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000200:	4b1c      	ldr	r3, [pc, #112]	; (8000274 <main+0xec>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x2AA;
 8000206:	4b1b      	ldr	r3, [pc, #108]	; (8000274 <main+0xec>)
 8000208:	f240 22aa 	movw	r2, #682	; 0x2aa
 800020c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800020e:	4b19      	ldr	r3, [pc, #100]	; (8000274 <main+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f000 fb16 	bl	8000848 <HAL_Delay>

	  if(data_catch==1)
 800021c:	4b16      	ldr	r3, [pc, #88]	; (8000278 <main+0xf0>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d1f7      	bne.n	8000214 <main+0x8c>
	  {
		  //print oled debugger
		  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000224:	223a      	movs	r2, #58	; 0x3a
 8000226:	2100      	movs	r1, #0
 8000228:	4814      	ldr	r0, [pc, #80]	; (800027c <main+0xf4>)
 800022a:	f002 fa1b 	bl	8002664 <memset>
		  sprintf((char*)Tx_Buffer,"\nACTUATOR NODE\nTxID:%lu\nTx:%s\nRxID:%lu\nRx:%s",TxHeader.StdId,TxData,RxHeader.StdId,RxData);
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <main+0xec>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <main+0xf8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4913      	ldr	r1, [pc, #76]	; (8000284 <main+0xfc>)
 8000238:	9101      	str	r1, [sp, #4]
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0x100>)
 800023e:	4913      	ldr	r1, [pc, #76]	; (800028c <main+0x104>)
 8000240:	480e      	ldr	r0, [pc, #56]	; (800027c <main+0xf4>)
 8000242:	f002 f9ef 	bl	8002624 <siprintf>
		  HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000246:	230a      	movs	r3, #10
 8000248:	223a      	movs	r2, #58	; 0x3a
 800024a:	490c      	ldr	r1, [pc, #48]	; (800027c <main+0xf4>)
 800024c:	4810      	ldr	r0, [pc, #64]	; (8000290 <main+0x108>)
 800024e:	f002 f869 	bl	8002324 <HAL_UART_Transmit>

		  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <main+0x10c>)
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <main+0x100>)
 8000256:	4907      	ldr	r1, [pc, #28]	; (8000274 <main+0xec>)
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <main+0xe8>)
 800025a:	f000 fd21 	bl	8000ca0 <HAL_CAN_AddTxMessage>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <main+0xe0>
		  {
			  Error_Handler();
 8000264:	f000 f90a 	bl	800047c <Error_Handler>
		  } else //Transmit oke
		  {
		 		  //do nothing
		  }
		  data_catch = 0;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <main+0xf0>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800026e:	e7d1      	b.n	8000214 <main+0x8c>
 8000270:	20000080 	.word	0x20000080
 8000274:	200000f0 	.word	0x200000f0
 8000278:	2000016a 	.word	0x2000016a
 800027c:	20000130 	.word	0x20000130
 8000280:	20000108 	.word	0x20000108
 8000284:	20000128 	.word	0x20000128
 8000288:	20000000 	.word	0x20000000
 800028c:	08002fa0 	.word	0x08002fa0
 8000290:	200000a8 	.word	0x200000a8
 8000294:	20000124 	.word	0x20000124

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	; 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 f9dc 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fbbf 	bl	8001a64 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ec:	f000 f8c6 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2302      	movs	r3, #2
 80002f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2102      	movs	r1, #2
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fe2c 	bl	8001f68 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000316:	f000 f8b1 	bl	800047c <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	; 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_CAN_Init+0x68>)
 800032a:	4a19      	ldr	r2, [pc, #100]	; (8000390 <MX_CAN_Init+0x6c>)
 800032c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <MX_CAN_Init+0x68>)
 8000330:	2204      	movs	r2, #4
 8000332:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_CAN_Init+0x68>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_CAN_Init+0x68>)
 800033c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000340:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_CAN_Init+0x68>)
 8000344:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000348:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_CAN_Init+0x68>)
 800034c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000350:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_CAN_Init+0x68>)
 8000354:	2200      	movs	r2, #0
 8000356:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_CAN_Init+0x68>)
 800035a:	2200      	movs	r2, #0
 800035c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_CAN_Init+0x68>)
 8000360:	2200      	movs	r2, #0
 8000362:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_CAN_Init+0x68>)
 8000366:	2201      	movs	r2, #1
 8000368:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_CAN_Init+0x68>)
 800036c:	2200      	movs	r2, #0
 800036e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_CAN_Init+0x68>)
 8000372:	2200      	movs	r2, #0
 8000374:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_CAN_Init+0x68>)
 8000378:	f000 fa8a 	bl	8000890 <HAL_CAN_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000382:	f000 f87b 	bl	800047c <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000080 	.word	0x20000080
 8000390:	40006400 	.word	0x40006400

08000394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 800039a:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <MX_USART1_UART_Init+0x50>)
 800039c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003cc:	f001 ff5a 	bl	8002284 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003d6:	f000 f851 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000a8 	.word	0x200000a8
 80003e4:	40013800 	.word	0x40013800

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_GPIO_Init+0x8c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_GPIO_Init+0x8c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <MX_GPIO_Init+0x8c>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_GPIO_Init+0x8c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a10      	ldr	r2, [pc, #64]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_GPIO_Init+0x8c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2108      	movs	r1, #8
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <MX_GPIO_Init+0x90>)
 800044a:	f001 faf3 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044e:	2308      	movs	r3, #8
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045a:	2303      	movs	r3, #3
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_GPIO_Init+0x90>)
 8000466:	f001 f961 	bl	800172c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046a:	bf00      	nop
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40010c00 	.word	0x40010c00

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000484:	223a      	movs	r2, #58	; 0x3a
 8000486:	2100      	movs	r1, #0
 8000488:	4808      	ldr	r0, [pc, #32]	; (80004ac <Error_Handler+0x30>)
 800048a:	f002 f8eb 	bl	8002664 <memset>
	  sprintf((char*)Tx_Buffer,"CAN sensor node ERROR\n");
 800048e:	4908      	ldr	r1, [pc, #32]	; (80004b0 <Error_Handler+0x34>)
 8000490:	4806      	ldr	r0, [pc, #24]	; (80004ac <Error_Handler+0x30>)
 8000492:	f002 f8c7 	bl	8002624 <siprintf>
	  HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000496:	230a      	movs	r3, #10
 8000498:	223a      	movs	r2, #58	; 0x3a
 800049a:	4904      	ldr	r1, [pc, #16]	; (80004ac <Error_Handler+0x30>)
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <Error_Handler+0x38>)
 800049e:	f001 ff41 	bl	8002324 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80004a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a6:	f000 f9cf 	bl	8000848 <HAL_Delay>
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 80004aa:	e7eb      	b.n	8000484 <Error_Handler+0x8>
 80004ac:	20000130 	.word	0x20000130
 80004b0:	08002fd0 	.word	0x08002fd0
 80004b4:	200000a8 	.word	0x200000a8

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <HAL_CAN_MspInit+0x9c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d139      	bne.n	80005b0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <HAL_CAN_MspInit+0xa0>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <HAL_CAN_MspInit+0xa0>)
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000546:	61d3      	str	r3, [r2, #28]
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <HAL_CAN_MspInit+0xa0>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <HAL_CAN_MspInit+0xa0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a18      	ldr	r2, [pc, #96]	; (80005bc <HAL_CAN_MspInit+0xa0>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <HAL_CAN_MspInit+0xa0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800056c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	4619      	mov	r1, r3
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <HAL_CAN_MspInit+0xa4>)
 8000582:	f001 f8d3 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	2303      	movs	r3, #3
 8000592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <HAL_CAN_MspInit+0xa4>)
 800059c:	f001 f8c6 	bl	800172c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2100      	movs	r1, #0
 80005a4:	2015      	movs	r0, #21
 80005a6:	f001 f88a 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005aa:	2015      	movs	r0, #21
 80005ac:	f001 f8a3 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40006400 	.word	0x40006400
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010800 	.word	0x40010800

080005c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <HAL_UART_MspInit+0x8c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d131      	bne.n	8000648 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_UART_MspInit+0x90>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <HAL_UART_MspInit+0x94>)
 800062a:	f001 f87f 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_UART_MspInit+0x94>)
 8000644:	f001 f872 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40013800 	.word	0x40013800
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <NMI_Handler+0x4>

08000662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <MemManage_Handler+0x4>

0800066e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler+0x4>

0800067a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a2:	f000 f8b5 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <CAN1_RX1_IRQHandler+0x10>)
 80006b2:	f000 fd0a 	bl	80010ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000080 	.word	0x20000080

080006c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c8:	4a14      	ldr	r2, [pc, #80]	; (800071c <_sbrk+0x5c>)
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_sbrk+0x60>)
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <_sbrk+0x64>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <_sbrk+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d207      	bcs.n	8000700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f0:	f001 ffc0 	bl	8002674 <__errno>
 80006f4:	4603      	mov	r3, r0
 80006f6:	220c      	movs	r2, #12
 80006f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	e009      	b.n	8000714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <_sbrk+0x64>)
 8000710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20005000 	.word	0x20005000
 8000720:	00000400 	.word	0x00000400
 8000724:	2000016c 	.word	0x2000016c
 8000728:	200002c0 	.word	0x200002c0

0800072c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000738:	f7ff fff8 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800073e:	490c      	ldr	r1, [pc, #48]	; (8000770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000754:	4c09      	ldr	r4, [pc, #36]	; (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f001 ff8d 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd0f 	bl	8000188 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000774:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 8000778:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800077c:	200002bc 	.word	0x200002bc

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 ff87 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fe8a 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 ff9f 	bl	8001712 <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 ff67 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000008 	.word	0x20000008
 8000808:	20000010 	.word	0x20000010
 800080c:	2000000c 	.word	0x2000000c

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000010 	.word	0x20000010
 8000830:	20000170 	.word	0x20000170

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000170 	.word	0x20000170

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff fff0 	bl	8000834 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffe0 	bl	8000834 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000010 	.word	0x20000010

08000890 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e0ed      	b.n	8000a7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fe34 	bl	800051c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f042 0201 	orr.w	r2, r2, #1
 80008c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008c4:	f7ff ffb6 	bl	8000834 <HAL_GetTick>
 80008c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ca:	e012      	b.n	80008f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008cc:	f7ff ffb2 	bl	8000834 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d90b      	bls.n	80008f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2205      	movs	r2, #5
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e0c5      	b.n	8000a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0e5      	beq.n	80008cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f022 0202 	bic.w	r2, r2, #2
 800090e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000910:	f7ff ff90 	bl	8000834 <HAL_GetTick>
 8000914:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000916:	e012      	b.n	800093e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000918:	f7ff ff8c 	bl	8000834 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d90b      	bls.n	800093e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2205      	movs	r2, #5
 8000936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e09f      	b.n	8000a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1e5      	bne.n	8000918 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7e1b      	ldrb	r3, [r3, #24]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d108      	bne.n	8000966 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	e007      	b.n	8000976 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7e5b      	ldrb	r3, [r3, #25]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d108      	bne.n	8000990 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e007      	b.n	80009a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800099e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7e9b      	ldrb	r3, [r3, #26]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d108      	bne.n	80009ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0220 	orr.w	r2, r2, #32
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e007      	b.n	80009ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0220 	bic.w	r2, r2, #32
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7edb      	ldrb	r3, [r3, #27]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d108      	bne.n	80009e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0210 	bic.w	r2, r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e007      	b.n	80009f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0210 	orr.w	r2, r2, #16
 80009f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7f1b      	ldrb	r3, [r3, #28]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0208 	orr.w	r2, r2, #8
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e007      	b.n	8000a1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0208 	bic.w	r2, r2, #8
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7f5b      	ldrb	r3, [r3, #29]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d108      	bne.n	8000a38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0204 	orr.w	r2, r2, #4
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e007      	b.n	8000a48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	ea42 0103 	orr.w	r1, r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	1e5a      	subs	r2, r3, #1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b087      	sub	sp, #28
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a9e:	7cfb      	ldrb	r3, [r7, #19]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d003      	beq.n	8000aac <HAL_CAN_ConfigFilter+0x26>
 8000aa4:	7cfb      	ldrb	r3, [r7, #19]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	f040 80aa 	bne.w	8000c00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ab2:	f043 0201 	orr.w	r2, r3, #1
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d123      	bne.n	8000b2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	401a      	ands	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3248      	adds	r2, #72	; 0x48
 8000b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b24:	6979      	ldr	r1, [r7, #20]
 8000b26:	3348      	adds	r3, #72	; 0x48
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d122      	bne.n	8000b7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3248      	adds	r2, #72	; 0x48
 8000b5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b72:	6979      	ldr	r1, [r7, #20]
 8000b74:	3348      	adds	r3, #72	; 0x48
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	440b      	add	r3, r1
 8000b7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b96:	e007      	b.n	8000ba8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d107      	bne.n	8000bec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bf2:	f023 0201 	bic.w	r2, r3, #1
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e006      	b.n	8000c0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
  }
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d12e      	bne.n	8000c8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c44:	f7ff fdf6 	bl	8000834 <HAL_GetTick>
 8000c48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c4a:	e012      	b.n	8000c72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c4c:	f7ff fdf2 	bl	8000834 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b0a      	cmp	r3, #10
 8000c58:	d90b      	bls.n	8000c72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2205      	movs	r2, #5
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e012      	b.n	8000c98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1e5      	bne.n	8000c4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e006      	b.n	8000c98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
  }
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cbe:	7ffb      	ldrb	r3, [r7, #31]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d003      	beq.n	8000ccc <HAL_CAN_AddTxMessage+0x2c>
 8000cc4:	7ffb      	ldrb	r3, [r7, #31]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	f040 80ad 	bne.w	8000e26 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10a      	bne.n	8000cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 8095 	beq.w	8000e16 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	0e1b      	lsrs	r3, r3, #24
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10d      	bne.n	8000d24 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	6809      	ldr	r1, [r1, #0]
 8000d16:	431a      	orrs	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3318      	adds	r3, #24
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	440b      	add	r3, r1
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e00f      	b.n	8000d44 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d2e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d34:	68f9      	ldr	r1, [r7, #12]
 8000d36:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d38:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3318      	adds	r3, #24
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	440b      	add	r3, r1
 8000d42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6819      	ldr	r1, [r3, #0]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3318      	adds	r3, #24
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	440b      	add	r3, r1
 8000d54:	3304      	adds	r3, #4
 8000d56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	7d1b      	ldrb	r3, [r3, #20]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d111      	bne.n	8000d84 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3318      	adds	r3, #24
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	6811      	ldr	r1, [r2, #0]
 8000d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	440b      	add	r3, r1
 8000d80:	3304      	adds	r3, #4
 8000d82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3307      	adds	r3, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	061a      	lsls	r2, r3, #24
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3306      	adds	r3, #6
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	041b      	lsls	r3, r3, #16
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3305      	adds	r3, #5
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	3204      	adds	r2, #4
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	4610      	mov	r0, r2
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	6811      	ldr	r1, [r2, #0]
 8000dac:	ea43 0200 	orr.w	r2, r3, r0
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000dba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3303      	adds	r3, #3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	061a      	lsls	r2, r3, #24
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	4610      	mov	r0, r2
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	6811      	ldr	r1, [r2, #0]
 8000de2:	ea43 0200 	orr.w	r2, r3, r0
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	440b      	add	r3, r1
 8000dec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000df0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	6811      	ldr	r1, [r2, #0]
 8000e04:	f043 0201 	orr.w	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	440b      	add	r3, r1
 8000e10:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e00e      	b.n	8000e34 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e006      	b.n	8000e34 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
  }
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3724      	adds	r7, #36	; 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b087      	sub	sp, #28
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e52:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d003      	beq.n	8000e62 <HAL_CAN_GetRxMessage+0x24>
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	f040 8103 	bne.w	8001068 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10e      	bne.n	8000e86 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0f7      	b.n	8001076 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d107      	bne.n	8000ea4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0e8      	b.n	8001076 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	331b      	adds	r3, #27
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0204 	and.w	r2, r3, #4
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10c      	bne.n	8000edc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	331b      	adds	r3, #27
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0d5b      	lsrs	r3, r3, #21
 8000ed2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e00b      	b.n	8000ef4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	331b      	adds	r3, #27
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	4413      	add	r3, r2
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	331b      	adds	r3, #27
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	4413      	add	r3, r2
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0202 	and.w	r2, r3, #2
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	331b      	adds	r3, #27
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	4413      	add	r3, r2
 8000f16:	3304      	adds	r3, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2208      	movs	r2, #8
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	e00b      	b.n	8000f42 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	331b      	adds	r3, #27
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 020f 	and.w	r2, r3, #15
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	331b      	adds	r3, #27
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	331b      	adds	r3, #27
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4413      	add	r3, r2
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	0a1a      	lsrs	r2, r3, #8
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	4413      	add	r3, r2
 8000fac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0c1a      	lsrs	r2, r3, #16
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0e1a      	lsrs	r2, r3, #24
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0a1a      	lsrs	r2, r3, #8
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3305      	adds	r3, #5
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0c1a      	lsrs	r2, r3, #16
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3306      	adds	r3, #6
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4413      	add	r3, r2
 800102c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0e1a      	lsrs	r2, r3, #24
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3307      	adds	r3, #7
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d108      	bne.n	8001054 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	e007      	b.n	8001064 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	e006      	b.n	8001076 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
  }
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d002      	beq.n	800109e <HAL_CAN_ActivateNotification+0x1e>
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d109      	bne.n	80010b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6959      	ldr	r1, [r3, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e006      	b.n	80010c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b08a      	sub	sp, #40	; 0x28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d07c      	beq.n	800120a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d023      	beq.n	8001162 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2201      	movs	r2, #1
 8001120:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f983 	bl	8001438 <HAL_CAN_TxMailbox0CompleteCallback>
 8001132:	e016      	b.n	8001162 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e00c      	b.n	8001162 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	e002      	b.n	8001162 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f986 	bl	800146e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d024      	beq.n	80011b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001174:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f962 	bl	800144a <HAL_CAN_TxMailbox1CompleteCallback>
 8001186:	e016      	b.n	80011b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
 800119a:	e00c      	b.n	80011b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
 80011ae:	e002      	b.n	80011b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f965 	bl	8001480 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d024      	beq.n	800120a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f941 	bl	800145c <HAL_CAN_TxMailbox2CompleteCallback>
 80011da:	e016      	b.n	800120a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e00c      	b.n	800120a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	e002      	b.n	800120a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f944 	bl	8001492 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00c      	beq.n	800122e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2210      	movs	r2, #16
 800122c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00b      	beq.n	8001250 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2208      	movs	r2, #8
 8001248:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f933 	bl	80014b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f91b 	bl	80014a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2208      	movs	r2, #8
 80012ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f90a 	bl	80014c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7fe ff3d 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2210      	movs	r2, #16
 80012ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f8f3 	bl	80014da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2208      	movs	r2, #8
 800130e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f8eb 	bl	80014ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d07b      	beq.n	8001418 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d072      	beq.n	8001410 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001384:	2b00      	cmp	r3, #0
 8001386:	d043      	beq.n	8001410 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03e      	beq.n	8001410 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001398:	2b60      	cmp	r3, #96	; 0x60
 800139a:	d02b      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x32a>
 800139c:	2b60      	cmp	r3, #96	; 0x60
 800139e:	d82e      	bhi.n	80013fe <HAL_CAN_IRQHandler+0x334>
 80013a0:	2b50      	cmp	r3, #80	; 0x50
 80013a2:	d022      	beq.n	80013ea <HAL_CAN_IRQHandler+0x320>
 80013a4:	2b50      	cmp	r3, #80	; 0x50
 80013a6:	d82a      	bhi.n	80013fe <HAL_CAN_IRQHandler+0x334>
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d019      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x316>
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d826      	bhi.n	80013fe <HAL_CAN_IRQHandler+0x334>
 80013b0:	2b30      	cmp	r3, #48	; 0x30
 80013b2:	d010      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x30c>
 80013b4:	2b30      	cmp	r3, #48	; 0x30
 80013b6:	d822      	bhi.n	80013fe <HAL_CAN_IRQHandler+0x334>
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	d002      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x2f8>
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d005      	beq.n	80013cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013c0:	e01d      	b.n	80013fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013ca:	e019      	b.n	8001400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013d4:	e014      	b.n	8001400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013de:	e00f      	b.n	8001400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013e8:	e00a      	b.n	8001400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013f2:	e005      	b.n	8001400 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013fc:	e000      	b.n	8001400 <HAL_CAN_IRQHandler+0x336>
            break;
 80013fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800140e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2204      	movs	r2, #4
 8001416:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f867 	bl	80014fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4906      	ldr	r1, [pc, #24]	; (80015a8 <__NVIC_EnableIRQ+0x34>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff90 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff2d 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff42 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff90 	bl	8001600 <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5f 	bl	80015ac <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff35 	bl	8001574 <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e169      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001740:	2201      	movs	r2, #1
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8158 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a9a      	ldr	r2, [pc, #616]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d05e      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001768:	4a98      	ldr	r2, [pc, #608]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d875      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800176e:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d058      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001774:	4a96      	ldr	r2, [pc, #600]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d86f      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800177a:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d052      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001780:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d869      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001786:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04c      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 800178c:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d863      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001792:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d046      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001798:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d85d      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d82a      	bhi.n	80017f8 <HAL_GPIO_Init+0xcc>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d859      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <HAL_GPIO_Init+0x80>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001801 	.word	0x08001801
 80017b4:	08001813 	.word	0x08001813
 80017b8:	08001855 	.word	0x08001855
 80017bc:	0800185b 	.word	0x0800185b
 80017c0:	0800185b 	.word	0x0800185b
 80017c4:	0800185b 	.word	0x0800185b
 80017c8:	0800185b 	.word	0x0800185b
 80017cc:	0800185b 	.word	0x0800185b
 80017d0:	0800185b 	.word	0x0800185b
 80017d4:	0800185b 	.word	0x0800185b
 80017d8:	0800185b 	.word	0x0800185b
 80017dc:	0800185b 	.word	0x0800185b
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	0800185b 	.word	0x0800185b
 80017ec:	0800185b 	.word	0x0800185b
 80017f0:	08001809 	.word	0x08001809
 80017f4:	0800181d 	.word	0x0800181d
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_GPIO_Init+0x2b4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e02c      	b.n	800185a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e029      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e024      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	3308      	adds	r3, #8
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e01f      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	330c      	adds	r3, #12
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e01a      	b.n	800185c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182e:	2304      	movs	r3, #4
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e013      	b.n	800185c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	611a      	str	r2, [r3, #16]
          break;
 8001846:	e009      	b.n	800185c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	615a      	str	r2, [r3, #20]
          break;
 8001852:	e003      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x130>
          break;
 800185a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d801      	bhi.n	8001866 <HAL_GPIO_Init+0x13a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e001      	b.n	800186a <HAL_GPIO_Init+0x13e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d802      	bhi.n	8001878 <HAL_GPIO_Init+0x14c>
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x152>
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3b08      	subs	r3, #8
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	210f      	movs	r1, #15
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80b1 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1e0>
 8001908:	2303      	movs	r3, #3
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 800190c:	2304      	movs	r3, #4
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001918:	2300      	movs	r3, #0
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192a:	492f      	ldr	r1, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4928      	ldr	r1, [pc, #160]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4918      	ldr	r1, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4914      	ldr	r1, [pc, #80]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x2e2>
 80019ca:	bf00      	nop
 80019cc:	10320000 	.word	0x10320000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10220000 	.word	0x10220000
 80019d8:	10210000 	.word	0x10210000
 80019dc:	10120000 	.word	0x10120000
 80019e0:	10110000 	.word	0x10110000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40011400 	.word	0x40011400
 80019fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae8e 	bne.w	8001740 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	372c      	adds	r7, #44	; 0x2c
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e272      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7fe fe78 	bl	8000834 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7fe fe74 	bl	8000834 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e200      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe fe64 	bl	8000834 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7fe fe60 	bl	8000834 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ec      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fe19 	bl	8000834 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7fe fe15 	bl	8000834 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe fdf8 	bl	8000834 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7fe fdf4 	bl	8000834 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e180      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7fe fdd8 	bl	8000834 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7fe fdd4 	bl	8000834 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e160      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 face 	bl	8002248 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7fe fdbe 	bl	8000834 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7fe fdba 	bl	8000834 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e146      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a87      	ldr	r2, [pc, #540]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fd7b 	bl	8000834 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7fe fd77 	bl	8000834 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e103      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a60      	ldr	r2, [pc, #384]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fd2b 	bl	8000834 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe fd27 	bl	8000834 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0b1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fd15 	bl	8000834 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe fd11 	bl	8000834 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e09b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fce5 	bl	8000834 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fce1 	bl	8000834 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e06d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4921      	ldr	r1, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fcb5 	bl	8000834 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fcb1 	bl	8000834 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e035      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fc9e 	bl	8000834 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fc9a 	bl	8000834 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e019      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x500>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe fbec 	bl	8000834 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe fbe8 	bl	8000834 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb4a 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	08002fe8 	.word	0x08002fe8
 8002134:	20000008 	.word	0x20000008
 8002138:	2000000c 	.word	0x2000000c

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e027      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e027      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0c5b      	lsrs	r3, r3, #17
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e004      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	693b      	ldr	r3, [r7, #16]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	08003000 	.word	0x08003000
 80021dc:	08003010 	.word	0x08003010
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000008 	.word	0x20000008

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021fc:	f7ff fff2 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08002ff8 	.word	0x08002ff8

08002220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002224:	f7ff ffde 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0adb      	lsrs	r3, r3, #11
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08002ff8 	.word	0x08002ff8

08002248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <RCC_Delay+0x34>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <RCC_Delay+0x38>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0a5b      	lsrs	r3, r3, #9
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002264:	bf00      	nop
  }
  while (Delay --);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	60fa      	str	r2, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f9      	bne.n	8002264 <RCC_Delay+0x1c>
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000008 	.word	0x20000008
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e042      	b.n	800231c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe f98a 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f91d 	bl	8002508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b20      	cmp	r3, #32
 8002342:	d16d      	bne.n	8002420 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_UART_Transmit+0x2c>
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e066      	b.n	8002422 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2221      	movs	r2, #33	; 0x21
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002362:	f7fe fa67 	bl	8000834 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237c:	d108      	bne.n	8002390 <HAL_UART_Transmit+0x6c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e003      	b.n	8002398 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002398:	e02a      	b.n	80023f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f840 	bl	800242a <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e036      	b.n	8002422 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3302      	adds	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	e007      	b.n	80023e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3301      	adds	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1cf      	bne.n	800239a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2200      	movs	r2, #0
 8002402:	2140      	movs	r1, #64	; 0x40
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f810 	bl	800242a <UART_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e006      	b.n	8002422 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b090      	sub	sp, #64	; 0x40
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243a:	e050      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d04c      	beq.n	80024de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <UART_WaitOnFlagUntilTimeout+0x30>
 800244a:	f7fe f9f3 	bl	8000834 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002456:	429a      	cmp	r2, r3
 8002458:	d241      	bcs.n	80024de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	330c      	adds	r3, #12
 8002478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247a:	637a      	str	r2, [r7, #52]	; 0x34
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e5      	bne.n	800245a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3314      	adds	r3, #20
 8002494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	e853 3f00 	ldrex	r3, [r3]
 800249c:	613b      	str	r3, [r7, #16]
   return(result);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ae:	623a      	str	r2, [r7, #32]
 80024b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b2:	69f9      	ldr	r1, [r7, #28]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	e841 2300 	strex	r3, r2, [r1]
 80024ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e5      	bne.n	800248e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e00f      	b.n	80024fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4013      	ands	r3, r2
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d09f      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3740      	adds	r7, #64	; 0x40
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002542:	f023 030c 	bic.w	r3, r3, #12
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	430b      	orrs	r3, r1
 800254e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <UART_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d103      	bne.n	8002578 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002570:	f7ff fe56 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	e002      	b.n	800257e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002578:	f7ff fe3e 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 800257c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	4a22      	ldr	r2, [pc, #136]	; (8002620 <UART_SetConfig+0x118>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	0119      	lsls	r1, r3, #4
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009a      	lsls	r2, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <UART_SetConfig+0x118>)
 80025b6:	fba3 0302 	umull	r0, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	fb00 f303 	mul.w	r3, r0, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	3332      	adds	r3, #50	; 0x32
 80025c8:	4a15      	ldr	r2, [pc, #84]	; (8002620 <UART_SetConfig+0x118>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d4:	4419      	add	r1, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	009a      	lsls	r2, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <UART_SetConfig+0x118>)
 80025ee:	fba3 0302 	umull	r0, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2064      	movs	r0, #100	; 0x64
 80025f6:	fb00 f303 	mul.w	r3, r0, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	3332      	adds	r3, #50	; 0x32
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <UART_SetConfig+0x118>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	440a      	add	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013800 	.word	0x40013800
 8002620:	51eb851f 	.word	0x51eb851f

08002624 <siprintf>:
 8002624:	b40e      	push	{r1, r2, r3}
 8002626:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800262a:	b500      	push	{lr}
 800262c:	b09c      	sub	sp, #112	; 0x70
 800262e:	ab1d      	add	r3, sp, #116	; 0x74
 8002630:	9002      	str	r0, [sp, #8]
 8002632:	9006      	str	r0, [sp, #24]
 8002634:	9107      	str	r1, [sp, #28]
 8002636:	9104      	str	r1, [sp, #16]
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <siprintf+0x38>)
 800263a:	4909      	ldr	r1, [pc, #36]	; (8002660 <siprintf+0x3c>)
 800263c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002640:	9105      	str	r1, [sp, #20]
 8002642:	6800      	ldr	r0, [r0, #0]
 8002644:	a902      	add	r1, sp, #8
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	f000 f98e 	bl	8002968 <_svfiprintf_r>
 800264c:	2200      	movs	r2, #0
 800264e:	9b02      	ldr	r3, [sp, #8]
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	b01c      	add	sp, #112	; 0x70
 8002654:	f85d eb04 	ldr.w	lr, [sp], #4
 8002658:	b003      	add	sp, #12
 800265a:	4770      	bx	lr
 800265c:	20000060 	.word	0x20000060
 8002660:	ffff0208 	.word	0xffff0208

08002664 <memset>:
 8002664:	4603      	mov	r3, r0
 8002666:	4402      	add	r2, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <__errno>:
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <__errno+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000060 	.word	0x20000060

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	f000 fc7a 	bl	8002f88 <_init>
 8002694:	2600      	movs	r6, #0
 8002696:	4d0a      	ldr	r5, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	08003048 	.word	0x08003048
 80026bc:	08003048 	.word	0x08003048
 80026c0:	08003048 	.word	0x08003048
 80026c4:	0800304c 	.word	0x0800304c

080026c8 <__retarget_lock_acquire_recursive>:
 80026c8:	4770      	bx	lr

080026ca <__retarget_lock_release_recursive>:
 80026ca:	4770      	bx	lr

080026cc <_free_r>:
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4605      	mov	r5, r0
 80026d0:	2900      	cmp	r1, #0
 80026d2:	d040      	beq.n	8002756 <_free_r+0x8a>
 80026d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026d8:	1f0c      	subs	r4, r1, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bfb8      	it	lt
 80026de:	18e4      	addlt	r4, r4, r3
 80026e0:	f000 f8dc 	bl	800289c <__malloc_lock>
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <_free_r+0x8c>)
 80026e6:	6813      	ldr	r3, [r2, #0]
 80026e8:	b933      	cbnz	r3, 80026f8 <_free_r+0x2c>
 80026ea:	6063      	str	r3, [r4, #4]
 80026ec:	6014      	str	r4, [r2, #0]
 80026ee:	4628      	mov	r0, r5
 80026f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026f4:	f000 b8d8 	b.w	80028a8 <__malloc_unlock>
 80026f8:	42a3      	cmp	r3, r4
 80026fa:	d908      	bls.n	800270e <_free_r+0x42>
 80026fc:	6820      	ldr	r0, [r4, #0]
 80026fe:	1821      	adds	r1, r4, r0
 8002700:	428b      	cmp	r3, r1
 8002702:	bf01      	itttt	eq
 8002704:	6819      	ldreq	r1, [r3, #0]
 8002706:	685b      	ldreq	r3, [r3, #4]
 8002708:	1809      	addeq	r1, r1, r0
 800270a:	6021      	streq	r1, [r4, #0]
 800270c:	e7ed      	b.n	80026ea <_free_r+0x1e>
 800270e:	461a      	mov	r2, r3
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	b10b      	cbz	r3, 8002718 <_free_r+0x4c>
 8002714:	42a3      	cmp	r3, r4
 8002716:	d9fa      	bls.n	800270e <_free_r+0x42>
 8002718:	6811      	ldr	r1, [r2, #0]
 800271a:	1850      	adds	r0, r2, r1
 800271c:	42a0      	cmp	r0, r4
 800271e:	d10b      	bne.n	8002738 <_free_r+0x6c>
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	4401      	add	r1, r0
 8002724:	1850      	adds	r0, r2, r1
 8002726:	4283      	cmp	r3, r0
 8002728:	6011      	str	r1, [r2, #0]
 800272a:	d1e0      	bne.n	80026ee <_free_r+0x22>
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4408      	add	r0, r1
 8002732:	6010      	str	r0, [r2, #0]
 8002734:	6053      	str	r3, [r2, #4]
 8002736:	e7da      	b.n	80026ee <_free_r+0x22>
 8002738:	d902      	bls.n	8002740 <_free_r+0x74>
 800273a:	230c      	movs	r3, #12
 800273c:	602b      	str	r3, [r5, #0]
 800273e:	e7d6      	b.n	80026ee <_free_r+0x22>
 8002740:	6820      	ldr	r0, [r4, #0]
 8002742:	1821      	adds	r1, r4, r0
 8002744:	428b      	cmp	r3, r1
 8002746:	bf01      	itttt	eq
 8002748:	6819      	ldreq	r1, [r3, #0]
 800274a:	685b      	ldreq	r3, [r3, #4]
 800274c:	1809      	addeq	r1, r1, r0
 800274e:	6021      	streq	r1, [r4, #0]
 8002750:	6063      	str	r3, [r4, #4]
 8002752:	6054      	str	r4, [r2, #4]
 8002754:	e7cb      	b.n	80026ee <_free_r+0x22>
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200002b4 	.word	0x200002b4

0800275c <sbrk_aligned>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4e0e      	ldr	r6, [pc, #56]	; (8002798 <sbrk_aligned+0x3c>)
 8002760:	460c      	mov	r4, r1
 8002762:	6831      	ldr	r1, [r6, #0]
 8002764:	4605      	mov	r5, r0
 8002766:	b911      	cbnz	r1, 800276e <sbrk_aligned+0x12>
 8002768:	f000 fbaa 	bl	8002ec0 <_sbrk_r>
 800276c:	6030      	str	r0, [r6, #0]
 800276e:	4621      	mov	r1, r4
 8002770:	4628      	mov	r0, r5
 8002772:	f000 fba5 	bl	8002ec0 <_sbrk_r>
 8002776:	1c43      	adds	r3, r0, #1
 8002778:	d00a      	beq.n	8002790 <sbrk_aligned+0x34>
 800277a:	1cc4      	adds	r4, r0, #3
 800277c:	f024 0403 	bic.w	r4, r4, #3
 8002780:	42a0      	cmp	r0, r4
 8002782:	d007      	beq.n	8002794 <sbrk_aligned+0x38>
 8002784:	1a21      	subs	r1, r4, r0
 8002786:	4628      	mov	r0, r5
 8002788:	f000 fb9a 	bl	8002ec0 <_sbrk_r>
 800278c:	3001      	adds	r0, #1
 800278e:	d101      	bne.n	8002794 <sbrk_aligned+0x38>
 8002790:	f04f 34ff 	mov.w	r4, #4294967295
 8002794:	4620      	mov	r0, r4
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	200002b8 	.word	0x200002b8

0800279c <_malloc_r>:
 800279c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a0:	1ccd      	adds	r5, r1, #3
 80027a2:	f025 0503 	bic.w	r5, r5, #3
 80027a6:	3508      	adds	r5, #8
 80027a8:	2d0c      	cmp	r5, #12
 80027aa:	bf38      	it	cc
 80027ac:	250c      	movcc	r5, #12
 80027ae:	2d00      	cmp	r5, #0
 80027b0:	4607      	mov	r7, r0
 80027b2:	db01      	blt.n	80027b8 <_malloc_r+0x1c>
 80027b4:	42a9      	cmp	r1, r5
 80027b6:	d905      	bls.n	80027c4 <_malloc_r+0x28>
 80027b8:	230c      	movs	r3, #12
 80027ba:	2600      	movs	r6, #0
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4630      	mov	r0, r6
 80027c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002898 <_malloc_r+0xfc>
 80027c8:	f000 f868 	bl	800289c <__malloc_lock>
 80027cc:	f8d8 3000 	ldr.w	r3, [r8]
 80027d0:	461c      	mov	r4, r3
 80027d2:	bb5c      	cbnz	r4, 800282c <_malloc_r+0x90>
 80027d4:	4629      	mov	r1, r5
 80027d6:	4638      	mov	r0, r7
 80027d8:	f7ff ffc0 	bl	800275c <sbrk_aligned>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	4604      	mov	r4, r0
 80027e0:	d155      	bne.n	800288e <_malloc_r+0xf2>
 80027e2:	f8d8 4000 	ldr.w	r4, [r8]
 80027e6:	4626      	mov	r6, r4
 80027e8:	2e00      	cmp	r6, #0
 80027ea:	d145      	bne.n	8002878 <_malloc_r+0xdc>
 80027ec:	2c00      	cmp	r4, #0
 80027ee:	d048      	beq.n	8002882 <_malloc_r+0xe6>
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	4631      	mov	r1, r6
 80027f4:	4638      	mov	r0, r7
 80027f6:	eb04 0903 	add.w	r9, r4, r3
 80027fa:	f000 fb61 	bl	8002ec0 <_sbrk_r>
 80027fe:	4581      	cmp	r9, r0
 8002800:	d13f      	bne.n	8002882 <_malloc_r+0xe6>
 8002802:	6821      	ldr	r1, [r4, #0]
 8002804:	4638      	mov	r0, r7
 8002806:	1a6d      	subs	r5, r5, r1
 8002808:	4629      	mov	r1, r5
 800280a:	f7ff ffa7 	bl	800275c <sbrk_aligned>
 800280e:	3001      	adds	r0, #1
 8002810:	d037      	beq.n	8002882 <_malloc_r+0xe6>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	442b      	add	r3, r5
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	f8d8 3000 	ldr.w	r3, [r8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d038      	beq.n	8002892 <_malloc_r+0xf6>
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	42a2      	cmp	r2, r4
 8002824:	d12b      	bne.n	800287e <_malloc_r+0xe2>
 8002826:	2200      	movs	r2, #0
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e00f      	b.n	800284c <_malloc_r+0xb0>
 800282c:	6822      	ldr	r2, [r4, #0]
 800282e:	1b52      	subs	r2, r2, r5
 8002830:	d41f      	bmi.n	8002872 <_malloc_r+0xd6>
 8002832:	2a0b      	cmp	r2, #11
 8002834:	d917      	bls.n	8002866 <_malloc_r+0xca>
 8002836:	1961      	adds	r1, r4, r5
 8002838:	42a3      	cmp	r3, r4
 800283a:	6025      	str	r5, [r4, #0]
 800283c:	bf18      	it	ne
 800283e:	6059      	strne	r1, [r3, #4]
 8002840:	6863      	ldr	r3, [r4, #4]
 8002842:	bf08      	it	eq
 8002844:	f8c8 1000 	streq.w	r1, [r8]
 8002848:	5162      	str	r2, [r4, r5]
 800284a:	604b      	str	r3, [r1, #4]
 800284c:	4638      	mov	r0, r7
 800284e:	f104 060b 	add.w	r6, r4, #11
 8002852:	f000 f829 	bl	80028a8 <__malloc_unlock>
 8002856:	f026 0607 	bic.w	r6, r6, #7
 800285a:	1d23      	adds	r3, r4, #4
 800285c:	1af2      	subs	r2, r6, r3
 800285e:	d0ae      	beq.n	80027be <_malloc_r+0x22>
 8002860:	1b9b      	subs	r3, r3, r6
 8002862:	50a3      	str	r3, [r4, r2]
 8002864:	e7ab      	b.n	80027be <_malloc_r+0x22>
 8002866:	42a3      	cmp	r3, r4
 8002868:	6862      	ldr	r2, [r4, #4]
 800286a:	d1dd      	bne.n	8002828 <_malloc_r+0x8c>
 800286c:	f8c8 2000 	str.w	r2, [r8]
 8002870:	e7ec      	b.n	800284c <_malloc_r+0xb0>
 8002872:	4623      	mov	r3, r4
 8002874:	6864      	ldr	r4, [r4, #4]
 8002876:	e7ac      	b.n	80027d2 <_malloc_r+0x36>
 8002878:	4634      	mov	r4, r6
 800287a:	6876      	ldr	r6, [r6, #4]
 800287c:	e7b4      	b.n	80027e8 <_malloc_r+0x4c>
 800287e:	4613      	mov	r3, r2
 8002880:	e7cc      	b.n	800281c <_malloc_r+0x80>
 8002882:	230c      	movs	r3, #12
 8002884:	4638      	mov	r0, r7
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	f000 f80e 	bl	80028a8 <__malloc_unlock>
 800288c:	e797      	b.n	80027be <_malloc_r+0x22>
 800288e:	6025      	str	r5, [r4, #0]
 8002890:	e7dc      	b.n	800284c <_malloc_r+0xb0>
 8002892:	605b      	str	r3, [r3, #4]
 8002894:	deff      	udf	#255	; 0xff
 8002896:	bf00      	nop
 8002898:	200002b4 	.word	0x200002b4

0800289c <__malloc_lock>:
 800289c:	4801      	ldr	r0, [pc, #4]	; (80028a4 <__malloc_lock+0x8>)
 800289e:	f7ff bf13 	b.w	80026c8 <__retarget_lock_acquire_recursive>
 80028a2:	bf00      	nop
 80028a4:	200002b0 	.word	0x200002b0

080028a8 <__malloc_unlock>:
 80028a8:	4801      	ldr	r0, [pc, #4]	; (80028b0 <__malloc_unlock+0x8>)
 80028aa:	f7ff bf0e 	b.w	80026ca <__retarget_lock_release_recursive>
 80028ae:	bf00      	nop
 80028b0:	200002b0 	.word	0x200002b0

080028b4 <__ssputs_r>:
 80028b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b8:	461f      	mov	r7, r3
 80028ba:	688e      	ldr	r6, [r1, #8]
 80028bc:	4682      	mov	sl, r0
 80028be:	42be      	cmp	r6, r7
 80028c0:	460c      	mov	r4, r1
 80028c2:	4690      	mov	r8, r2
 80028c4:	680b      	ldr	r3, [r1, #0]
 80028c6:	d82c      	bhi.n	8002922 <__ssputs_r+0x6e>
 80028c8:	898a      	ldrh	r2, [r1, #12]
 80028ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028ce:	d026      	beq.n	800291e <__ssputs_r+0x6a>
 80028d0:	6965      	ldr	r5, [r4, #20]
 80028d2:	6909      	ldr	r1, [r1, #16]
 80028d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028d8:	eba3 0901 	sub.w	r9, r3, r1
 80028dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028e0:	1c7b      	adds	r3, r7, #1
 80028e2:	444b      	add	r3, r9
 80028e4:	106d      	asrs	r5, r5, #1
 80028e6:	429d      	cmp	r5, r3
 80028e8:	bf38      	it	cc
 80028ea:	461d      	movcc	r5, r3
 80028ec:	0553      	lsls	r3, r2, #21
 80028ee:	d527      	bpl.n	8002940 <__ssputs_r+0x8c>
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7ff ff53 	bl	800279c <_malloc_r>
 80028f6:	4606      	mov	r6, r0
 80028f8:	b360      	cbz	r0, 8002954 <__ssputs_r+0xa0>
 80028fa:	464a      	mov	r2, r9
 80028fc:	6921      	ldr	r1, [r4, #16]
 80028fe:	f000 fafd 	bl	8002efc <memcpy>
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	81a3      	strh	r3, [r4, #12]
 800290e:	6126      	str	r6, [r4, #16]
 8002910:	444e      	add	r6, r9
 8002912:	6026      	str	r6, [r4, #0]
 8002914:	463e      	mov	r6, r7
 8002916:	6165      	str	r5, [r4, #20]
 8002918:	eba5 0509 	sub.w	r5, r5, r9
 800291c:	60a5      	str	r5, [r4, #8]
 800291e:	42be      	cmp	r6, r7
 8002920:	d900      	bls.n	8002924 <__ssputs_r+0x70>
 8002922:	463e      	mov	r6, r7
 8002924:	4632      	mov	r2, r6
 8002926:	4641      	mov	r1, r8
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	f000 faaf 	bl	8002e8c <memmove>
 800292e:	2000      	movs	r0, #0
 8002930:	68a3      	ldr	r3, [r4, #8]
 8002932:	1b9b      	subs	r3, r3, r6
 8002934:	60a3      	str	r3, [r4, #8]
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	4433      	add	r3, r6
 800293a:	6023      	str	r3, [r4, #0]
 800293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002940:	462a      	mov	r2, r5
 8002942:	f000 fae9 	bl	8002f18 <_realloc_r>
 8002946:	4606      	mov	r6, r0
 8002948:	2800      	cmp	r0, #0
 800294a:	d1e0      	bne.n	800290e <__ssputs_r+0x5a>
 800294c:	4650      	mov	r0, sl
 800294e:	6921      	ldr	r1, [r4, #16]
 8002950:	f7ff febc 	bl	80026cc <_free_r>
 8002954:	230c      	movs	r3, #12
 8002956:	f8ca 3000 	str.w	r3, [sl]
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002964:	81a3      	strh	r3, [r4, #12]
 8002966:	e7e9      	b.n	800293c <__ssputs_r+0x88>

08002968 <_svfiprintf_r>:
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	4698      	mov	r8, r3
 800296e:	898b      	ldrh	r3, [r1, #12]
 8002970:	4607      	mov	r7, r0
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	460d      	mov	r5, r1
 8002976:	4614      	mov	r4, r2
 8002978:	b09d      	sub	sp, #116	; 0x74
 800297a:	d50e      	bpl.n	800299a <_svfiprintf_r+0x32>
 800297c:	690b      	ldr	r3, [r1, #16]
 800297e:	b963      	cbnz	r3, 800299a <_svfiprintf_r+0x32>
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	f7ff ff0b 	bl	800279c <_malloc_r>
 8002986:	6028      	str	r0, [r5, #0]
 8002988:	6128      	str	r0, [r5, #16]
 800298a:	b920      	cbnz	r0, 8002996 <_svfiprintf_r+0x2e>
 800298c:	230c      	movs	r3, #12
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	e0d0      	b.n	8002b38 <_svfiprintf_r+0x1d0>
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	616b      	str	r3, [r5, #20]
 800299a:	2300      	movs	r3, #0
 800299c:	9309      	str	r3, [sp, #36]	; 0x24
 800299e:	2320      	movs	r3, #32
 80029a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029a4:	2330      	movs	r3, #48	; 0x30
 80029a6:	f04f 0901 	mov.w	r9, #1
 80029aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002b50 <_svfiprintf_r+0x1e8>
 80029b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029b6:	4623      	mov	r3, r4
 80029b8:	469a      	mov	sl, r3
 80029ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029be:	b10a      	cbz	r2, 80029c4 <_svfiprintf_r+0x5c>
 80029c0:	2a25      	cmp	r2, #37	; 0x25
 80029c2:	d1f9      	bne.n	80029b8 <_svfiprintf_r+0x50>
 80029c4:	ebba 0b04 	subs.w	fp, sl, r4
 80029c8:	d00b      	beq.n	80029e2 <_svfiprintf_r+0x7a>
 80029ca:	465b      	mov	r3, fp
 80029cc:	4622      	mov	r2, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	4638      	mov	r0, r7
 80029d2:	f7ff ff6f 	bl	80028b4 <__ssputs_r>
 80029d6:	3001      	adds	r0, #1
 80029d8:	f000 80a9 	beq.w	8002b2e <_svfiprintf_r+0x1c6>
 80029dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029de:	445a      	add	r2, fp
 80029e0:	9209      	str	r2, [sp, #36]	; 0x24
 80029e2:	f89a 3000 	ldrb.w	r3, [sl]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a1 	beq.w	8002b2e <_svfiprintf_r+0x1c6>
 80029ec:	2300      	movs	r3, #0
 80029ee:	f04f 32ff 	mov.w	r2, #4294967295
 80029f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029f6:	f10a 0a01 	add.w	sl, sl, #1
 80029fa:	9304      	str	r3, [sp, #16]
 80029fc:	9307      	str	r3, [sp, #28]
 80029fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a02:	931a      	str	r3, [sp, #104]	; 0x68
 8002a04:	4654      	mov	r4, sl
 8002a06:	2205      	movs	r2, #5
 8002a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0c:	4850      	ldr	r0, [pc, #320]	; (8002b50 <_svfiprintf_r+0x1e8>)
 8002a0e:	f000 fa67 	bl	8002ee0 <memchr>
 8002a12:	9a04      	ldr	r2, [sp, #16]
 8002a14:	b9d8      	cbnz	r0, 8002a4e <_svfiprintf_r+0xe6>
 8002a16:	06d0      	lsls	r0, r2, #27
 8002a18:	bf44      	itt	mi
 8002a1a:	2320      	movmi	r3, #32
 8002a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a20:	0711      	lsls	r1, r2, #28
 8002a22:	bf44      	itt	mi
 8002a24:	232b      	movmi	r3, #43	; 0x2b
 8002a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a30:	d015      	beq.n	8002a5e <_svfiprintf_r+0xf6>
 8002a32:	4654      	mov	r4, sl
 8002a34:	2000      	movs	r0, #0
 8002a36:	f04f 0c0a 	mov.w	ip, #10
 8002a3a:	9a07      	ldr	r2, [sp, #28]
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a42:	3b30      	subs	r3, #48	; 0x30
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d94d      	bls.n	8002ae4 <_svfiprintf_r+0x17c>
 8002a48:	b1b0      	cbz	r0, 8002a78 <_svfiprintf_r+0x110>
 8002a4a:	9207      	str	r2, [sp, #28]
 8002a4c:	e014      	b.n	8002a78 <_svfiprintf_r+0x110>
 8002a4e:	eba0 0308 	sub.w	r3, r0, r8
 8002a52:	fa09 f303 	lsl.w	r3, r9, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	46a2      	mov	sl, r4
 8002a5a:	9304      	str	r3, [sp, #16]
 8002a5c:	e7d2      	b.n	8002a04 <_svfiprintf_r+0x9c>
 8002a5e:	9b03      	ldr	r3, [sp, #12]
 8002a60:	1d19      	adds	r1, r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	9103      	str	r1, [sp, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfbb      	ittet	lt
 8002a6a:	425b      	neglt	r3, r3
 8002a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8002a70:	9307      	strge	r3, [sp, #28]
 8002a72:	9307      	strlt	r3, [sp, #28]
 8002a74:	bfb8      	it	lt
 8002a76:	9204      	strlt	r2, [sp, #16]
 8002a78:	7823      	ldrb	r3, [r4, #0]
 8002a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a7c:	d10c      	bne.n	8002a98 <_svfiprintf_r+0x130>
 8002a7e:	7863      	ldrb	r3, [r4, #1]
 8002a80:	2b2a      	cmp	r3, #42	; 0x2a
 8002a82:	d134      	bne.n	8002aee <_svfiprintf_r+0x186>
 8002a84:	9b03      	ldr	r3, [sp, #12]
 8002a86:	3402      	adds	r4, #2
 8002a88:	1d1a      	adds	r2, r3, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	9203      	str	r2, [sp, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfb8      	it	lt
 8002a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a96:	9305      	str	r3, [sp, #20]
 8002a98:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002b54 <_svfiprintf_r+0x1ec>
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4650      	mov	r0, sl
 8002aa0:	7821      	ldrb	r1, [r4, #0]
 8002aa2:	f000 fa1d 	bl	8002ee0 <memchr>
 8002aa6:	b138      	cbz	r0, 8002ab8 <_svfiprintf_r+0x150>
 8002aa8:	2240      	movs	r2, #64	; 0x40
 8002aaa:	9b04      	ldr	r3, [sp, #16]
 8002aac:	eba0 000a 	sub.w	r0, r0, sl
 8002ab0:	4082      	lsls	r2, r0
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	3401      	adds	r4, #1
 8002ab6:	9304      	str	r3, [sp, #16]
 8002ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002abc:	2206      	movs	r2, #6
 8002abe:	4826      	ldr	r0, [pc, #152]	; (8002b58 <_svfiprintf_r+0x1f0>)
 8002ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ac4:	f000 fa0c 	bl	8002ee0 <memchr>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d038      	beq.n	8002b3e <_svfiprintf_r+0x1d6>
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <_svfiprintf_r+0x1f4>)
 8002ace:	bb1b      	cbnz	r3, 8002b18 <_svfiprintf_r+0x1b0>
 8002ad0:	9b03      	ldr	r3, [sp, #12]
 8002ad2:	3307      	adds	r3, #7
 8002ad4:	f023 0307 	bic.w	r3, r3, #7
 8002ad8:	3308      	adds	r3, #8
 8002ada:	9303      	str	r3, [sp, #12]
 8002adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ade:	4433      	add	r3, r6
 8002ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae2:	e768      	b.n	80029b6 <_svfiprintf_r+0x4e>
 8002ae4:	460c      	mov	r4, r1
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aec:	e7a6      	b.n	8002a3c <_svfiprintf_r+0xd4>
 8002aee:	2300      	movs	r3, #0
 8002af0:	f04f 0c0a 	mov.w	ip, #10
 8002af4:	4619      	mov	r1, r3
 8002af6:	3401      	adds	r4, #1
 8002af8:	9305      	str	r3, [sp, #20]
 8002afa:	4620      	mov	r0, r4
 8002afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b00:	3a30      	subs	r2, #48	; 0x30
 8002b02:	2a09      	cmp	r2, #9
 8002b04:	d903      	bls.n	8002b0e <_svfiprintf_r+0x1a6>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0c6      	beq.n	8002a98 <_svfiprintf_r+0x130>
 8002b0a:	9105      	str	r1, [sp, #20]
 8002b0c:	e7c4      	b.n	8002a98 <_svfiprintf_r+0x130>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	2301      	movs	r3, #1
 8002b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b16:	e7f0      	b.n	8002afa <_svfiprintf_r+0x192>
 8002b18:	ab03      	add	r3, sp, #12
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	462a      	mov	r2, r5
 8002b1e:	4638      	mov	r0, r7
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <_svfiprintf_r+0x1f8>)
 8002b22:	a904      	add	r1, sp, #16
 8002b24:	f3af 8000 	nop.w
 8002b28:	1c42      	adds	r2, r0, #1
 8002b2a:	4606      	mov	r6, r0
 8002b2c:	d1d6      	bne.n	8002adc <_svfiprintf_r+0x174>
 8002b2e:	89ab      	ldrh	r3, [r5, #12]
 8002b30:	065b      	lsls	r3, r3, #25
 8002b32:	f53f af2d 	bmi.w	8002990 <_svfiprintf_r+0x28>
 8002b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b38:	b01d      	add	sp, #116	; 0x74
 8002b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3e:	ab03      	add	r3, sp, #12
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	462a      	mov	r2, r5
 8002b44:	4638      	mov	r0, r7
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <_svfiprintf_r+0x1f8>)
 8002b48:	a904      	add	r1, sp, #16
 8002b4a:	f000 f87d 	bl	8002c48 <_printf_i>
 8002b4e:	e7eb      	b.n	8002b28 <_svfiprintf_r+0x1c0>
 8002b50:	08003012 	.word	0x08003012
 8002b54:	08003018 	.word	0x08003018
 8002b58:	0800301c 	.word	0x0800301c
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	080028b5 	.word	0x080028b5

08002b64 <_printf_common>:
 8002b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b68:	4616      	mov	r6, r2
 8002b6a:	4699      	mov	r9, r3
 8002b6c:	688a      	ldr	r2, [r1, #8]
 8002b6e:	690b      	ldr	r3, [r1, #16]
 8002b70:	4607      	mov	r7, r0
 8002b72:	4293      	cmp	r3, r2
 8002b74:	bfb8      	it	lt
 8002b76:	4613      	movlt	r3, r2
 8002b78:	6033      	str	r3, [r6, #0]
 8002b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b7e:	460c      	mov	r4, r1
 8002b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b84:	b10a      	cbz	r2, 8002b8a <_printf_common+0x26>
 8002b86:	3301      	adds	r3, #1
 8002b88:	6033      	str	r3, [r6, #0]
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	0699      	lsls	r1, r3, #26
 8002b8e:	bf42      	ittt	mi
 8002b90:	6833      	ldrmi	r3, [r6, #0]
 8002b92:	3302      	addmi	r3, #2
 8002b94:	6033      	strmi	r3, [r6, #0]
 8002b96:	6825      	ldr	r5, [r4, #0]
 8002b98:	f015 0506 	ands.w	r5, r5, #6
 8002b9c:	d106      	bne.n	8002bac <_printf_common+0x48>
 8002b9e:	f104 0a19 	add.w	sl, r4, #25
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	6832      	ldr	r2, [r6, #0]
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	42ab      	cmp	r3, r5
 8002baa:	dc2b      	bgt.n	8002c04 <_printf_common+0xa0>
 8002bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bb0:	1e13      	subs	r3, r2, #0
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	bf18      	it	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	0692      	lsls	r2, r2, #26
 8002bba:	d430      	bmi.n	8002c1e <_printf_common+0xba>
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bc4:	47c0      	blx	r8
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	d023      	beq.n	8002c12 <_printf_common+0xae>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	6922      	ldr	r2, [r4, #16]
 8002bce:	f003 0306 	and.w	r3, r3, #6
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf14      	ite	ne
 8002bd6:	2500      	movne	r5, #0
 8002bd8:	6833      	ldreq	r3, [r6, #0]
 8002bda:	f04f 0600 	mov.w	r6, #0
 8002bde:	bf08      	it	eq
 8002be0:	68e5      	ldreq	r5, [r4, #12]
 8002be2:	f104 041a 	add.w	r4, r4, #26
 8002be6:	bf08      	it	eq
 8002be8:	1aed      	subeq	r5, r5, r3
 8002bea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002bee:	bf08      	it	eq
 8002bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bfc4      	itt	gt
 8002bf8:	1a9b      	subgt	r3, r3, r2
 8002bfa:	18ed      	addgt	r5, r5, r3
 8002bfc:	42b5      	cmp	r5, r6
 8002bfe:	d11a      	bne.n	8002c36 <_printf_common+0xd2>
 8002c00:	2000      	movs	r0, #0
 8002c02:	e008      	b.n	8002c16 <_printf_common+0xb2>
 8002c04:	2301      	movs	r3, #1
 8002c06:	4652      	mov	r2, sl
 8002c08:	4649      	mov	r1, r9
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	47c0      	blx	r8
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d103      	bne.n	8002c1a <_printf_common+0xb6>
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295
 8002c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1a:	3501      	adds	r5, #1
 8002c1c:	e7c1      	b.n	8002ba2 <_printf_common+0x3e>
 8002c1e:	2030      	movs	r0, #48	; 0x30
 8002c20:	18e1      	adds	r1, r4, r3
 8002c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c2c:	4422      	add	r2, r4
 8002c2e:	3302      	adds	r3, #2
 8002c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c34:	e7c2      	b.n	8002bbc <_printf_common+0x58>
 8002c36:	2301      	movs	r3, #1
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	47c0      	blx	r8
 8002c40:	3001      	adds	r0, #1
 8002c42:	d0e6      	beq.n	8002c12 <_printf_common+0xae>
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7d9      	b.n	8002bfc <_printf_common+0x98>

08002c48 <_printf_i>:
 8002c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4c:	7e0f      	ldrb	r7, [r1, #24]
 8002c4e:	4691      	mov	r9, r2
 8002c50:	2f78      	cmp	r7, #120	; 0x78
 8002c52:	4680      	mov	r8, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	469a      	mov	sl, r3
 8002c58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c5e:	d807      	bhi.n	8002c70 <_printf_i+0x28>
 8002c60:	2f62      	cmp	r7, #98	; 0x62
 8002c62:	d80a      	bhi.n	8002c7a <_printf_i+0x32>
 8002c64:	2f00      	cmp	r7, #0
 8002c66:	f000 80d5 	beq.w	8002e14 <_printf_i+0x1cc>
 8002c6a:	2f58      	cmp	r7, #88	; 0x58
 8002c6c:	f000 80c1 	beq.w	8002df2 <_printf_i+0x1aa>
 8002c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c78:	e03a      	b.n	8002cf0 <_printf_i+0xa8>
 8002c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c7e:	2b15      	cmp	r3, #21
 8002c80:	d8f6      	bhi.n	8002c70 <_printf_i+0x28>
 8002c82:	a101      	add	r1, pc, #4	; (adr r1, 8002c88 <_printf_i+0x40>)
 8002c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c88:	08002ce1 	.word	0x08002ce1
 8002c8c:	08002cf5 	.word	0x08002cf5
 8002c90:	08002c71 	.word	0x08002c71
 8002c94:	08002c71 	.word	0x08002c71
 8002c98:	08002c71 	.word	0x08002c71
 8002c9c:	08002c71 	.word	0x08002c71
 8002ca0:	08002cf5 	.word	0x08002cf5
 8002ca4:	08002c71 	.word	0x08002c71
 8002ca8:	08002c71 	.word	0x08002c71
 8002cac:	08002c71 	.word	0x08002c71
 8002cb0:	08002c71 	.word	0x08002c71
 8002cb4:	08002dfb 	.word	0x08002dfb
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002db5 	.word	0x08002db5
 8002cc0:	08002c71 	.word	0x08002c71
 8002cc4:	08002c71 	.word	0x08002c71
 8002cc8:	08002e1d 	.word	0x08002e1d
 8002ccc:	08002c71 	.word	0x08002c71
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002c71 	.word	0x08002c71
 8002cd8:	08002c71 	.word	0x08002c71
 8002cdc:	08002dbd 	.word	0x08002dbd
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	1d1a      	adds	r2, r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	602a      	str	r2, [r5, #0]
 8002ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0a0      	b.n	8002e36 <_printf_i+0x1ee>
 8002cf4:	6820      	ldr	r0, [r4, #0]
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	0607      	lsls	r7, r0, #24
 8002cfa:	f103 0104 	add.w	r1, r3, #4
 8002cfe:	6029      	str	r1, [r5, #0]
 8002d00:	d501      	bpl.n	8002d06 <_printf_i+0xbe>
 8002d02:	681e      	ldr	r6, [r3, #0]
 8002d04:	e003      	b.n	8002d0e <_printf_i+0xc6>
 8002d06:	0646      	lsls	r6, r0, #25
 8002d08:	d5fb      	bpl.n	8002d02 <_printf_i+0xba>
 8002d0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d0e:	2e00      	cmp	r6, #0
 8002d10:	da03      	bge.n	8002d1a <_printf_i+0xd2>
 8002d12:	232d      	movs	r3, #45	; 0x2d
 8002d14:	4276      	negs	r6, r6
 8002d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	4859      	ldr	r0, [pc, #356]	; (8002e84 <_printf_i+0x23c>)
 8002d1e:	e012      	b.n	8002d46 <_printf_i+0xfe>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	1d19      	adds	r1, r3, #4
 8002d26:	6029      	str	r1, [r5, #0]
 8002d28:	0605      	lsls	r5, r0, #24
 8002d2a:	d501      	bpl.n	8002d30 <_printf_i+0xe8>
 8002d2c:	681e      	ldr	r6, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <_printf_i+0xee>
 8002d30:	0641      	lsls	r1, r0, #25
 8002d32:	d5fb      	bpl.n	8002d2c <_printf_i+0xe4>
 8002d34:	881e      	ldrh	r6, [r3, #0]
 8002d36:	2f6f      	cmp	r7, #111	; 0x6f
 8002d38:	bf0c      	ite	eq
 8002d3a:	2308      	moveq	r3, #8
 8002d3c:	230a      	movne	r3, #10
 8002d3e:	4851      	ldr	r0, [pc, #324]	; (8002e84 <_printf_i+0x23c>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d46:	6865      	ldr	r5, [r4, #4]
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	bfa8      	it	ge
 8002d4c:	6821      	ldrge	r1, [r4, #0]
 8002d4e:	60a5      	str	r5, [r4, #8]
 8002d50:	bfa4      	itt	ge
 8002d52:	f021 0104 	bicge.w	r1, r1, #4
 8002d56:	6021      	strge	r1, [r4, #0]
 8002d58:	b90e      	cbnz	r6, 8002d5e <_printf_i+0x116>
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d04b      	beq.n	8002df6 <_printf_i+0x1ae>
 8002d5e:	4615      	mov	r5, r2
 8002d60:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d64:	fb03 6711 	mls	r7, r3, r1, r6
 8002d68:	5dc7      	ldrb	r7, [r0, r7]
 8002d6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d6e:	4637      	mov	r7, r6
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	460e      	mov	r6, r1
 8002d74:	d9f4      	bls.n	8002d60 <_printf_i+0x118>
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d10b      	bne.n	8002d92 <_printf_i+0x14a>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	07de      	lsls	r6, r3, #31
 8002d7e:	d508      	bpl.n	8002d92 <_printf_i+0x14a>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	6861      	ldr	r1, [r4, #4]
 8002d84:	4299      	cmp	r1, r3
 8002d86:	bfde      	ittt	le
 8002d88:	2330      	movle	r3, #48	; 0x30
 8002d8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d92:	1b52      	subs	r2, r2, r5
 8002d94:	6122      	str	r2, [r4, #16]
 8002d96:	464b      	mov	r3, r9
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	f8cd a000 	str.w	sl, [sp]
 8002da0:	aa03      	add	r2, sp, #12
 8002da2:	f7ff fedf 	bl	8002b64 <_printf_common>
 8002da6:	3001      	adds	r0, #1
 8002da8:	d14a      	bne.n	8002e40 <_printf_i+0x1f8>
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dae:	b004      	add	sp, #16
 8002db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	6023      	str	r3, [r4, #0]
 8002dbc:	2778      	movs	r7, #120	; 0x78
 8002dbe:	4832      	ldr	r0, [pc, #200]	; (8002e88 <_printf_i+0x240>)
 8002dc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	6829      	ldr	r1, [r5, #0]
 8002dc8:	061f      	lsls	r7, r3, #24
 8002dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dce:	d402      	bmi.n	8002dd6 <_printf_i+0x18e>
 8002dd0:	065f      	lsls	r7, r3, #25
 8002dd2:	bf48      	it	mi
 8002dd4:	b2b6      	uxthmi	r6, r6
 8002dd6:	07df      	lsls	r7, r3, #31
 8002dd8:	bf48      	it	mi
 8002dda:	f043 0320 	orrmi.w	r3, r3, #32
 8002dde:	6029      	str	r1, [r5, #0]
 8002de0:	bf48      	it	mi
 8002de2:	6023      	strmi	r3, [r4, #0]
 8002de4:	b91e      	cbnz	r6, 8002dee <_printf_i+0x1a6>
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f023 0320 	bic.w	r3, r3, #32
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	2310      	movs	r3, #16
 8002df0:	e7a6      	b.n	8002d40 <_printf_i+0xf8>
 8002df2:	4824      	ldr	r0, [pc, #144]	; (8002e84 <_printf_i+0x23c>)
 8002df4:	e7e4      	b.n	8002dc0 <_printf_i+0x178>
 8002df6:	4615      	mov	r5, r2
 8002df8:	e7bd      	b.n	8002d76 <_printf_i+0x12e>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	6826      	ldr	r6, [r4, #0]
 8002dfe:	1d18      	adds	r0, r3, #4
 8002e00:	6961      	ldr	r1, [r4, #20]
 8002e02:	6028      	str	r0, [r5, #0]
 8002e04:	0635      	lsls	r5, r6, #24
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	d501      	bpl.n	8002e0e <_printf_i+0x1c6>
 8002e0a:	6019      	str	r1, [r3, #0]
 8002e0c:	e002      	b.n	8002e14 <_printf_i+0x1cc>
 8002e0e:	0670      	lsls	r0, r6, #25
 8002e10:	d5fb      	bpl.n	8002e0a <_printf_i+0x1c2>
 8002e12:	8019      	strh	r1, [r3, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	4615      	mov	r5, r2
 8002e18:	6123      	str	r3, [r4, #16]
 8002e1a:	e7bc      	b.n	8002d96 <_printf_i+0x14e>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	1d1a      	adds	r2, r3, #4
 8002e22:	602a      	str	r2, [r5, #0]
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	6862      	ldr	r2, [r4, #4]
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f859 	bl	8002ee0 <memchr>
 8002e2e:	b108      	cbz	r0, 8002e34 <_printf_i+0x1ec>
 8002e30:	1b40      	subs	r0, r0, r5
 8002e32:	6060      	str	r0, [r4, #4]
 8002e34:	6863      	ldr	r3, [r4, #4]
 8002e36:	6123      	str	r3, [r4, #16]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3e:	e7aa      	b.n	8002d96 <_printf_i+0x14e>
 8002e40:	462a      	mov	r2, r5
 8002e42:	4649      	mov	r1, r9
 8002e44:	4640      	mov	r0, r8
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	47d0      	blx	sl
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d0ad      	beq.n	8002daa <_printf_i+0x162>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	079b      	lsls	r3, r3, #30
 8002e52:	d413      	bmi.n	8002e7c <_printf_i+0x234>
 8002e54:	68e0      	ldr	r0, [r4, #12]
 8002e56:	9b03      	ldr	r3, [sp, #12]
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	bfb8      	it	lt
 8002e5c:	4618      	movlt	r0, r3
 8002e5e:	e7a6      	b.n	8002dae <_printf_i+0x166>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4632      	mov	r2, r6
 8002e64:	4649      	mov	r1, r9
 8002e66:	4640      	mov	r0, r8
 8002e68:	47d0      	blx	sl
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d09d      	beq.n	8002daa <_printf_i+0x162>
 8002e6e:	3501      	adds	r5, #1
 8002e70:	68e3      	ldr	r3, [r4, #12]
 8002e72:	9903      	ldr	r1, [sp, #12]
 8002e74:	1a5b      	subs	r3, r3, r1
 8002e76:	42ab      	cmp	r3, r5
 8002e78:	dcf2      	bgt.n	8002e60 <_printf_i+0x218>
 8002e7a:	e7eb      	b.n	8002e54 <_printf_i+0x20c>
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	f104 0619 	add.w	r6, r4, #25
 8002e82:	e7f5      	b.n	8002e70 <_printf_i+0x228>
 8002e84:	08003023 	.word	0x08003023
 8002e88:	08003034 	.word	0x08003034

08002e8c <memmove>:
 8002e8c:	4288      	cmp	r0, r1
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	eb01 0402 	add.w	r4, r1, r2
 8002e94:	d902      	bls.n	8002e9c <memmove+0x10>
 8002e96:	4284      	cmp	r4, r0
 8002e98:	4623      	mov	r3, r4
 8002e9a:	d807      	bhi.n	8002eac <memmove+0x20>
 8002e9c:	1e43      	subs	r3, r0, #1
 8002e9e:	42a1      	cmp	r1, r4
 8002ea0:	d008      	beq.n	8002eb4 <memmove+0x28>
 8002ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eaa:	e7f8      	b.n	8002e9e <memmove+0x12>
 8002eac:	4601      	mov	r1, r0
 8002eae:	4402      	add	r2, r0
 8002eb0:	428a      	cmp	r2, r1
 8002eb2:	d100      	bne.n	8002eb6 <memmove+0x2a>
 8002eb4:	bd10      	pop	{r4, pc}
 8002eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ebe:	e7f7      	b.n	8002eb0 <memmove+0x24>

08002ec0 <_sbrk_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	4d05      	ldr	r5, [pc, #20]	; (8002edc <_sbrk_r+0x1c>)
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	602b      	str	r3, [r5, #0]
 8002ecc:	f7fd fbf8 	bl	80006c0 <_sbrk>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d102      	bne.n	8002eda <_sbrk_r+0x1a>
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	b103      	cbz	r3, 8002eda <_sbrk_r+0x1a>
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
 8002edc:	200002ac 	.word	0x200002ac

08002ee0 <memchr>:
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	b2c9      	uxtb	r1, r1
 8002ee6:	4402      	add	r2, r0
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	d101      	bne.n	8002ef2 <memchr+0x12>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e003      	b.n	8002efa <memchr+0x1a>
 8002ef2:	7804      	ldrb	r4, [r0, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	428c      	cmp	r4, r1
 8002ef8:	d1f6      	bne.n	8002ee8 <memchr+0x8>
 8002efa:	bd10      	pop	{r4, pc}

08002efc <memcpy>:
 8002efc:	440a      	add	r2, r1
 8002efe:	4291      	cmp	r1, r2
 8002f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f04:	d100      	bne.n	8002f08 <memcpy+0xc>
 8002f06:	4770      	bx	lr
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f0e:	4291      	cmp	r1, r2
 8002f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f14:	d1f9      	bne.n	8002f0a <memcpy+0xe>
 8002f16:	bd10      	pop	{r4, pc}

08002f18 <_realloc_r>:
 8002f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f1c:	4680      	mov	r8, r0
 8002f1e:	4614      	mov	r4, r2
 8002f20:	460e      	mov	r6, r1
 8002f22:	b921      	cbnz	r1, 8002f2e <_realloc_r+0x16>
 8002f24:	4611      	mov	r1, r2
 8002f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2a:	f7ff bc37 	b.w	800279c <_malloc_r>
 8002f2e:	b92a      	cbnz	r2, 8002f3c <_realloc_r+0x24>
 8002f30:	f7ff fbcc 	bl	80026cc <_free_r>
 8002f34:	4625      	mov	r5, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f3c:	f000 f81b 	bl	8002f76 <_malloc_usable_size_r>
 8002f40:	4284      	cmp	r4, r0
 8002f42:	4607      	mov	r7, r0
 8002f44:	d802      	bhi.n	8002f4c <_realloc_r+0x34>
 8002f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f4a:	d812      	bhi.n	8002f72 <_realloc_r+0x5a>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4640      	mov	r0, r8
 8002f50:	f7ff fc24 	bl	800279c <_malloc_r>
 8002f54:	4605      	mov	r5, r0
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d0ed      	beq.n	8002f36 <_realloc_r+0x1e>
 8002f5a:	42bc      	cmp	r4, r7
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	4631      	mov	r1, r6
 8002f60:	bf28      	it	cs
 8002f62:	463a      	movcs	r2, r7
 8002f64:	f7ff ffca 	bl	8002efc <memcpy>
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	f7ff fbae 	bl	80026cc <_free_r>
 8002f70:	e7e1      	b.n	8002f36 <_realloc_r+0x1e>
 8002f72:	4635      	mov	r5, r6
 8002f74:	e7df      	b.n	8002f36 <_realloc_r+0x1e>

08002f76 <_malloc_usable_size_r>:
 8002f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f7a:	1f18      	subs	r0, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bfbc      	itt	lt
 8002f80:	580b      	ldrlt	r3, [r1, r0]
 8002f82:	18c0      	addlt	r0, r0, r3
 8002f84:	4770      	bx	lr
	...

08002f88 <_init>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr

08002f94 <_fini>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr
